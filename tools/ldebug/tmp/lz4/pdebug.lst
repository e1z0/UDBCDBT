     1                                  
     2                                  %if 0
     3                                  
     4                                  lDOS iniload packed payload
     5                                   by C. Masloch, 2018-2020
     6                                  
     7                                  Usage of the works is permitted provided that this
     8                                  instrument is retained with the works, so that any entity
     9                                  that uses the works is notified of this instrument.
    10                                  
    11                                  DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
    12                                  
    13                                  
    14                                  Includes one of several depackers, some of which are under
    15                                  separate usage conditions. Refer to the individual depacker
    16                                  source files for the applicable usage conditions.
    17                                  
    18                                  %endif
    19                                  
    20                                  %include "lmacros3.mac"
     1                              <1> [list -]
    14                              <2> [list -]
    14                              <1> [list -]
    21                                  
    22                                  	struc LOADSTACKVARS, -10h
    23 FFFFFFF0 ????????                lsvFirstCluster:	resd 1
    24 FFFFFFF4 ????????                lsvFATSector:		resd 1
    25 FFFFFFF8 ????                    lsvFATSeg:		resw 1
    26 FFFFFFFA ????                    lsvLoadSeg:		resw 1
    27 FFFFFFFC ????????                lsvDataStart:		resd 1
    28                                  	endstruc
    29                                  
    30                                  	struc LOADDATA, LOADSTACKVARS - 10h
    31 FFFFFFE0 ????                    ldMemoryTop:	resw 1
    32 FFFFFFE2 ????                    ldLoadTop:	resw 1
    33 FFFFFFE4 ????                    ldSectorSeg:	resw 1
    34 FFFFFFE6 ??                      ldFATType:	resb 1
    35 FFFFFFE7 ??                      ldHasLBA:	resb 1
    36 FFFFFFE8 ????                    ldClusterSize:	resw 1
    37 FFFFFFEA ????                    ldParaPerSector:resw 1
    38 FFFFFFEC ????                    ldLoadingSeg:	resw 1
    39 FFFFFFEE ????                    ldLoadUntilSeg:	resw 1
    40                                  	endstruc
    41                                  
    42                                  
    43                                  %ifndef _MAP
    44                                  %elifempty _MAP
    45                                  %else	; defined non-empty, str or non-str
    46                                  	[map all _MAP]
    47                                  %endif
    48                                  
    49                                  	defaulting
    50                                  
    51                                  	numdef DEBUG0		; use errordata to generate an error code
    52                                  	numdef DEBUG1		; dump_stack_frame after an error occurred
    53                                  	numdef DEBUG2		; dump_stack_frame before blz_depack_safe call
    54                                  	numdef DEBUG3		; dump_stack_frame at start of blz_depack_safe
    55                                  
    56                                  	numdef ALLOW_OVERLAPPING,	1	; allow overlapping src and dst
    57                                  	numdef TEST_PROGRAM,		0
    58                                  	numdef TEST_PROGRAM_DECOMPRESSED_SIZE,		0,0
    59                                  %if _TEST_PROGRAM && ! _TEST_PROGRAM_DECOMPRESSED_SIZE
    60                                   %error Test program has to learn of decompressed size.
    61                                  %endif
    62                                  	numdef TEST_PROGRESS,	0
    63                                  
    64                                  	numdef EXEC_OFFSET,	0
    65                                  	numdef EXEC_SEGMENT,	0
    66                                  	numdef IMAGE_EXE,	0
    67                                  %if ! _IMAGE_EXE && _TEST_PROGRAM
    68                                   %error Test program can only be used as EXE.
    69                                  %endif
    70                                  	numdef IMAGE_EXE_CS,	-16	; relative-segment for CS
    71                                  	numdef IMAGE_EXE_IP,	256 +64	; value for IP
    72                                  		; The next two are only used if _IMAGE_EXE_AUTO_STACK is 0.
    73                                  	numdef IMAGE_EXE_SS,	-16	; relative-segment for SS
    74                                  	numdef IMAGE_EXE_SP,	0FFFEh	; value for SP (0 underflows)
    75                                  	numdef IMAGE_EXE_AUTO_STACK,	0, 2048	; use stack behind image
    76                                  		; _IMAGE_EXE_AUTO_STACK here differs from iniload's def of
    77                                  		;  the same name. This one is only used as a flag; if non-zero,
    78                                  		;  keep the stack given to us by iniload; if zero, set up the
    79                                  		;  stack specified by _IMAGE_EXE_SS and _IMAGE_EXE_SP.
    80                                  	numdef DEVICE,			0
    81                                  	gendef DEVICE_NAME,		""
    82                                  	numdef DEVICE_ATTRIBUTE,	8000h
    83                                  	numdef DEVICE_ZERO_ENTRYPOINT,	0
    84                                  
    85                                  	numdef BRIEFLZ,		0
    86                                  	numdef LZ4,		0
    87                                  	numdef SNAPPY,		0
    88                                  	numdef EXODECR,		0
    89                                  	numdef X,		0
    90                                  	numdef HEATSHRINK,	0
    91                                  	numdef LZD,		0
    92                                  	numdef LZO,		0
    93                                  	numdef LZSA2,		0
    94                                  	numdef APL,		0
    95                                  	numdef BZP,		0
    96                                  %if (!!_BRIEFLZ + !!_LZ4 + !!_SNAPPY + !!_EXODECR + !!_X + !!_HEATSHRINK 	+ !!_LZD + !!_LZO + !!_LZSA2 + !!_APL + !!_BZP) != 1
    98                                   %fatal Exactly one compression method must be selected.
    99                                  %endif
   100                                  %assign ADDITIONAL_MEMORY 0
   101                                  %if _BRIEFLZ
   102                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.BLZ"
   103                                  %elif _LZ4
   104                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.LZ4"
   105                                  %elif _SNAPPY
   106                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.SZ"
   107                                  %elif _EXODECR
   108                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.EXO"
   109                                  %elif _X
   110                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.X"
   111                                  %elif _HEATSHRINK
   112                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.HS"
   113                                  %elif _LZD
   114                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.LZ"
   115                                  %elif _LZO
   116                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.LZO"
   117                                  %elif _LZSA2
   118                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.SA2"
   119                                  %elif _APL
   120                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.APL"
   121                                  %elif _BZP
   122                                  	strdef PAYLOAD_FILE,	"lDOSLOAD.BZP"
   123                                  %endif
   124                                  	numdef PAYLOAD_KERNEL_MAX_PARAS,	0, 0
   125                                  %if _PAYLOAD_KERNEL_MAX_PARAS && ! _IMAGE_EXE
   126                                   %error Kernel mode max paras requires building dual-mode executable
   127                                  %endif
   128                                  	numdef COUNTER,		0, 32
   129                                  %if (_COUNTER - 1) & _COUNTER
   130                                   %error COUNTER must be a power of two
   131                                  %endif
   132                                  
   133                                  	strdef INILOAD_CFG, ""
   134                                  %ifnidn _INILOAD_CFG, ""
   135                                   %include _INILOAD_CFG
     1                              <1> ; File auto-generated, do not edit.
     2                              <1> strdef INILOAD_SIGNATURE, "eb"
     3                              <1> %assign _DEVICE 1
     4                              <1> %assign _DEVICE_ZERO_ENTRYPOINT 1
     5                              <1> %assign _DEVICE_ATTRIBUTE 8000h
     6                              <1> %define _DEVICE_NAME "LDEBUG$$"
   136                                  %endif
   137                                  
   138                                  %if _DEVICE
   139                                   %ifidn _DEVICE_NAME, ""
   140                                    %error Device name must be set
   141                                   %endif
   142                                  %endif
   143                                  
   144                                  
   145                                  	cpu 8086
   146                                  	section INIT0 start=0 vstart=0
   147                                  init0_start:
   148                                  %if _DEVICE
   149                                  		; The device header is of a fixed format.
   150                                  		;  For our purposes, the 4-byte code for
   151                                  		;  each the strategy entry and the
   152                                  		;  interrupt entry is part of this format.
   153                                  		; (DOS may read the attributes or entrypoint
   154                                  		;  offsets before calling either, so in the inicomp
   155                                  		;  stage we need to recreate in the entrypoints part
   156                                  		;  exactly what the application has here.)
   157                                  device_header:
   158                                  .next:
   159                                   %if _DEVICE_ZERO_ENTRYPOINT
   160 00000000 EB3E                    	fill 2, -1, jmp strict short j_zero_entrypoint
   161 00000002 FFFF                    	dw -1
   162                                   %else
   163                                  	dd -1				; link to next device
   164                                   %endif
   165                                  .attributes:
   166 00000004 0080                    	dw _DEVICE_ATTRIBUTE		; attributes
   167                                  .strategy:
   168 00000006 [1200]                  	dw .strategy_entry		; -> strategy entry
   169                                  .interrupt:
   170 00000008 [1600]                  	dw .interrupt_entry		; -> interrupt entry
   171                                  .name:
   172 0000000A 4C44454255472424        	fill 8, 32, db _DEVICE_NAME	; character device name,
   173                                  					;  or block device number of units
   174                                  					;  + optional name
   175                                  .strategy_entry:
   176 00000012 EB5190<rep 2h>          	fill 4, 90h, jmp device_entrypoint
   177                                  .interrupt_entry:
   178 00000016 CB90<rep 3h>            	fill 4, 90h, retf
   179                                  %endif
   180                                  
   181                                  
   182                                  %if _IMAGE_EXE || _DEVICE
   183 0000001A 90                      	nop
   184 0000001B 90<rep 5h>              	align 32, nop
   185                                  init0_kernel_entry:
   186                                  		; cs:ip = load seg : 32 here
   187                                  %if ($ - $$) != 32
   188                                   %error Wrong kernel mode entrypoint
   189                                  %endif
   190                                  %if _TEST_PROGRAM
   191                                  @@:
   192                                  	int3
   193                                  	sti
   194                                  	hlt
   195                                  	jmp @B
   196                                  %endif
   197                                  %if ! _IMAGE_EXE
   198                                  j_zero_entrypoint:
   199                                  %endif
   200 00000020 31DB                    	xor bx, bx		; 0 = kernel mode
   201 00000022 50                      	push ax
   202 00000023 8CC8                    	mov ax, cs
   203 00000025 83C01D                  	add ax, (init0_end - init0_start) >> 4
   204 00000028 8B56E2                  	mov dx, word [ bp + ldLoadTop ]	; => after end of available space
   205 0000002B BE6000                  	mov si, 60h		; => destination
   206 0000002E EB20                    	jmp init0_common
   207                                  
   208                                   %if _IMAGE_EXE
   209 00000030 90<rep 10h>             	align 64, nop
   210                                  j_zero_entrypoint:
   211                                  init0_exe_entry:
   212                                  		; NOTE:	This part is called with ip = 256 + 64, cs = PSP.
   213                                  %if ($ - $$) != 64
   214                                   %error Wrong EXE mode entrypoint
   215                                  %endif
   216 00000040 BB0100                  	mov bx, 1		; EXE mode
   217 00000043 50                      	push ax
   218                                    %if _TEST_PROGRAM
   219                                  	mov si, 81h
   220                                  	xor dx, dx
   221                                  	xor ax, ax
   222                                  cmdline:
   223                                  .:
   224                                  	lodsb
   225                                  	cmp al, 9
   226                                  	je .
   227                                  	cmp al, 32
   228                                  	je .
   229                                  	cmp al, 13
   230                                  	je .end
   231                                  	cmp al, '0'
   232                                  	jb .notdigit
   233                                  	cmp al, '9'
   234                                  	ja .notdigit
   235                                  .digit:
   236                                  	sub al, '0'
   237                                  	mov cx, dx		; times 1
   238                                  	add dx, dx
   239                                  	jc .invalid
   240                                  	add dx, dx		; times 4
   241                                  	jc .invalid
   242                                  	add dx, cx		; times 5
   243                                  	jc .invalid
   244                                  	add dx, dx		; times 10
   245                                  	jc .invalid
   246                                  	add dx, ax		; add in low digit
   247                                  	jc .invalid
   248                                  	jmp .
   249                                  
   250                                  .notdigit:
   251                                  	cmp al, 'A'
   252                                  	je .a
   253                                  	cmp al, 'a'
   254                                  	je .a
   255                                  	cmp al, 'B'
   256                                  	je .b
   257                                  	cmp al, 'b'
   258                                  	je .b
   259                                  .invalid:
   260                                  	mov dx, -1		; invalid
   261                                  	jmp .end
   262                                  
   263                                  .a:
   264                                  	and bh, ~ 80h
   265                                  	jmp .
   266                                  
   267                                  .b:
   268                                  	or bh, 80h
   269                                  	jmp .
   270                                  
   271                                  .end:
   272                                  	push dx
   273                                    %endif
   274 00000044 8CD2                    	mov dx, ss		; => after end of available space
   275 00000046 8CC8                    	mov ax, cs
   276 00000048 83C02D                  	add ax, (256 + (init0_end - init0_start)) >> 4	; => source
   277 0000004B 8CCE                    	mov si, cs
   278 0000004D 83C610                  	add si, 256 >> 4	; => destination
   279                                   %endif
   280                                  
   281                                  init0_common:
   282                                  		; REM:	This part must be position-independent, as it is
   283                                  		;	 called either with ip = init0_common (kernel mode
   284                                  		;	 or device mode)
   285                                  		;	 or ip = init0_common + 256 (application mode).
   286                                  		; INP:	si => depack destination
   287                                  		;	ax => source of payload + INIT1
   288                                  		;	dx => behind available memory
   289                                  		; OUT:	cs:ip -> init1_start:
   290                                  		;	ax => INIT1
   291                                  		;	dx => payload source
   292                                  		;	si => depack destination
   293                                  		;	bx = mode
   294 00000050 FC                      	cld
   295                                  %if _TEST_PROGRAM
   296                                  	sub dx, ( (payload_end - payload) ) >> 4
   297                                  	jc .error
   298                                  	mov cx, ( (payload_end - payload) 		+ (init1_end - init1_start) 		+ (init2_end - init2_start) 		) >> 4
   302                                  	sub dx, cx
   303                                  	jc .error
   304                                  	cmp dx, ax
   305                                  	jb .error
   306                                  %else
   307 00000051 B9C013                  	mov cx, ( (payload_end - payload) 		+ (init1_end - init1_start) 		) >> 4
   310                                  				; cx = amount paragraphs in payload + INIT1
   311 00000054 29CA                    	sub dx, cx		; => destination for payload + INIT1
   312                                  				;  (highest possible spot in available memory)
   313                                  %endif
   314 00000056 56                      	push si			; preserve destination
   315 00000057 E8F300                  	call init0_movp		; move up payload + INIT1
   316 0000005A 5E                      	pop si
   317                                  %else
   318                                  	cld
   319                                  	mov ax, cs
   320                                  	add ax, (init0_end - init0_start) >> 4
   321                                  	mov cx, ( (payload_end - payload) 		+ (init1_end - init1_start) 		) >> 4
   324                                  	mov dx, word [ bp + ldLoadTop ]
   325                                  	sub dx, cx
   326                                  	call init0_movp
   327                                  %endif
   328                                  
   329 0000005B 89D0                    	mov ax, dx		; => payload
   330                                  %if _TEST_PROGRAM
   331                                  	add ax, ( 		+ (payload_end - payload) 		+ (init1_end - init1_start) 		) >> 4		; => INIT2
   335                                  %else
   336 0000005D 057D13                  	add ax, ( 		+ (payload_end - payload) 		) >> 4		; => INIT1
   339                                  %endif
   340 00000060 31C9                    	xor cx, cx
   341 00000062 50                      	push ax
   342 00000063 51                      	push cx
   343 00000064 CB                      	retf			; jump to relocated INIT1:init1_start
   344                                  				;  or INIT2:init2_start
   345                                  
   346                                  
   347                                  %if _TEST_PROGRAM
   348                                  .error:
   349                                  	mov di, bx
   350                                  
   351                                  	push cs
   352                                  	pop ds
   353                                  	mov dx, init0_msg.error_stderr + 256
   354                                  	mov cx, init0_msg.error_stderr.length
   355                                  	mov bx, 2
   356                                  	mov ah, 40h
   357                                  	int 21h
   358                                  
   359                                  	test di, 8000h
   360                                  	jnz @F
   361                                  	mov dx, init0_msg.error_stdout + 256
   362                                  	mov cx, init0_msg.error_stdout.length
   363                                  	mov bx, 1
   364                                  	mov ah, 40h
   365                                  	int 21h
   366                                  @@:
   367                                  	mov ax, 4CFFh
   368                                  	int 21h
   369                                  %endif
   370                                  
   371                                  
   372                                  %if _DEVICE
   373                                  device_entrypoint:
   374                                  %if _TEST_PROGRAM
   375                                  @@:
   376                                  	int3
   377                                  	sti
   378                                  	hlt
   379                                  	jmp @B
   380                                  %endif
   381 00000065 26807F0200              	cmp byte [es:bx + 2], 0		; command code 0 (init) ?
   382 0000006A 7407                    	je @F
   383                                  
   384 0000006C 26C747030381            	mov word [es:bx + 3], 8103h	; error, done, code: unknown command
   385 00000072 CB                      	retf
   386                                  
   387                                  @@:
   388 00000073 2E830E[0000]FF          	or word [cs:device_header.next], -1
   389 00000079 0E                      	push cs
   390 0000007A 2EFF36[0600]            	push word [cs:device_header.strategy]
   391                                  					; -> far return to payload's strategy
   392 0000007F 55                      	push bp
   393 00000080 1E                      	push ds
   394 00000081 56                      	push si
   395 00000082 57                      	push di
   396 00000083 52                      	push dx
   397 00000084 51                      	push cx
   398 00000085 50                      	push ax
   399 00000086 53                      	push bx
   400 00000087 06                      	push es
   401                                  
   402 00000088 268B4710                	mov ax, word [es:bx + 14 + 2]
   403 0000008C 31D2                    	xor dx, dx
   404 0000008E B90400                  	mov cx, 4
   405                                  @@:
   406 00000091 D1E0                    	shl ax, 1
   407 00000093 D1D2                    	rcl dx, 1
   408 00000095 E2FA                    	loop @B
   409 00000097 2603470E                	add ax, word [es:bx + 14]
   410 0000009B 83D200                  	adc dx, 0		; dx:ax = linear address behind end
   411                                  
   412 0000009E B104                    	mov cl, 4
   413                                  @@:
   414 000000A0 D1EA                    	shr dx, 1
   415 000000A2 D1D8                    	rcr ax, 1
   416 000000A4 E2FA                    	loop @B			; ax => behind end
   417                                  
   418 000000A6 8CCF                    	mov di, cs
   419                                  image_size: equ  ( (init0_end - init0_start) 		+ (payload_end - payload) 		+ (init1_end - init1_start) 		)
   423 000000A8 81C7DD13                	add di, image_size >> 4		; di => end of image
   424                                  
   425 000000AC 39F8                    	cmp ax, di			; enough memory to hold all of us ?
   426 000000AE 7203E98A00              	jae .have_some_memory		; yes -->
   427                                  
   428 000000B3 0E                      	push cs
   429 000000B4 1F                      	pop ds
   430 000000B5 BA[F400]                	mov dx, .msg_no_memory
   431 000000B8 B409                    	mov ah, 09h
   432 000000BA CD21                    	int 21h
   433                                  
   434 000000BC B80030                  	mov ax, 3000h
   435 000000BF CD21                    	int 21h
   436 000000C1 3C05                    	cmp al, 5
   437 000000C3 7307                    	jae @F
   438 000000C5 BA[1301]                	mov dx, .msg_dos_below_5
   439 000000C8 B409                    	mov ah, 09h
   440 000000CA CD21                    	int 21h
   441                                  @@:
   442                                  
   443 000000CC BA[3A01]                	mov dx, .msg_linebreak
   444 000000CF B409                    	mov ah, 09h
   445 000000D1 CD21                    	int 21h
   446                                  
   447                                  		; tear down the stack frame and modify the request header
   448 000000D3 07                      	pop es
   449 000000D4 5B                      	pop bx
   450 000000D5 26C747030381            	mov word [es:bx + 3], 8103h	; set error, done, invalid command
   451 000000DB 26C6470D00              	mov byte [es:bx + 13], 0	; set number of units = 0
   452 000000E0 268C4F10                	mov word [es:bx + 14 + 2], cs
   453 000000E4 2683670E00              	and word [es:bx + 14], 0	; -> after end of memory to allocate
   454 000000E9 58                      	pop ax
   455 000000EA 59                      	pop cx
   456 000000EB 5A                      	pop dx
   457 000000EC 5F                      	pop di
   458 000000ED 5E                      	pop si
   459 000000EE 1F                      	pop ds
   460 000000EF 5D                      	pop bp
   461 000000F0 83C404                  	add sp, 4		; discard far return to payload's strategy
   462 000000F3 CB                      	retf			; return to DOS
   463                                  
   464 000000F4 4C6F6164206572726F-     .msg_no_memory:		ascic "Load error: Not enough memory."
   464 000000FD 723A204E6F7420656E-
   464 00000106 6F756768206D656D6F-
   464 0000010F 72792E24           
   465 00000113 204E6F74653A20444F-     .msg_dos_below_5:	ascic " Note: DOS must be at least version 5."
   465 0000011C 53206D757374206265-
   465 00000125 206174206C65617374-
   465 0000012E 2076657273696F6E20-
   465 00000137 352E24             
   466 0000013A 0D0A24                  .msg_linebreak:		ascic 13,10
   467                                  
   468                                  
   469                                  .have_some_memory:
   470 0000013D 89C2                    	mov dx, ax		; => after end of memory
   471 0000013F BB0200                  	mov bx, 2		; device mode
   472 00000142 50                      	push ax
   473 00000143 8CC8                    	mov ax, cs
   474 00000145 83C01D                  	add ax, (init0_end - init0_start) >> 4
   475 00000148 8CCE                    	mov si, cs		; => destination
   476 0000014A E903FF                  	jmp init0_common
   477                                  %endif
   478                                  
   479                                  
   480                                  		; Move paragraphs
   481                                  		;
   482                                  		; INP:	ax => source
   483                                  		;	dx => destination
   484                                  		;	cx = number of paragraphs
   485                                  		; CHG:	cx, ds, si, es, di
   486                                  		; OUT:	ax and dx unchanged
   487                                  		; Note:	Doesn't work correctly on HMA; doesn't always wrap to LMA either.
   488                                  		;	Do not provide a wrapped/HMA source or destination!
   489                                  init0_movp:
   490 0000014D 39D0                    	cmp ax, dx		; source above destination ?
   491 0000014F 770A                    	ja .up			; yes, move up (forwards) -->
   492 00000151 747B                    	je .return		; same, no need to move -->
   493 00000153 50                      	push ax
   494 00000154 01C8                    	add ax, cx		; (expected not to carry)
   495 00000156 39D0                    	cmp ax, dx		; end of source is above destination ?
   496 00000158 58                      	pop ax
   497 00000159 7730                    	ja .down		; yes, move from top down -->
   498                                  	; Here, the end of source is below-or-equal the destination,
   499                                  	;  so they do not overlap. In this case we prefer moving up.
   500                                  
   501                                  .up:
   502 0000015B 50                      	push ax
   503 0000015C 52                      	push dx
   504                                  .uploop:
   505 0000015D 8ED8                    	mov ds, ax
   506 0000015F 8EC2                    	mov es, dx
   507 00000161 31FF                    	xor di, di
   508 00000163 31F6                    	xor si, si		; -> start of segment
   509 00000165 81E90010                	sub cx, 1000h		; 64 KiB left ?
   510 00000169 7610                    	jbe .uplast		; no -->
   511 0000016B 51                      	push cx
   512 0000016C B90080                  	mov cx, 10000h /2
   513 0000016F F3A5                    	rep movsw		; move 64 KiB
   514 00000171 59                      	pop cx
   515 00000172 050010                  	add ax, 1000h
   516 00000175 81C20010                	add dx, 1000h		; -> next segment
   517 00000179 EBE2                    	jmp short .uploop	; proceed for more -->
   518                                  .uplast:
   519 0000017B 81C10010                	add cx, 1000h		; restore counter
   520 0000017F D1E1                    	shl cx, 1
   521 00000181 D1E1                    	shl cx, 1
   522 00000183 D1E1                    	shl cx, 1		; *8, paragraphs to words
   523 00000185 F3A5                    	rep movsw		; move last part
   524 00000187 5A                      	pop dx
   525 00000188 58                      	pop ax
   526 00000189 EB43                    	jmp short .return
   527                                  
   528                                  .down:
   529 0000018B FD                      	std			; _AMD_ERRATUM_109_WORKAROUND as below
   530                                  .dnloop:
   531 0000018C 81E90010                	sub cx, 1000h		; 64 KiB left ?
   532 00000190 761A                    	jbe .dnlast		; no -->
   533 00000192 50                      	push ax
   534 00000193 52                      	push dx
   535 00000194 01C8                    	add ax, cx
   536 00000196 01CA                    	add dx, cx
   537 00000198 8ED8                    	mov ds, ax		; -> 64 KiB not yet moved
   538 0000019A 8EC2                    	mov es, dx
   539 0000019C 5A                      	pop dx
   540 0000019D 58                      	pop ax
   541 0000019E BFFEFF                  	mov di, -2
   542 000001A1 89FE                    	mov si, di		; moved from last word down
   543 000001A3 51                      	push cx
   544 000001A4 B90080                  	mov cx, 10000h /2
   545 000001A7 F3A5                    	rep movsw		; move 64 KiB
   546 000001A9 59                      	pop cx
   547 000001AA EBE0                    	jmp short .dnloop	; proceed for more -->
   548                                  .dnlast:
   549 000001AC 81C10010                	add cx, 1000h		; restore counter
   550 000001B0 D1E1                    	shl cx, 1
   551 000001B2 D1E1                    	shl cx, 1
   552 000001B4 D1E1                    	shl cx, 1		; *8, paragraphs to words
   553 000001B6 89CF                    	mov di, cx
   554 000001B8 4F                      	dec di
   555 000001B9 D1E7                    	shl di, 1		; words to offset, -> last word
   556 000001BB 89FE                    	mov si, di
   557 000001BD 8ED8                    	mov ds, ax
   558 000001BF 8EC2                    	mov es, dx		; first segment correct
   559                                  
   560                                  
   561                                  	numdef AMD_ERRATUM_109_WORKAROUND, 1
   562                                  %if 0
   563                                  
   564                                  Jack R. Ellis pointed out this erratum:
   565                                  
   566                                  Quoting from https://www.amd.com/system/files/TechDocs/25759.pdf page 69:
   567                                  
   568                                  109   Certain Reverse REP MOVS May Produce Unpredictable Behavior
   569                                  
   570                                  Description
   571                                  
   572                                  In certain situations a REP MOVS instruction may lead to
   573                                  incorrect results. An incorrect address size, data size
   574                                  or source operand segment may be used or a succeeding
   575                                  instruction may be skipped. This may occur under the
   576                                  following conditions:
   577                                  
   578                                  * EFLAGS.DF=1 (the string is being moved in the reverse direction).
   579                                  
   580                                  * The number of items being moved (RCX) is between 1 and 20.
   581                                  
   582                                  * The REP MOVS instruction is preceded by some microcoded instruction
   583                                    that has not completely retired by the time the REP MOVS begins
   584                                    execution. The set of such instructions includes BOUND, CLI, LDS,
   585                                    LES, LFS, LGS, LSS, IDIV, and most microcoded x87 instructions.
   586                                  
   587                                  Potential Effect on System
   588                                  
   589                                  Incorrect results may be produced or the system may hang.
   590                                  
   591                                  Suggested Workaround
   592                                  
   593                                  Contact your AMD representative for information on a BIOS update.
   594                                  
   595                                  %endif
   596                                  
   597                                  %if _AMD_ERRATUM_109_WORKAROUND
   598 000001C1 E308                    	jcxz @FF
   599 000001C3 83F914                  	cmp cx, 20
   600 000001C6 7703                    	ja @FF
   601                                  @@:
   602 000001C8 A5                      	movsw
   603 000001C9 E2FD                    	loop @B
   604                                  @@:
   605                                  %endif
   606 000001CB F3A5                    	rep movsw		; move first part
   607 000001CD FC                      	cld
   608                                  .return:
   609 000001CE C3                      	retn
   610                                  
   611                                  
   612                                  	section PAYLOAD align=16 follows=INIT0
   613                                  payload:
   614 00000000 <bin 137C1h>            	incbin _PAYLOAD_FILE
   615                                  .end:
   616 000137C1 26<rep Fh>              	align 16, db 38
   617                                  payload_end:
   618                                  
   619                                  
   620                                  	section INIT1 align=16 follows=PAYLOAD vstart=0
   621                                  init1_start:
   622                                  		; INP:	ax = cs = INIT1
   623                                  		;	dx = cs - (payload_end - payload) >> 4 => source data
   624                                  		;	if kernel mode:
   625                                  		;	 ss:bp -> LOADDATA and LOADSTACKVARS
   626                                  		;	 ss:sp -> valid stack above [bp + ldLoadTop]
   627                                  		;	 60h => destination
   628                                  		;	any mode:
   629                                  		;	 word [ss:sp] = value for ax
   630                                  		;	 bx = 2 if device mode, 1 if EXE mode, 0 if kernel mode
   631                                  		;	 si => destination (60h for kernel mode,
   632                                  		;		after PSP for EXE mode,
   633                                  		;		at device header for device mode)
   634                                  		;		(not set if only kernel mode supported)
   635                                  		;	 if EXE mode:
   636                                  		;	  ss:sp -> valid stack above INIT1
   637                                  		;	  bp = unset
   638                                  		;	 if device mode:
   639                                  		;	  ss:sp -> device entrypoint stack
   640                                  		;	  holds: es, bx, ax, cx, dx, di, si, ds, bp,
   641                                  		;		  far address of payload strategy entrypoint,
   642                                  		;		  far return address to DOS
   643                                  		;	  bp = unset
   644                                  		; STT:	UP
   645                                  		; CHG:	ax, bx, cx, dx, es, ds, si, di
   646                                  %if _IMAGE_EXE || _DEVICE
   647                                  	lframe
   648 00000000 5589E5                  	lenter
   649                                  	lvar word,	exemode		; must be bp - 2!
   650 00000003 53                      	 push bx
   651                                   %if ?exemode != -2
   652                                    %error exemode variable must be directly below bp
   653                                   %endif
   654 00000004 56                      	push si
   655                                  %else
   656                                  	xor bx, bx		; always tell them it is kernel mode
   657                                  %endif
   658                                  
   659                                  %if _IMAGE_EXE
   660 00000005 8EC6                    	mov es, si		; es => destination
   661                                  %else
   662                                  	mov ax, 60h
   663                                  	mov es, ax		; es => destination
   664                                  %endif
   665 00000007 31FF                    	xor di, di		; -> destination
   666                                  
   667 00000009 8EDA                    	mov ds, dx
   668 0000000B 31F6                    	xor si, si		; -> source
   669                                  
   670 0000000D B9C137                  	mov cx, (payload.end - payload) & 0FFFFh
   671                                  %if (payload.end - payload) >> 16
   672 00000010 BA0100                  	mov dx, (payload.end - payload) >> 16	; = length of source
   673                                  %else
   674                                  	xor dx, dx
   675                                  %endif
   676                                  %if _PAYLOAD_KERNEL_MAX_PARAS
   677                                  	mov ax, _PAYLOAD_KERNEL_MAX_PARAS
   678                                  	test bx, bx
   679                                  	jz @F
   680                                  %endif
   681 00000013 B8FFFF                  	mov ax, -1
   682                                  @@:
   683                                  		; INP:	ds:si -> source
   684                                  		;	dx:cx = length of source
   685                                  		;	es:di -> destination (below source)
   686                                  		;	bx = EXE mode flag
   687                                  		;	 (1 if EXE mode, 0 if kernel mode)
   688                                  		;	 (always 0 if this is a build without EXE mode)
   689                                  		;	if _PAYLOAD_KERNEL_MAX_PARAS:
   690                                  		;	 ax = maximum amount in paragraphs of destination needed
   691                                  		;	 (-1 if full source should be decompressed)
   692                                  		;	else:
   693                                  		;	 ax = -1
   694                                  		; Note:	The destination reaches up to below the source.
   695 00000016 E80201                  	call depack
   696                                  %ifn _TEST_PROGRAM
   697 00000019 7234                    	jc strict short error
   698                                  %endif
   699                                  %if _IMAGE_EXE
   700 0000001B 5E                      	pop si			; si
   701                                   %if _TEST_PROGRAM
   702                                  	pop ax			; (discard ?exemode, leave bx as returned)
   703                                   %else
   704 0000001C 5B                      	pop bx			; ?exemode
   705                                   %endif
   706 0000001D 5D                      	pop bp			; bp
   707 0000001E 58                      	pop ax			; ax
   708                                  	lleave ctx
   709                                  %endif
   710                                  %if _TEST_PROGRAM
   711                                  	retf
   712                                  	nop
   713                                  %endif
   714                                  
   715                                  %if _DEVICE
   716 0000001F F6C302                  	test bl, 2
   717 00000022 7411                    	jz .jmp_exe_or_kernel_mode
   718                                  
   719                                  .jmp_device_mode:
   720 00000024 8EDE                    	mov ds, si
   721 00000026 830E[0000]FF            	or word [device_header.next], -1
   722 0000002B 07                      	pop es
   723 0000002C 5B                      	pop bx
   724 0000002D 58                      	pop ax
   725 0000002E 59                      	pop cx
   726 0000002F 5A                      	pop dx
   727 00000030 5F                      	pop di
   728 00000031 5E                      	pop si
   729 00000032 1F                      	pop ds
   730 00000033 5D                      	pop bp
   731 00000034 CB                      	retf			; transfer to payload strategy entrypoint
   732                                  				; still on stack: far return address to DOS
   733                                  
   734                                  .jmp_exe_or_kernel_mode:
   735                                  %endif
   736                                  
   737                                  %if _IMAGE_EXE
   738 00000035 F6C301                  	test bl, 1
   739 00000038 7410                    	jz .jmp_kernel_mode
   740                                  
   741                                  .jmp_exe_mode:
   742                                  %if ! _IMAGE_EXE_AUTO_STACK
   743                                  	mov cx, cs
   744                                  	lea dx, [si + _IMAGE_EXE_SS]
   745                                  	push dx			; stack = relocated ss value
   746                                  	add dx, (_IMAGE_EXE_SP + 2 + 15) >> 4
   747                                  	cmp cx, dx		; INIT1 code is above intended stack ?
   748                                  	jae @F			; yes -->
   749                                  
   750                                  	lframe
   751                                  	lenter
   752                                  	lvar	word, exemode
   753                                  	 push bx
   754                                   %if ?exemode != -2
   755                                    %error exemode variable must be directly below bp
   756                                   %endif
   757                                  	mov bx, -1		; unimplemented, return error
   758                                  	jmp error
   759                                  	lleave ctx
   760                                  @@:
   761                                  	cli
   762                                  	pop ss			; = relocated ss value
   763                                  	mov sp, (_IMAGE_EXE_SP + 2) & 0FFFFh	; change stack
   764                                  	sti
   765                                  %endif
   766                                  
   767 0000003A 31C9                    	xor cx, cx
   768 0000003C 51                      	push cx			; put zero on top of stack
   769                                  
   770                                  %if _IMAGE_EXE_IP < 256
   771                                  	mov cl, _IMAGE_EXE_IP
   772                                  %elif (_IMAGE_EXE_IP & 255) == 0
   773                                  	mov ch, _IMAGE_EXE_IP >> 8
   774                                  %else
   775 0000003D B94001                  	mov cx, _IMAGE_EXE_IP
   776                                  %endif
   777                                  
   778                                  %if _IMAGE_EXE_CS == -16
   779 00000040 83C6F0                  	add si, -16
   780 00000043 8EDE                    	mov ds, si
   781 00000045 8EC6                    	mov es, si
   782                                  %else
   783                                  	lea dx, [si - 10h]	; => PSP
   784                                  	mov ds, dx
   785                                  	mov es, dx		; ds = es => PSP
   786                                  	add si, _IMAGE_EXE_CS	; = relocated cs value
   787                                  %endif
   788 00000047 56                      	push si
   789 00000048 51                      	push cx
   790 00000049 CB                      	retf			; jump to EXE mode of image
   791                                  
   792                                  %endif
   793                                  .jmp_kernel_mode:
   794 0000004A EA20006000              	jmp 60h + _EXEC_SEGMENT:_EXEC_OFFSET
   795                                  
   796                                  
   797                                  error:
   798 0000004F 0E                      	push cs
   799 00000050 1F                      	pop ds
   800                                  %if _DEBUG0
   801                                  	mov si, msg.error_begin
   802                                  	call disp_error
   803                                  	xchg ax, bx			; ax = error code
   804                                  	call disp_ax_hex
   805                                  	mov si, msg.error_end
   806                                  %else
   807 00000051 BE[F600]                	mov si, msg.error
   808                                  %endif
   809 00000054 E87D00                  	call disp_error
   810                                  
   811                                  %if _DEVICE
   812 00000057 F646FE02                	test byte [bp - 2], 2
   813 0000005B 7435                    	jz .exit_app_or_kernel
   814                                  
   815 0000005D 5E                      	pop si				; => device segment
   816 0000005E 5B                      	pop bx				; mode word
   817 0000005F 5D                      	pop bp
   818 00000060 58                      	pop ax
   819 00000061 8EC6                    	mov es, si
   820 00000063 31FF                    	xor di, di			; -> device header
   821 00000065 0E                      	 push cs
   822 00000066 1F                      	 pop ds
   823 00000067 BE[B000]                	mov si, device_header_copy	; -> to reset header
   824 0000006A B91100                  	mov cx, words(device_header_copy.length)
   825 0000006D F3A5                    	rep movsw		; overwrite device header with default
   826                                  				;  (reset to a valid state after unsuccessful
   827                                  				;  decompression, which may have partially
   828                                  				;  written the header already)
   829 0000006F 06                      	 push es
   830 00000070 1F                      	 pop ds				; -> device segment
   831 00000071 07                      	pop es
   832 00000072 5B                      	pop bx
   833 00000073 26C747030381            	mov word [es:bx + 3], 8103h	; set error, done, invalid command
   834 00000079 26C6470D00              	mov byte [es:bx + 13], 0	; set number of units = 0
   835 0000007E 268C5F10                	mov word [es:bx + 14 + 2], ds
   836 00000082 2683670E00              	and word [es:bx + 14], 0	; -> after end of memory to allocate
   837 00000087 58                      	pop ax
   838 00000088 59                      	pop cx
   839 00000089 5A                      	pop dx
   840 0000008A 5F                      	pop di
   841 0000008B 5E                      	pop si
   842 0000008C 1F                      	pop ds
   843 0000008D 5D                      	pop bp
   844 0000008E 83C404                  	add sp, 4		; discard far return to payload's strategy
   845 00000091 CB                      	retf			; return to DOS
   846                                  
   847                                  
   848                                  .exit_app_or_kernel:
   849                                  %endif
   850                                  
   851                                  %if _IMAGE_EXE
   852 00000092 F646FE01                	test byte [bp - 2], 1
   853 00000096 7405                    	jz .exit_kernel_mode
   854                                  
   855 00000098 B87F4C                  	mov ax, 4C7Fh
   856 0000009B CD21                    	int 21h
   857                                  
   858                                  .exit_kernel_mode:
   859                                  %endif
   860 0000009D 31C0                    	xor ax, ax
   861 0000009F CD16                    	int 16h
   862 000000A1 CD19                    	int 19h
   863                                  
   864                                  
   865                                  %if _DEVICE
   866 000000A3 90<rep Dh>              	align 16
   867                                  device_header_copy:
   868                                  .:
   869                                  .next:
   870 000000B0 FFFFFFFF                	dd -1				; already initialised
   871                                  .attributes:
   872 000000B4 0080                    	dw _DEVICE_ATTRIBUTE
   873                                  .strategy:
   874 000000B6 1200                    	dw .strategy_entry - .		; -> strategy entry
   875                                  .interrupt:
   876 000000B8 1600                    	dw .interrupt_entry - .		; -> interrupt entry
   877                                  .name:
   878 000000BA 4C44454255472424        	fill 8, 32, db _DEVICE_NAME
   879                                  .strategy_entry:
   880 000000C2 EB0690<rep 2h>          	fill 4, 90h, jmp .set_error	; rel8 or rel16 jump, not minus .
   881                                  .interrupt_entry:
   882 000000C6 CB90<rep 3h>            	fill 4, 90h, retf
   883                                  
   884                                  .set_error:
   885 000000CA 26C747030381            	mov word [es:bx + 3], 8103h	; set error, done, invalid command
   886 000000D0 CB                      	retf
   887                                  .length: equ $ - .
   888                                  %endif
   889                                  
   890                                  
   891                                  disp_error.loop:
   892 000000D1 E80600                  	call disp_al
   893                                  disp_error:
   894 000000D4 AC                      	lodsb
   895 000000D5 84C0                    	test al, al
   896 000000D7 75F8                    	jnz .loop
   897 000000D9 C3                      	retn
   898                                  
   899                                  %if _DEBUG0 || _DEBUG1 || _DEBUG2 || _DEBUG3
   900                                  disp_ax_hex:			; ax
   901                                  		xchg al,ah
   902                                  		call disp_al_hex		; display former ah
   903                                  		xchg al,ah			;  and fall trough for al
   904                                  disp_al_hex:			; al
   905                                  		push cx
   906                                  		mov cl,4
   907                                  		ror al,cl
   908                                  		call disp_al_lownibble_hex	; display former high-nibble
   909                                  		rol al,cl
   910                                  		pop cx
   911                                  						;  and fall trough for low-nibble
   912                                  disp_al_lownibble_hex:
   913                                  		push ax			 ; save ax for call return
   914                                  		and al,00001111b		; high nibble must be zero
   915                                  		add al,'0'			; if number is 0-9, now it's the correct character
   916                                  		cmp al,'9'
   917                                  		jna .decimalnum		 ; if we get decimal number with this, ok -->
   918                                  		add al,7			;  otherwise, add 7 and we are inside our alphabet
   919                                   .decimalnum:
   920                                  		call disp_al
   921                                  		pop ax
   922                                  		retn
   923                                  %endif
   924                                  
   925                                  disp_al:
   926                                  %if _TEST_PROGRAM
   927                                  	retn
   928                                  %else
   929 000000DA 50                      	push ax
   930                                  %endif
   931 000000DB 53                      	push bx
   932 000000DC 55                      	push bp
   933 000000DD B40E                    	mov ah, 0Eh
   934 000000DF BB0700                  	mov bx, 7
   935                                  %if _IMAGE_EXE || _DEVICE
   936 000000E2 52                      	push dx
   937                                  
   938 000000E3 F646FE03                	test byte [bp - 2], 1 | 2
   939 000000E7 7406                    	jz .display_kernel_mode
   940                                  
   941 000000E9 92                      	xchg dx, ax				; dl = input al
   942 000000EA B402                    	mov ah, 02h
   943 000000EC CD21                    	int 21h
   944 000000EE A9                      	db __TEST_IMM16				; (skip int)
   945                                  
   946                                  .display_kernel_mode:
   947                                  %endif
   948 000000EF CD10                    	int 10h
   949                                  %if _IMAGE_EXE
   950 000000F1 5A                      	pop dx
   951                                  %endif
   952 000000F2 5D                      	pop bp
   953 000000F3 5B                      	pop bx
   954 000000F4 58                      	pop ax
   955                                  disp_error.ret:
   956 000000F5 C3                      	retn
   957                                  
   958                                  
   959                                  msg:
   960                                  %if _DEBUG0
   961                                  .error_begin:	db "Load error: Decompression failure, code ",0
   962                                  .error_end:	db "h.",13,10,0
   963                                  %else
   964 000000F6 4C6F6164206572726F-     .error:		db "Load error: Decompression failure.",13,10,0
   964 000000FF 723A204465636F6D70-
   964 00000108 72657373696F6E2066-
   964 00000111 61696C7572652E0D0A-
   964 0000011A 00                 
   965                                  %endif
   966                                  
   967                                  
   968                                  %assign NEED_NORMALISE_POINTER_WITH_DISPLACEMENT 1
   969                                  %assign CHECK_POINTERS_VARIABLE_SRC 1
   970                                  %assign CHECK_POINTERS_VARIABLE_DST 1
   971                                  
   972                                  		; Specific depacker's file is included within label msg.
   973                                  		; In the file, lframe is used and lleave ctx is not used.
   974                                  
   975                                  %if _BRIEFLZ
   976                                  	%include "brieflz.asm"
   977                                  %endif
   978                                  
   979                                  
   980                                  %if _LZ4
   981                                  	%include "lz4.asm"
     1                              <1> 
     2                              <1> %if 0
     3                              <1> 
     4                              <1> 8086 Assembly lDOS iniload payload LZ4 depacker
     5                              <1>  by C. Masloch, 2018
     6                              <1> 
     7                              <1> Usage of the works is permitted provided that this
     8                              <1> instrument is retained with the works, so that any entity
     9                              <1> that uses the works is notified of this instrument.
    10                              <1> 
    11                              <1> DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
    12                              <1> 
    13                              <1> %endif
    14                              <1> 
    15                              <1> 
    16                              <1> lz4_flg_version_mask:	equ 1100_0000b
    17                              <1> lz4_flg_version:	equ 0100_0000b
    18                              <1> lz4_flg_b_indep:	equ 0010_0000b
    19                              <1> lz4_flg_b_checksum:	equ 0001_0000b
    20                              <1> lz4_flg_c_size:		equ 0000_1000b
    21                              <1> lz4_flg_c_checksum:	equ 0000_0100b
    22                              <1> lz4_flg_reserved:	equ 0000_0010b
    23                              <1> lz4_flg_dict_id:	equ 0000_0001b
    24                              <1> 
    25                              <1> lz4_bd_reserved_mask:	equ 1000_1111b
    26                              <1> 		; BD block max size is not used by us
    27                              <1> 
    28                              <1> 
    29                              <1> 		; INP:	ds:si -> source
    30                              <1> 		;	dx:cx = length of source
    31                              <1> 		;	es:di -> destination (below source)
    32                              <1> 		;	if _IMAGE_EXE:
    33                              <1> 		;	 bx = EXE mode flag (bit 0)
    34                              <1> 		;	else:
    35                              <1> 		;	 bx = 0
    36                              <1> 		;	if _PAYLOAD_KERNEL_MAX_PARAS:
    37                              <1> 		;	 ax = maximum amount in paragraphs of destination needed
    38                              <1> 		;	 (-1 if full source should be decompressed)
    39                              <1> 		;	else:
    40                              <1> 		;	 ax = -1
    41                              <1> 		; OUT:	NC if success
    42                              <1> 		;	CY if error,
    43                              <1> 		;	 bx = ?errordata (if _DEBUG0)
    44                              <1> 		; CHG:	ax, (bx), cx, dx, es, ds, si, di
    45                              <1> 		; STT:	UP
    46                              <1> 		;
    47                              <1> 		; Note:	The destination reaches up to below the source.
    48                              <1> 		; Note:	The input pointers need not be normalised yet.
    49                              <1> 		;	 Normalised means that the offset part is below 16.
    50                              <1> depack:
    51                              <1> 	lframe near
    52                              <1> %if _IMAGE_EXE || _DEBUG0 || _COUNTER
    53 0000011B 5589E5              <1> 	lenter early
    54                              <1>  %if _IMAGE_EXE
    55                              <1> 	lvar word,	exemode	; must be bp - 2!
    56 0000011E 53                  <1> 	 push bx
    57                              <1>   %if ?exemode != -2
    58                              <1>    %error exemode variable must be directly below bp
    59                              <1>   %endif
    60                              <1>  %endif
    61                              <1>  %if _DEBUG0 || _COUNTER
    62                              <1> 	xor bx, bx
    63                              <1>  %endif
    64                              <1>  %if _DEBUG0
    65                              <1> 	lvar word,	errordata
    66                              <1> 	 push bx
    67                              <1>  %endif
    68                              <1> %endif
    69                              <1> 	lvar word,	token_and_counter
    70                              <1> 	lequ ?token_and_counter, token
    71                              <1> 	lequ ?token_and_counter + 1, counter
    72                              <1> %if _COUNTER
    73                              <1> 	 push bx		; initialise counter (high byte) to zero
    74                              <1> %endif
    75                              <1> 	lvar dword,	src_behind_block
    76                              <1> 	lvar word,	frame_descriptor_flg_and_bd
    77 0000011F 8D66F6              <1> 	lenter
    78                              <1> 
    79 00000122 E88602              <1> 	call normalise_both_pointers
    80                              <1> 
    81                              <1> 	lvar dword,	src
    82 00000125 1E                  <1> 	 push ds
    83 00000126 56                  <1> 	 push si
    84                              <1> 	lvar dword,	original_dst
    85 00000127 06                  <1> 	 push es
    86 00000128 57                  <1> 	 push di
    87                              <1> 	lvar dword,	dst
    88 00000129 06                  <1> 	 push es
    89 0000012A 57                  <1> 	 push di
    90                              <1> 	lvar dword,	length_of_source
    91 0000012B 52                  <1> 	 push dx
    92 0000012C 51                  <1> 	 push cx
    93                              <1> 
    94                              <1> %if _PAYLOAD_KERNEL_MAX_PARAS
    95                              <1> 	cmp ax, -1		; no maximum specified ?
    96                              <1> 	je @FF			; retain -1 in ax -->
    97                              <1> 	test di, di		; do we need an additional paragraph ?
    98                              <1> 	jz @F			; no -->
    99                              <1> 	inc ax			; es + ax => paragraph after necessary part
   100                              <1> @@:
   101                              <1> 	mov dx, es
   102                              <1> 	add ax, dx		; => paragraph after necessary part
   103                              <1> 		; If the normalised destination pointer's segment grows
   104                              <1> 		;  to this segment then enough has been decompressed.
   105                              <1> d0	mov byte [bp + ?errordata], 40h
   106                              <1> 	jc .error		; should not carry
   107                              <1> @@:
   108                              <1> 	lvar word,	dst_max_segment
   109                              <1> 	 push ax
   110                              <1> %endif
   111                              <1> 
   112 0000012D 1E                  <1> 	 push ds
   113 0000012E 56                  <1> 	 push si
   114 0000012F E8D902              <1> 	call pointer_to_linear
   115                              <1> 
   116 00000132 89D3                <1> 	mov bx, dx
   117 00000134 91                  <1> 	xchg cx, ax		; bx:cx = source linear
   118                              <1> 
   119 00000135 06                  <1> 	 push es
   120 00000136 57                  <1> 	 push di
   121 00000137 E8D102              <1> 	call pointer_to_linear
   122                              <1> 
   123                              <1> %if _ALLOW_OVERLAPPING
   124 0000013A 034EE6              <1> 	add cx, word [bp + ?length_of_source]
   125 0000013D 135EE8              <1> 	adc bx, word [bp + ?length_of_source + 2]
   126                              <1> 		; In case of allowing overlapping source and destination,
   127                              <1> 		;  the ?length_of_destination variable is set to
   128                              <1> 		;  ?src + ?length_of_source - ?dst, allowing to write to
   129                              <1> 		;  all of the source buffer (with the checks already in place
   130                              <1> 		;  from the default handling). Additional checks are done by
   131                              <1> 		;  calling check_pointers_not_overlapping. This is done after
   132                              <1> 		;  every change of ?dst to verify that the write pointer stays
   133                              <1> 		;  below-or-equal the read pointer.
   134                              <1> 		; This means the remaining source data may be corrupted by a
   135                              <1> 		;  write, but nothing after the source data is written to,
   136                              <1> 		;  so the error handling (in INIT1 after the data) still works.
   137                              <1> %endif
   138                              <1> 
   139 00000140 29C1                <1> 	sub cx, ax
   140 00000142 19D3                <1> 	sbb bx, dx		; bx:cx = source linear - destination linear
   141                              <1> 
   142                              <1> 	lvar dword,	length_of_destination
   143 00000144 53                  <1> 	 push bx		; push into [bp + ?length_of_destination + 2]
   144 00000145 51                  <1> 	 push cx		; push into [bp + ?length_of_destination]
   145                              <1> 
   146                              <1> %if _ALLOW_OVERLAPPING
   147 00000146 E84602              <1> 	call check_pointers_not_overlapping
   148                              <1> 		; Note:	We initially check here that the write pointer is
   149                              <1> 		;	 low enough, ie below-or-equal the read pointer.
   150                              <1> 		;	 Doing this check here (as well as after any
   151                              <1> 		;	 copied match) allows us to drop the check done
   152                              <1> 		;	 after moving literal bytes.
   153                              <1> d0	mov byte [bp + ?errordata], 1Bh
   154 00000149 720D                <1> 	jc .error
   155                              <1> %endif
   156                              <1> 
   157                              <1> .loop_frame:
   158 0000014B 31C9                <1> 	xor cx, cx
   159 0000014D 394EE8              <1> 	cmp word [bp + ?length_of_source + 2], cx
   160 00000150 750B                <1> 	jne @F
   161 00000152 394EE6              <1> 	cmp word [bp + ?length_of_source], cx
   162 00000155 7506                <1> 	jne @F
   163                              <1> 
   164                              <1> .end:
   165 00000157 A8                  <1> 	db __TEST_IMM8			; (NC)
   166                              <1> .error:
   167 00000158 F9                  <1> 	stc
   168                              <1> 
   169                              <1> %if _COUNTER
   170                              <1> 	lahf
   171                              <1> 	mov al, 13
   172                              <1> 	call disp_al
   173                              <1> 	mov al, 10
   174                              <1> 	call disp_al
   175                              <1> 	sahf
   176                              <1> %endif
   177                              <1> d0	mov bx, word [bp + ?errordata]
   178 00000159 89EC5D              <1> 	lleave code
   179 0000015C C3                  <1> 	lret
   180                              <1> 
   181                              <1> 
   182                              <1> @@:
   183 0000015D B104                <1> 	mov cl, 4
   184 0000015F E80A02              <1> 	call read_le_data_src
   185                              <1> d0	mov byte [bp + ?errordata], 1
   186 00000162 72F4                <1> 	jc .error
   187                              <1> 
   188 00000164 81FA4D18            <1> 	cmp dx, 184Dh			; signature match ?
   189                              <1> d0	mov byte [bp + ?errordata], 2
   190 00000168 75EE                <1> 	jne .error			; no -->
   191 0000016A 3D0422              <1> 	cmp ax, 2204h			; usual frame ?
   192 0000016D 7427                <1> 	je @F				; yes -->
   193                              <1> 
   194 0000016F 24F0                <1> 	and al,  ~0Fh
   195 00000171 3D502A              <1> 	cmp ax, 2A50h			; skippable frame ?
   196                              <1> d0	mov byte [bp + ?errordata], 3
   197 00000174 75E2                <1> 	jne .error			; no -->
   198                              <1> 
   199                              <1> 		; cx = 4 still here
   200 00000176 E8F301              <1> 	call read_le_data_src		; read length of skippable frame
   201                              <1> d0	mov byte [bp + ?errordata], 4
   202 00000179 72DD                <1> 	jc .error
   203                              <1> 
   204 0000017B 1E                  <1> 	 push ds
   205 0000017C 56                  <1> 	 push si
   206 0000017D 89C1                <1> 	mov cx, ax
   207 0000017F 89D3                <1> 	mov bx, dx			; displacement = skippable frame length
   208 00000181 E85802              <1> 	call normalise_pointer_with_displacement_bxcx
   209 00000184 8F46F2              <1> 	 pop word [bp + ?src]
   210 00000187 8F46F4              <1> 	 pop word [bp + ?src + 2]	; ?src += length
   211                              <1> d0	mov byte [bp + ?errordata], 1Dh
   212 0000018A 72CC                <1> 	jc .error
   213                              <1> 
   214 0000018C 2946E6              <1> 	sub word [bp + ?length_of_source], ax
   215 0000018F 1956E8              <1> 	sbb word [bp + ?length_of_source + 2], dx
   216                              <1> 					; ?length_of_source -= length
   217                              <1> d0	mov byte [bp + ?errordata], 5
   218 00000192 72C4                <1> 	jc .error
   219 00000194 EBB5                <1> 	jmp .loop_frame
   220                              <1> 
   221                              <1> 
   222                              <1> @@:
   223 00000196 B102                <1> 	mov cl, 2
   224 00000198 E8D101              <1> 	call read_le_data_src		; read FLG (low byte), BD (high byte)
   225                              <1> d0	mov byte [bp + ?errordata], 6
   226                              <1> .error_CY_1:
   227 0000019B 72BB                <1> 	jc .error
   228                              <1> 
   229 0000019D 8946F6              <1> 	mov word [bp + ?frame_descriptor_flg_and_bd], ax
   230 000001A0 89C3                <1> 	mov bx, ax
   231 000001A2 80E3C0              <1> 	and bl, lz4_flg_version_mask
   232 000001A5 80FB40              <1> 	cmp bl, lz4_flg_version		; version correct ?
   233                              <1> d0	mov byte [bp + ?errordata], 7
   234                              <1> .error_NZ_1:
   235 000001A8 75AE                <1> 	jne .error			; no -->
   236                              <1> 
   237 000001AA A9038F              <1> 	test ax, (lz4_bd_reserved_mask << 8) 		 | lz4_flg_reserved | lz4_flg_dict_id	; unsupported bits set?
   239                              <1> d0	mov byte [bp + ?errordata], 8
   240 000001AD 75F9                <1> 	jnz .error_NZ_1			; yes -->
   241                              <1> 
   242                              <1> 		; not checked: lz4_flg_b_indep (linked is always supported),
   243                              <1> 		;  lz4_flg_b_checksum, lz4_flg_c_checksum (both checked later)
   244                              <1> 
   245 000001AF A808                <1> 	test al, lz4_flg_c_size		; content size field present ?
   246 000001B1 7407                <1> 	jz @F				; no -->
   247 000001B3 B108                <1> 	mov cl, 8
   248 000001B5 E8B401              <1> 	call read_le_data_src		; (skip content size field)
   249                              <1> d0	mov byte [bp + ?errordata], 9
   250 000001B8 72E1                <1> 	jc .error_CY_1
   251                              <1> @@:
   252 000001BA B101                <1> 	mov cl, 1
   253 000001BC E8AD01              <1> 	call read_le_data_src		; (skip header checksum field)
   254                              <1> d0	mov byte [bp + ?errordata], 0Ah
   255 000001BF 72DA                <1> 	jc .error_CY_1
   256                              <1> 
   257                              <1> .loop_block:
   258                              <1> %if _COUNTER
   259                              <1> 	mov al, '#'
   260                              <1> 	call disp_al
   261                              <1> %endif
   262 000001C1 B90400              <1> 	mov cx, 4
   263 000001C4 E8A501              <1> 	call read_le_data_src		; read block size field
   264                              <1> 					; leaves ds:si -> source
   265                              <1> d0	mov byte [bp + ?errordata], 0Bh
   266 000001C7 72D2                <1> 	jc .error_CY_1
   267                              <1> 
   268 000001C9 85D2                <1> 	test dx, dx			; nonzero ?
   269 000001CB 7512                <1> 	jnz @FF
   270 000001CD 85C0                <1> 	test ax, ax
   271 000001CF 750E                <1> 	jnz @FF				; yes -->
   272                              <1> 
   273 000001D1 F646F604            <1> 	test byte [bp + ?frame_descriptor_flg_and_bd], lz4_flg_c_checksum
   274 000001D5 7405                <1> 	jz @F
   275                              <1> 		; cx = 4 already
   276 000001D7 E89201              <1> 	call read_le_data_src		; (skip c checksum field)
   277                              <1> d0	mov byte [bp + ?errordata], 0Ch
   278                              <1> .error_CY_2:
   279 000001DA 72BF                <1> 	jc .error_CY_1
   280                              <1> @@:
   281 000001DC E96CFF              <1> 	jmp .loop_frame			; next frame, if any -->
   282                              <1> 
   283                              <1> 
   284                              <1> @@:
   285 000001DF 1E                  <1> 	 push ds
   286 000001E0 56                  <1> 	 push si			; -> source
   287 000001E1 89D3                <1> 	mov bx, dx
   288 000001E3 80E77F              <1> 	and bh, ~80h			; clear "uncompressed" flag
   289 000001E6 89C1                <1> 	mov cx, ax			; bx:cx = block size
   290 000001E8 E8F101              <1> 	call normalise_pointer_with_displacement_bxcx
   291                              <1> 					; -> source after block
   292 000001EB 8F46F8              <1> 	 pop word [bp + ?src_behind_block]
   293 000001EE 8F46FA              <1> 	 pop word [bp + ?src_behind_block + 2]
   294                              <1> d0	mov byte [bp + ?errordata], 1Eh
   295 000001F1 7303E962FF          <1> 	jc .error
   296 000001F6 F6C680              <1> 	test dh, 80h			; is it uncompressed ?
   297 000001F9 7448                <1> 	jz .compressed			; no -->
   298                              <1> 
   299                              <1> .uncompressed:
   300 000001FB 87DA                <1> 	xchg bx, dx			; get size without "uncompressed" flag
   301 000001FD E8EB00              <1> 	call lz4_copy_literal_or_uncompressed
   302                              <1> d0	mov byte [bp + ?errordata], 0Dh
   303 00000200 72D8                <1> 	jc .error_CY_2
   304                              <1> 
   305                              <1> .end_block:
   306 00000202 FF76FA              <1> 	 push word [bp + ?src_behind_block + 2]
   307 00000205 FF76F8              <1> 	 push word [bp + ?src_behind_block]
   308 00000208 E80002              <1> 	call pointer_to_linear
   309 0000020B 89C1                <1> 	mov cx, ax
   310 0000020D 89D3                <1> 	mov bx, dx			; bx:cx = linear ?src_behind_block
   311                              <1> 
   312 0000020F FF76F4              <1> 	 push word [bp + ?src + 2]
   313 00000212 FF76F2              <1> 	 push word [bp + ?src]
   314 00000215 E8F301              <1> 	call pointer_to_linear		; dx:ax = linear ?src
   315                              <1> 
   316 00000218 29C1                <1> 	sub cx, ax
   317 0000021A 19D3                <1> 	sbb bx, dx			; ?src_behind_block - ?src
   318                              <1> 					;  = amount to skip
   319                              <1> d0	mov byte [bp + ?errordata], 0Fh
   320 0000021C 72BC                <1> 	jc .error_CY_2
   321                              <1> 
   322 0000021E 294EE6              <1> 	sub word [bp + ?length_of_source], cx
   323 00000221 195EE8              <1> 	sbb word [bp + ?length_of_source + 2], bx
   324                              <1> d0	mov byte [bp + ?errordata], 10h
   325                              <1> .error_CY_3:
   326 00000224 72B4                <1> 	jc .error_CY_2			; not enough data to skip -->
   327                              <1> 
   328 00000226 FF76FA              <1> 	push word [bp + ?src_behind_block + 2]
   329 00000229 FF76F8              <1> 	push word [bp + ?src_behind_block]
   330 0000022C 8F46F2              <1> 	pop word [bp + ?src]
   331 0000022F 8F46F4              <1> 	pop word [bp + ?src + 2]	; set ?src -> behind block
   332                              <1> 
   333 00000232 F646F610            <1> 	test byte [bp + ?frame_descriptor_flg_and_bd], lz4_flg_b_checksum
   334 00000236 7408                <1> 	jz @F				; no block checksum -->
   335 00000238 B90400              <1> 	mov cx, 4
   336 0000023B E82E01              <1> 	call read_le_data_src		; (skip block checksum field)
   337                              <1> d0	mov byte [bp + ?errordata], 0Eh
   338 0000023E 72E4                <1> 	jc .error_CY_3
   339                              <1> @@:
   340                              <1> 
   341 00000240 E97EFF              <1> 	jmp .loop_block
   342                              <1> 
   343                              <1> 
   344                              <1> .compressed:
   345                              <1> .loop_sequence:
   346                              <1> 
   347                              <1> %if _COUNTER
   348                              <1> 	inc byte [bp + ?counter]
   349                              <1> 	test byte [bp + ?counter], _COUNTER - 1
   350                              <1> 	jnz @F
   351                              <1> 	mov al, '.'
   352                              <1> 	call disp_al
   353                              <1> @@:
   354                              <1> %endif
   355                              <1> 
   356 00000243 BB[BE02]            <1> 	mov bx, .lodsb
   357 00000246 E8EB00              <1> 	call lz4_func_bx_with_src	; load token
   358                              <1> d0	mov byte [bp + ?errordata], 11h
   359 00000249 72D9                <1> 	jc .error_CY_3
   360 0000024B 8846FC              <1> 	mov byte [bp + ?token], al
   361                              <1> 
   362 0000024E B104                <1> 	mov cl, 4
   363 00000250 D2E8                <1> 	shr al, cl
   364 00000252 E8F000              <1> 	call lz4_get_length		; dx:cx = length of literals
   365                              <1> d0	mov byte [bp + ?errordata], 12h
   366 00000255 72CD                <1> 	jc .error_CY_3
   367                              <1> 
   368 00000257 89C8                <1> 	mov ax, cx			; dx:ax = length of literals (may be 0)
   369 00000259 E88F00              <1> 	call lz4_copy_literal_or_uncompressed
   370                              <1> 					; copy over the literals
   371                              <1> d0	mov byte [bp + ?errordata], 13h
   372 0000025C 72C6                <1> 	jc .error_CY_3
   373                              <1> 
   374 0000025E E87500              <1> 	call lz4_check_behind_block_higher_than_src
   375                              <1> 					; do we have more data in this block ?
   376 00000261 7258                <1> 	jc .end_sequence		; no -->
   377                              <1> 
   378 00000263 BB[CA02]            <1> 	mov bx, .lodsw
   379 00000266 E8CB00              <1> 	call lz4_func_bx_with_src	; load match offset
   380                              <1> d0	mov byte [bp + ?errordata], 14h
   381                              <1> .error_CY_4:
   382 00000269 72B9                <1> 	jc .error_CY_3
   383                              <1> 
   384 0000026B 85C0                <1> 	test ax, ax			; offset is 0 ?
   385                              <1> d0	mov byte [bp + ?errordata], 15h
   386 0000026D F9                  <1> 	stc
   387 0000026E 74F9                <1> 	jz .error_CY_4			; yes, error -->
   388                              <1> 
   389 00000270 89C1                <1> 	mov cx, ax
   390 00000272 F7D9                <1> 	neg cx				; -1 .. -65535
   391 00000274 BBFFFF              <1> 	mov bx, -1			; sign-extend (always negative sense)
   392                              <1> 
   393 00000277 FF76EC              <1> 	 push word [bp + ?dst + 2]
   394 0000027A FF76EA              <1> 	 push word [bp + ?dst]
   395 0000027D E85C01              <1> 	call normalise_pointer_with_displacement_bxcx
   396 00000280 5E                  <1> 	 pop si
   397 00000281 1F                  <1> 	 pop ds				; ds:si -> source of matching
   398                              <1> d0	mov byte [bp + ?errordata], 1Fh
   399 00000282 7203E9D1FE          <1> 	jnc .error
   400                              <1> 
   401 00000287 8CD8                <1> 	mov ax, ds			; is source of matching within ?dst ?
   402 00000289 3946F0              <1> 	cmp word [bp + ?original_dst + 2], ax
   403                              <1> d0	mov byte [bp + ?errordata], 16h
   404                              <1> .error_A_1:
   405 0000028C 7603E9C7FE          <1> 	ja .error
   406 00000291 7205                <1> 	jb @F
   407 00000293 3976EE              <1> 	cmp word [bp + ?original_dst], si
   408                              <1> d0	mov byte [bp + ?errordata], 17h
   409 00000296 77F4                <1> 	ja .error_A_1			; no, ?original_dst is above it -->
   410                              <1> @@:
   411                              <1> 
   412 00000298 8A46FC              <1> 	mov al, byte [bp + ?token]
   413 0000029B 240F                <1> 	and al, 0Fh			; get match length from token
   414 0000029D E8A500              <1> 	call lz4_get_length		; dx:cx = length of match - 4
   415                              <1> d0	mov byte [bp + ?errordata], 18h
   416 000002A0 72C7                <1> 	jc .error_CY_4
   417 000002A2 89C8                <1> 	mov ax, cx			; dx:ax = length of match - 4
   418 000002A4 83C004              <1> 	add ax, 4
   419 000002A7 83D200              <1> 	adc dx, 0			; dx:ax = length of match
   420                              <1> d0	mov byte [bp + ?errordata], 19h
   421 000002AA 72BD                <1> 	jc .error_CY_4
   422 000002AC E85100              <1> 	call lz4_copy_data		; give ?dst -> dest, ds:si -> source
   423                              <1> 		; returns: ?dst incremented, ds:si -> after match source
   424                              <1> d0	mov byte [bp + ?errordata], 1Ah
   425 000002AF 72B8                <1> 	jc .error_CY_4
   426                              <1> 
   427                              <1> %if _ALLOW_OVERLAPPING
   428 000002B1 E8DB00              <1> 	call check_pointers_not_overlapping
   429                              <1> d0	mov byte [bp + ?errordata], 1Ch
   430 000002B4 72B3                <1> 	jc .error_CY_4
   431                              <1> %endif
   432                              <1> 
   433                              <1> .next_sequence:
   434 000002B6 E81D00              <1> 	call lz4_check_behind_block_higher_than_src
   435 000002B9 7388                <1> 	jnc .loop_sequence		; process next sequence -->
   436                              <1> 
   437                              <1> .end_sequence:
   438 000002BB E944FF              <1> 	jmp .end_block
   439                              <1> 
   440                              <1> 
   441                              <1> 		; INP:	ds:si -> source data
   442                              <1> 		;	?length_of_source
   443                              <1> 		; OUT:	CY if error (source buffer too small)
   444                              <1> 		;	NC if success,
   445                              <1> 		;	 al = value read
   446                              <1> 		;	 ds:si incremented (NOT normalised)
   447                              <1> 		;	 ?length_of_source decremented
   448                              <1> .lodsb:
   449 000002BE 836EE601            <1> 	sub word [bp + ?length_of_source], 1
   450 000002C2 835EE800            <1> 	sbb word [bp + ?length_of_source + 2], 0
   451 000002C6 7201                <1> 	jb .retn
   452 000002C8 AC                  <1> 	lodsb
   453                              <1> .retn:
   454 000002C9 C3                  <1> 	retn
   455                              <1> 
   456                              <1> 
   457                              <1> 		; INP:	ds:si -> source data
   458                              <1> 		;	?length_of_source
   459                              <1> 		; OUT:	CY if error (source buffer too small)
   460                              <1> 		;	NC if success,
   461                              <1> 		;	 ax = value read
   462                              <1> 		;	 ds:si incremented (NOT normalised)
   463                              <1> 		;	 ?length_of_source decremented
   464                              <1> .lodsw:
   465 000002CA 836EE602            <1> 	sub word [bp + ?length_of_source], 2
   466 000002CE 835EE800            <1> 	sbb word [bp + ?length_of_source + 2], 0
   467 000002D2 72F5                <1> 	jb .retn
   468 000002D4 AD                  <1> 	lodsw
   469 000002D5 C3                  <1> 	retn
   470                              <1> 
   471                              <1> 
   472                              <1> 		; INP:	?src_behind_block -> block end (normalised)
   473                              <1> 		;	?src -> current address in source buffer
   474                              <1> 		; OUT:	CY if ?src is >= (above-or-equal) ?src_behind_block
   475                              <1> 		;	NC else (?src is below ?src_behind_block, more data)
   476                              <1> 		; CHG:	ax, dx
   477                              <1> 		;
   478                              <1> 		; Note:	Although ?src should always equal ?src_behind_block
   479                              <1> 		;	 if CY here, we actually check for above-or-equal.
   480                              <1> lz4_check_behind_block_higher_than_src:
   481 000002D6 8B56FA              <1> 	mov dx, word [bp + ?src_behind_block + 2]
   482 000002D9 8B46F8              <1> 	mov ax, word [bp + ?src_behind_block]
   483                              <1> 					; dx:ax -> behind block
   484                              <1> 
   485 000002DC 3956F4              <1> 	cmp word [bp + ?src + 2], dx	; compare segment
   486 000002DF 7708                <1> 	ja .error			; ?src > dx:ax -->
   487 000002E1 7205                <1> 	jb .success			; ?src < dx:ax -->
   488 000002E3 3946F2              <1> 	cmp word [bp + ?src], ax	; segment is same, compare offset
   489 000002E6 7301                <1> 	jae .error			; ?src >= dx:ax -->
   490                              <1> 
   491                              <1> .success:
   492 000002E8 A8                  <1> 	db __TEST_IMM8			; (NC)
   493                              <1> .error:
   494 000002E9 F9                  <1> 	stc
   495 000002EA C3                  <1> 	retn
   496                              <1> 
   497                              <1> 
   498                              <1> 		; INP:	?dst -> destination (normalised)
   499                              <1> 		;	?src -> source (normalised)
   500                              <1> 		;	dx:ax = how long the literal data is (0 is valid)
   501                              <1> 		; OUT:	?dst incremented (normalised)
   502                              <1> 		;	?src incremented (normalised)
   503                              <1> 		;	?length_of_destination shortened
   504                              <1> 		;	?length_of_source shortened
   505                              <1> 		;	CY if error (either buffer too small)
   506                              <1> 		;	NC if success
   507                              <1> 		; CHG:	cx, dx, ax, es, di, ds, si
   508                              <1> lz4_copy_literal_or_uncompressed:
   509 000002EB C576F2              <1> 	lds si, [bp + ?src]
   510                              <1> 
   511 000002EE 2946E6              <1> 	sub word [bp + ?length_of_source], ax
   512 000002F1 1956E8              <1> 	sbb word [bp + ?length_of_source + 2], dx
   513                              <1> 					; enough data exists ?
   514 000002F4 7209                <1> 	jb .return			; no --> (CY)
   515                              <1> 
   516 000002F6 E80700              <1> 	call lz4_copy_data		; CY/NC depending on status
   517                              <1> 
   518 000002F9 8976F2              <1> 	mov word [bp + ?src], si
   519 000002FC 8C5EF4              <1> 	mov word [bp + ?src + 2], ds
   520                              <1> 					; (CF preserved)
   521                              <1> .return:
   522 000002FF C3                  <1> 	retn
   523                              <1> 
   524                              <1> 
   525                              <1> 		; INP:	?dst -> destination (normalised)
   526                              <1> 		;	ds:si -> source (normalised)
   527                              <1> 		;	dx:ax = how long the data is (0 is valid)
   528                              <1> 		; OUT:	?dst incremented (normalised)
   529                              <1> 		;	ds:si incremented (normalised)
   530                              <1> 		;	?length_of_destination shortened
   531                              <1> 		;	CY if error (buffer too small)
   532                              <1> 		;	NC if success
   533                              <1> 		;	Instead of returning, this may jump to depack.end
   534                              <1> 		;	 if the destination segment grows up to the value
   535                              <1> 		;	 stored in the ?dst_max_segment variable. It is
   536                              <1> 		;	 assumed that this will use the stack frame to leave
   537                              <1> 		;	 the function, therefore discarding any of the stack
   538                              <1> 		;	 contents between the frame and the stack top.
   539                              <1> 		; CHG:	cx, dx, ax, es, di, ds, si
   540                              <1> lz4_copy_data:
   541                              <1> d0	inc byte [bp + ?errordata + 1]
   542 00000300 2946E2              <1> 	sub word [bp + ?length_of_destination], ax
   543 00000303 1956E4              <1> 	sbb word [bp + ?length_of_destination + 2], dx
   544                              <1> 					; enough space left ?
   545 00000306 722A                <1> 	jb .error			; no -->
   546                              <1> 
   547 00000308 C47EEA              <1> 	les di, [bp + ?dst]
   548                              <1> .loop:
   549 0000030B B9F0FF              <1> 	mov cx, 64 * 1024 - 16		; block size
   550                              <1> 		; If both pointers are normalised, moving 0FFF0h bytes is
   551                              <1> 		;  valid and results in a maximum offset of 0FFFFh in either.
   552                              <1> 
   553 0000030E 85D2                <1> 	test dx, dx			; >= 1_0000h ?
   554 00000310 7508                <1> 	jnz @F				; yes, full block -->
   555 00000312 85C0                <1> 	test ax, ax			; == 0 ?
   556 00000314 7415                <1> 	jz .end				; yes, done -->
   557 00000316 39C8                <1> 	cmp ax, cx			; can move in one (last) block ?
   558 00000318 7607                <1> 	jbe .last			; yes -->
   559                              <1> @@:
   560                              <1> 					; no, move one block and continue
   561 0000031A 29C8                <1> 	sub ax, cx
   562 0000031C 83DA00              <1> 	sbb dx, 0			; left over remaining
   563 0000031F EB03                <1> 	jmp .copy
   564                              <1> 
   565                              <1> .last:
   566 00000321 91                  <1> 	xchg cx, ax			; cx = remaining length
   567 00000322 31C0                <1> 	xor ax, ax			; no more remaining
   568                              <1> 
   569                              <1> .copy:
   570 00000324 F3A4                <1> 	rep movsb			; move one block (full or partial)
   571                              <1> 
   572 00000326 E88200              <1> 	call normalise_both_pointers
   573 00000329 EBE0                <1> 	jmp .loop
   574                              <1> 
   575                              <1> .end:
   576 0000032B 897EEA              <1> 	mov word [bp + ?dst], di
   577 0000032E 8C46EC              <1> 	mov word [bp + ?dst + 2], es
   578                              <1> %if _PAYLOAD_KERNEL_MAX_PARAS
   579                              <1> 	mov ax, es
   580                              <1> 	cmp ax, word [bp + ?dst_max_segment]
   581                              <1> 	jae depack.end
   582                              <1> %endif
   583                              <1> 
   584 00000331 A8                  <1> 	db __TEST_IMM8			; (NC)
   585                              <1> .error:
   586 00000332 F9                  <1> 	stc
   587 00000333 C3                  <1> 	retn
   588                              <1> 
   589                              <1> 
   590                              <1> 		; INP:	?src -> source data
   591                              <1> 		;	bx = function to call
   592                              <1> 		; OUT:	ds:si = ?src -> behind data (normalised)
   593                              <1> 		;	CY if error (buffer too small)
   594                              <1> 		;	NC if success
   595                              <1> 		;	(CF is passed from what the function at bx returns)
   596                              <1> 		;
   597                              <1> 		; Protocol of function in bx called by this:
   598                              <1> 		; INP:	ds:si -> source data
   599                              <1> 		;	?length_of_source
   600                              <1> 		;	(may take more inputs depending on function)
   601                              <1> 		; OUT:	ds:si incremented (NOT normalised)
   602                              <1> 		;	?length_of_source decremented
   603                              <1> 		;	CY if error (buffer too small or other error)
   604                              <1> 		;	NC if success
   605                              <1> 		;	(may give more outputs depending on function)
   606                              <1> lz4_func_bx_with_src:
   607 00000334 C576F2              <1> 	lds si, [bp + ?src]
   608 00000337 FFD3                <1> 	call bx
   609 00000339 9C                  <1> 	pushf
   610 0000033A E87500              <1> 	call normalise_dssi_pointer
   611 0000033D 8976F2              <1> 	mov word [bp + ?src], si
   612 00000340 8C5EF4              <1> 	mov word [bp + ?src + 2], ds
   613 00000343 9D                  <1> 	popf
   614 00000344 C3                  <1> 	retn
   615                              <1> 
   616                              <1> 
   617                              <1> 		; INP:	?src -> source data
   618                              <1> 		;	?length_of_source
   619                              <1> 		;	al = first field data (0 to 15)
   620                              <1> 		; OUT:	dx:cx = length value
   621                              <1> 		;	?src incremented
   622                              <1> 		;	?length_of_source decremented
   623                              <1> 		;	CY if error (too high or out of source data)
   624                              <1> 		;	NC if success
   625                              <1> 		; CHG:	ax, bx
   626                              <1> lz4_get_length:
   627 00000345 1E                  <1> 	push ds
   628 00000346 56                  <1> 	push si
   629                              <1> 
   630 00000347 31C9                <1> 	xor cx, cx
   631 00000349 31D2                <1> 	xor dx, dx			; dx:cx = length field
   632 0000034B B40F                <1> 	mov ah, 15			; first byte maximum value
   633                              <1> .loop:
   634 0000034D 00C1                <1> 	add cl, al
   635 0000034F 80D500              <1> 	adc ch, 0
   636 00000352 83D200              <1> 	adc dx, 0			; add in this byte
   637 00000355 7211                <1> 	jc .error			; if too high -->
   638 00000357 38E0                <1> 	cmp al, ah			; is this the maximum value ?
   639 00000359 750C                <1> 	jne .end			; no -->
   640 0000035B BB[BE02]            <1> 	mov bx, depack.lodsb
   641 0000035E E8D3FF              <1> 	call lz4_func_bx_with_src	; load next byte
   642 00000361 7205                <1> 	jc .error
   643 00000363 B4FF                <1> 	mov ah, 255			; next maximum value is 255
   644 00000365 EBE6                <1> 	jmp .loop			; -->
   645                              <1> 
   646                              <1> .end:
   647 00000367 A8                  <1> 	db __TEST_IMM8			; (NC)
   648                              <1> .error:
   649 00000368 F9                  <1> 	stc
   650                              <1> 
   651 00000369 5E                  <1> 	pop si
   652 0000036A 1F                  <1> 	pop ds
   653 0000036B C3                  <1> 	retn
   654                              <1> 
   655                              <1> 
   656                              <1> 		; INP:	?src -> source data (normalised)
   657                              <1> 		;	cx = size to read, 1 to 4 or higher (at most 0FFF0h)
   658                              <1> 		;	?length_of_source
   659                              <1> 		; OUT:	If cx >= 4,
   660                              <1> 		;	 dx:ax = value read as little-endian
   661                              <1> 		;	If cx == 3,
   662                              <1> 		;	 dl:ax = value read
   663                              <1> 		;	If cx == 2,
   664                              <1> 		;	 ax = value read
   665                              <1> 		;	If cx == 1,
   666                              <1> 		;	 al = value read
   667                              <1> 		;	If cx == 0,
   668                              <1> 		;	 invalid, CY
   669                              <1> 		;	ds:si = ?src = incremented source (normalised)
   670                              <1> 		;	?length_of_source decremented
   671                              <1> 		;	CY if error (source buffer too small, or cx zero)
   672                              <1> 		;	NC if success
   673                              <1> 		; CHG:	ds, si, dx, ax
   674                              <1> 		;
   675                              <1> 		; Note:	Always reads four bytes at INP:ds:si -> data.
   676                              <1> read_le_data_src:
   677 0000036C E31F                <1> 	jcxz .error
   678                              <1> 
   679 0000036E 294EE6              <1> 	sub word [bp + ?length_of_source], cx
   680 00000371 835EE800            <1> 	sbb word [bp + ?length_of_source + 2], 0
   681 00000375 7216                <1> 	jb .error
   682                              <1> 
   683 00000377 C576F2              <1> 	lds si, [bp + ?src]
   684                              <1> 
   685 0000037A AD                  <1> 	lodsw
   686 0000037B 92                  <1> 	xchg ax, dx		; dx = low word (first)
   687 0000037C AD                  <1> 	lodsw			; ax = high word (second)
   688 0000037D 92                  <1> 	xchg ax, dx		; fix order, dx:ax = dword
   689                              <1> 
   690 0000037E 83EE04              <1> 	sub si, 4
   691 00000381 01CE                <1> 	add si, cx
   692                              <1> 
   693 00000383 E82C00              <1> 	call normalise_dssi_pointer
   694 00000386 8976F2              <1> 	mov word [bp + ?src], si
   695 00000389 8C5EF4              <1> 	mov word [bp + ?src + 2], ds
   696                              <1> 
   697 0000038C A8                  <1> 	db __TEST_IMM8		; (NC)
   698                              <1> .error:
   699 0000038D F9                  <1> 	stc
   700 0000038E C3                  <1> 	retn
   701                              <1> 
   982                                  %endif
   983                                  
   984                                  
   985                                  %if _SNAPPY
   986                                  	%include "snappy.asm"
   987                                  %endif
   988                                  
   989                                  
   990                                  %if _EXODECR
   991                                  	%include "exodecr.asm"
   992                                  %endif
   993                                  
   994                                  
   995                                  %if _X
   996                                  	%include "x.asm"
   997                                  %endif
   998                                  
   999                                  
  1000                                  %if _HEATSHRINK
  1001                                  	%include "heatshr.asm"
  1002                                  %endif
  1003                                  
  1004                                  
  1005                                  %if _LZD
  1006                                  	%include "lzd.asm"
  1007                                  %endif
  1008                                  
  1009                                  
  1010                                  %if _LZO
  1011                                  	%include "lzo.asm"
  1012                                  %endif
  1013                                  
  1014                                  
  1015                                  %if _LZSA2
  1016                                  	%include "lzsa2.asm"
  1017                                  %endif
  1018                                  
  1019                                  
  1020                                  %if _APL
  1021                                  	%include "apl.asm"
  1022                                  %endif
  1023                                  
  1024                                  
  1025                                  %if _BZP
  1026                                  	%include "bzp.asm"
  1027                                  %endif
  1028                                  
  1029                                  
  1030                                  %if _ALLOW_OVERLAPPING
  1031                                  		; INP:	?src, ?dst
  1032                                  		; OUT:	CY if error (?src < ?dst)
  1033                                  		;	NC if success
  1034                                  		; CHG:	ax, bx, cx, dx
  1035                                  check_pointers_not_overlapping:
  1036                                  %if CHECK_POINTERS_VARIABLE_DST
  1037 0000038F FF76EC                  	 push word [bp + ?dst + 2]
  1038 00000392 FF76EA                  	 push word [bp + ?dst]
  1039                                  %else
  1040                                  	 push es
  1041                                  	 push di
  1042                                  %endif
  1043 00000395 E87300                  	call pointer_to_linear
  1044                                  
  1045 00000398 91                      	xchg cx, ax
  1046 00000399 87DA                    	xchg bx, dx			; bx:cx = linear ?dst after write
  1047                                  
  1048                                  %if CHECK_POINTERS_VARIABLE_SRC
  1049 0000039B FF76F4                  	 push word [bp + ?src + 2]
  1050 0000039E FF76F2                  	 push word [bp + ?src]
  1051                                  %else
  1052                                  	 push ds
  1053                                  	 push si
  1054                                  %endif
  1055 000003A1 E86700                  	call pointer_to_linear		; dx:ax = linear ?src before next read
  1056                                  
  1057 000003A4 39DA                    	cmp dx, bx			; ?src >= ?dst ?
  1058 000003A6 7502                    	jne @F
  1059 000003A8 39C8                    	cmp ax, cx
  1060                                  @@:
  1061                                  					; (CY) if error (src < dst)
  1062                                  					; (NC) if no error
  1063 000003AA C3                      	retn
  1064                                  %endif
  1065                                  
  1066                                  	; This leaves the lframe context created within the
  1067                                  	;  specific depacker's file. The above function
  1068                                  	;  check_pointers_not_overlapping uses the frame.
  1069                                  	lleave ctx
  1070                                  
  1071                                  
  1072                                  		; INP:	ds:si = pointer
  1073                                  		;	es:di = pointer
  1074                                  		; OUT:	ds:si normalised
  1075                                  		;	es:di normalised
  1076                                  normalise_both_pointers:
  1077 000003AB 06                      	 push es
  1078 000003AC 57                      	 push di
  1079 000003AD E80A00                  	call normalise_pointer
  1080 000003B0 5F                      	 pop di
  1081 000003B1 07                      	 pop es
  1082                                  
  1083                                  normalise_dssi_pointer:
  1084 000003B2 1E                      	 push ds
  1085 000003B3 56                      	 push si
  1086 000003B4 E80300                  	call normalise_pointer
  1087 000003B7 5E                      	 pop si
  1088 000003B8 1F                      	 pop ds
  1089 000003B9 C3                      	retn
  1090                                  
  1091                                  
  1092                                  		; INP:	word [ss:sp + 2] = segment
  1093                                  		;	word [ss:sp] = offset
  1094                                  		;
  1095                                  		; Note:	Does not work correctly with pointers that point to
  1096                                  		;	 a HMA location. Do not use then!
  1097                                  normalise_pointer:
  1098                                  %if NEED_NORMALISE_POINTER_WITH_DISPLACEMENT
  1099                                  	lframe near
  1100                                  	lpar word,	segment
  1101                                  	lpar word,	offset
  1102                                  	lpar_return
  1103 000003BA 5589E5                  	lenter
  1104                                  
  1105 000003BD 837E040F                	cmp word [bp + ?offset], 15
  1106 000003C1 7617                    	jbe .ret
  1107                                  
  1108 000003C3 53                      	push bx
  1109 000003C4 51                      	push cx
  1110                                  
  1111 000003C5 31DB                    	xor bx, bx
  1112 000003C7 31C9                    	xor cx, cx
  1113 000003C9 FF7606                  	 push word [bp + ?segment]
  1114 000003CC FF7604                  	 push word [bp + ?offset]
  1115 000003CF E80A00                  	call normalise_pointer_with_displacement_bxcx
  1116 000003D2 8F4604                  	 pop word [bp + ?offset]
  1117 000003D5 8F4606                  	 pop word [bp + ?segment]
  1118                                  
  1119 000003D8 59                      	pop cx
  1120 000003D9 5B                      	pop bx
  1121                                  .ret:
  1122 000003DA 5D                      	lleave
  1123 000003DB C3                      	lret
  1124                                  
  1125                                  
  1126                                  		; INP:	word [ss:sp + 2] = segment
  1127                                  		;	word [ss:sp] = offset
  1128                                  		;	bx:cx = add/sub displacement
  1129                                  		; OUT:	CY if the displacement carries
  1130                                  		;	NC if not
  1131                                  normalise_pointer_with_displacement_bxcx:
  1132                                  %endif
  1133                                  	lframe near
  1134                                  	lpar word,	segment
  1135                                  	lpar word,	offset
  1136                                  	lpar_return
  1137 000003DC 5589E5                  	lenter
  1138                                  
  1139                                  %ifn NEED_NORMALISE_POINTER_WITH_DISPLACEMENT
  1140                                  	cmp word [bp + ?offset], 15
  1141                                  	jbe .ret
  1142                                  %endif
  1143                                  
  1144 000003DF 50                      	push ax
  1145 000003E0 51                      	push cx
  1146 000003E1 52                      	push dx
  1147                                  
  1148 000003E2 FF7606                  	 push word [bp + ?segment]
  1149 000003E5 FF7604                  	 push word [bp + ?offset]
  1150 000003E8 E82000                  	call pointer_to_linear
  1151                                  
  1152                                  %if NEED_NORMALISE_POINTER_WITH_DISPLACEMENT
  1153                                  	; push bx
  1154                                  	; 				; sign-extend cx into bx:cx
  1155                                  	; cmp cx, 8000h			; CY if < 8000h (NC if negative)
  1156                                  	; cmc				; NC if positive
  1157                                  	; sbb bx, bx			; 0 if was NC, -1 if was CY
  1158                                  
  1159 000003EB 01C1                    	add cx, ax
  1160 000003ED 11DA                    	adc dx, bx			; dx:cx = dx:ax + bx:cx
  1161                                  	; pop bx
  1162 000003EF 9F                      	lahf				; ah = flags
  1163                                  %else
  1164                                  	xchg ax, cx
  1165                                  %endif
  1166                                  
  1167                                  %if 0
  1168                                  		; Adds in HMA support for this function. Not currently used.
  1169                                  	cmp dx, 10h			; dx:ax >= 10_0000h ?
  1170                                  	jb @F				; no, linear-to-pointer normally -->
  1171                                  	; ja .error
  1172                                  
  1173                                  	add cx, 10h
  1174                                  	; jc .error
  1175                                  	mov word [bp + ?offset], cx
  1176                                  	or word [bp + ?segment], -1
  1177                                  	jmp .return
  1178                                  @@:
  1179                                  %endif
  1180                                  
  1181 000003F0 53                      	push bx
  1182 000003F1 89CB                    	mov bx, cx
  1183 000003F3 83E10F                  	and cx, 15
  1184 000003F6 894E04                  	mov word [bp + ?offset], cx
  1185                                  
  1186 000003F9 B104                    	mov cl, 4
  1187                                  @@:
  1188 000003FB D1EA                    	shr dx, 1
  1189 000003FD D1DB                    	rcr bx, 1
  1190 000003FF E2FA                    	loop @B
  1191                                  
  1192 00000401 895E06                  	mov word [bp + ?segment], bx
  1193 00000404 5B                      	pop bx
  1194                                  
  1195                                  	; test dx, dx
  1196                                  	; jnz .error
  1197                                  
  1198                                  .return:
  1199                                  
  1200                                  %if NEED_NORMALISE_POINTER_WITH_DISPLACEMENT
  1201 00000405 9E                      	sahf				; restore flags from ah
  1202                                  %endif
  1203 00000406 5A                      	pop dx
  1204 00000407 59                      	pop cx
  1205 00000408 58                      	pop ax
  1206                                  %ifn NEED_NORMALISE_POINTER_WITH_DISPLACEMENT
  1207                                  .ret:
  1208                                  %endif
  1209 00000409 5D                      	lleave
  1210 0000040A C3                      	lret
  1211                                  
  1212                                  
  1213                                  		; INP:	word [ss:sp + 2] = segment
  1214                                  		;	word [ss:sp] = offset
  1215                                  		; OUT:	dx:ax = linear address
  1216                                  pointer_to_linear:
  1217                                  	lframe near
  1218                                  	lpar word,	segment
  1219                                  	lpar word,	offset
  1220 0000040B 5589E5                  	lenter
  1221                                  
  1222 0000040E 8B4606                  	mov ax, word [bp + ?segment]
  1223 00000411 31D2                    	xor dx, dx
  1224 00000413 51                      	push cx
  1225 00000414 B90400                  	mov cx, 4
  1226                                  @@:
  1227 00000417 D1E0                    	shl ax, 1
  1228 00000419 D1D2                    	rcl dx, 1
  1229 0000041B E2FA                    	loop @B
  1230                                  
  1231 0000041D 034604                  	add ax, word [bp + ?offset]
  1232 00000420 11CA                    	adc dx, cx			; cx = 0 here
  1233 00000422 59                      	pop cx
  1234                                  
  1235 00000423 5D                      	lleave
  1236 00000424 C20400                  	lret
  1237                                  
  1238                                  
  1239 00000427 90<rep 9h>              	align 16
  1240                                  init1_end:
  1241                                  
  1242                                  
  1243                                  	section INIT0
  1244                                  %if _TEST_PROGRAM
  1245                                  init0_msg:
  1246                                  .error_stderr:	db "Error: Not enough memory allocated.",13,10
  1247                                  .error_stderr.length: equ $ - .error_stderr
  1248                                  .error_stdout:	_autodigits paras(_TEST_PROGRAM_DECOMPRESSED_SIZE 				+ (payload_end - payload) 				+ (init1_end - init1_start) 				+ ADDITIONAL_MEMORY 				)
  1253                                  		db 13,10
  1254                                  .error_stdout.length: equ $ - .error_stdout
  1255                                  
  1256                                  	align 1024
  1257                                  %if ($ - $$) != 1024
  1258                                   %error Wrong INIT0 size
  1259                                  %endif
  1260                                  %endif
  1261                                  
  1262 000001CF 90                      	align 16
  1263                                  init0_end:
  1264                                  
  1265                                  
  1266                                  %assign num (init1_end - init1_start) + (init0_end - init0_start)
  1267                                  %if _BRIEFLZ
  1268                                  %define which iniblz
  1269                                  %elif _LZ4
  1270                                  %define which inilz4
  1271                                  %elif _SNAPPY
  1272                                  %define which inisz
  1273                                  %elif _EXODECR
  1274                                  %define which iniexo
  1275                                  %elif _X
  1276                                  %define which inix
  1277                                  %elif _HEATSHRINK
  1278                                  %define which inihs
  1279                                  %elif _LZD
  1280                                  %define which inilz
  1281                                  %elif _LZO
  1282                                  %define which inilzo
  1283                                  %elif _LZSA2
  1284                                  %define which inilzsa2
  1285                                  %elif _APL
  1286                                  %define which iniapl
  1287                                  %elif _BZP
  1288                                  %define which inibzp
  1289                                  %endif
  1290                                  %warning which: num bytes used for depacker
  1290          ******************       warning: inilz4: 1536 bytes used for depacker [-w+user]
  1291                                  
  1292                                  
  1293                                  %if _TEST_PROGRAM
  1294                                  	section INIT2 align=16 follows=INIT1 vstart=0
  1295                                  init2_start:
  1296                                  		; si => after PSP
  1297                                  		; cs => INIT2
  1298                                  		; psp, free, payload, init1, init2, payload space, stack
  1299                                  		;
  1300                                  		; The correct allocation for the test program
  1301                                  		;  is image size (init0, payload, init1, init2)
  1302                                  		;  minus init0 plus compressed payload size
  1303                                  		;  plus decompressed size plus stack. For
  1304                                  		;  simplicity, init0 subtraction may be skipped.
  1305                                  
  1306                                  		; ss:sp -> word amount repetitions, word ax
  1307                                  		; bx = 1 if A test, 8001h if B test
  1308                                  	push bx
  1309                                  
  1310                                  	lframe 0
  1311                                  	lpar word,	repetitions
  1312                                  	lpar word,	whichtest
  1313                                  	lenter
  1314                                  
  1315                                  	mov dx, word [bp + ?repetitions]
  1316                                  	cmp dx, -1
  1317                                  	jne @F
  1318                                  
  1319                                  .cmdline_error:
  1320                                  %if _DEBUG0
  1321                                  	mov bx, -1
  1322                                  %endif
  1323                                  	mov dx, init2_msg.cmdline_error
  1324                                  	mov cx, init2_msg.cmdline_error.length
  1325                                  	jmp init2_error
  1326                                  
  1327                                  
  1328                                  @@:
  1329                                  	testopt [bp + ?whichtest], 8000h
  1330                                  	jz .a
  1331                                  .b:
  1332                                  	test dx, dx
  1333                                  	jz .cmdline_error
  1334                                  	jmp @F
  1335                                  
  1336                                  .a:
  1337                                  	test dx, dx
  1338                                  	jnz .cmdline_error
  1339                                  @@:
  1340                                  
  1341                                  	mov dx, cs
  1342                                  	add dx, (init2_end - init2_start) >> 4
  1343                                  				; => payload saving area
  1344                                  	mov ax, cs
  1345                                  	sub ax, ( (init1_end - init1_start) 		+ (payload_end - payload) 		) >> 4		; => payload source for first run
  1348                                  	mov cx, (payload_end - payload) >> 4
  1349                                  	call init2_movp		; copy payload to payload saving area
  1350                                  		; We save away the payload here because a failure
  1351                                  		;  to decompress generally overwrites part of that
  1352                                  		;  payload which was used as source.
  1353                                  
  1354                                  	mov dx, ax		; dx => payload source to use
  1355                                  	mov ax, cs
  1356                                  	sub ax, (init1_end - init1_start) >> 4
  1357                                  				; ax => INIT1
  1358                                  	mov bx, 1		; say we're in EXE mode
  1359                                  	push dx
  1360                                  	push ax
  1361                                  	push si			; si => target
  1362                                  	 push cs
  1363                                  	 call .transfer		; call decompression
  1364                                  	pop si
  1365                                  	pop ax
  1366                                  	pop dx
  1367                                  		; Returns here after decompression.
  1368                                  		; CY if error.
  1369                                  	jnc @F
  1370                                  
  1371                                  	mov dx, init2_msg.initial_error
  1372                                  	mov cx, init2_msg.initial_error.length
  1373                                  	jmp init2_error
  1374                                  
  1375                                  @@:
  1376                                  	numdef INCLUDE_UNCOMPRESSED
  1377                                  	numdef WRITE_WRONG_FILE
  1378                                  %if _INCLUDE_UNCOMPRESSED
  1379                                  payload_uncompressed_size equ payload_uncompressed.end - payload_uncompressed
  1380                                  
  1381                                  	call checkdecompressed
  1382                                  	je @F
  1383                                  
  1384                                  %if _WRITE_WRONG_FILE
  1385                                  	call writefiles
  1386                                  %endif
  1387                                  
  1388                                  %if _DEBUG0
  1389                                  	mov bx, -1
  1390                                  %endif
  1391                                  	mov dx, init2_msg.initial_error_2
  1392                                  	mov cx, init2_msg.initial_error_2.length
  1393                                  	jmp init2_error
  1394                                  
  1395                                  @@:
  1396                                  %endif
  1397                                  
  1398                                  	lvar word,	upperbound
  1399                                  	 push dx
  1400                                  	lvar word,	lowerbound
  1401                                  	 push si
  1402                                  	lvar word,	current_init1
  1403                                  	 push ax
  1404                                  
  1405                                  %if _TEST_PROGRESS
  1406                                  	mov dx, init2_msg.progress.1
  1407                                  	mov cx, init2_msg.progress.1.length
  1408                                  .loop:
  1409                                  	push cs
  1410                                  	pop ds
  1411                                  	mov bx, 2
  1412                                  	mov ah, 40h
  1413                                  	int 21h
  1414                                  %else
  1415                                  .loop:
  1416                                  %endif
  1417                                  
  1418                                  	mov dx, [bp + ?upperbound]
  1419                                  
  1420                                  	testopt [bp + ?whichtest], 8000h
  1421                                  	jz @F
  1422                                  
  1423                                  	dec word [bp + ?repetitions]
  1424                                  	jnz .test_b_skip_bound
  1425                                  
  1426                                  %if _TEST_PROGRESS
  1427                                  	push cs
  1428                                  	pop ds
  1429                                  	mov dx, init2_msg.progress.linebreak
  1430                                  	mov cx, init2_msg.progress.linebreak.length
  1431                                  	mov bx, 2
  1432                                  	mov ah, 40h
  1433                                  	int 21h
  1434                                  %endif
  1435                                  	mov ax, 4C00h
  1436                                  	int 21h
  1437                                  
  1438                                  
  1439                                  @@:
  1440                                  	sub dx, [bp + ?lowerbound]
  1441                                  	jz .found
  1442                                  	shr dx, 1
  1443                                  		; Rounding down, so that we never retry upper bound.
  1444                                  		;  The upper bound is known to be working.
  1445                                  	add dx, [bp + ?lowerbound]
  1446                                  
  1447                                  .test_b_skip_bound:
  1448                                  	push dx
  1449                                  	add dx, (payload_end - payload) >> 4
  1450                                  	mov ax, [bp + ?current_init1]
  1451                                  	mov cx, (init1_end - init1_start) >> 4
  1452                                  	call init2_movp
  1453                                  	mov [bp + ?current_init1], dx
  1454                                  	pop dx
  1455                                  
  1456                                  	mov ax, cs
  1457                                  	add ax, (init2_end - init2_start) >> 4
  1458                                  				; => payload in saving area
  1459                                  	mov cx, (payload_end - payload) >> 4
  1460                                  	call init2_movp		; copy payload from payload saving area
  1461                                  
  1462                                  		; dx => source
  1463                                  	mov ax, [bp + ?current_init1]
  1464                                  	mov bx, 1
  1465                                  	push dx
  1466                                  	push si
  1467                                  	 push cs
  1468                                  	 call .transfer
  1469                                  	pop si
  1470                                  	pop dx
  1471                                  		; Returns here after decompression.
  1472                                  		; CY if error.
  1473                                  	jnc @F
  1474                                  
  1475                                  	testopt [bp + ?whichtest], 8000h
  1476                                  	jnz .test_b_fail
  1477                                  
  1478                                  		; error: this attempt is one below the new lower bound
  1479                                  	inc dx
  1480                                  	mov word [bp + ?lowerbound], dx
  1481                                  
  1482                                  %if _TEST_PROGRESS
  1483                                  	mov dx, init2_msg.progress.fail
  1484                                  	mov cx, init2_msg.progress.fail.length
  1485                                  %endif
  1486                                  	jmp .loop
  1487                                  
  1488                                  @@:
  1489                                  %if _INCLUDE_UNCOMPRESSED
  1490                                  	call checkdecompressed
  1491                                  	je @F
  1492                                  
  1493                                  %if _WRITE_WRONG_FILE
  1494                                  	call writefiles
  1495                                  %endif
  1496                                  
  1497                                  .test_b_fail:
  1498                                  %if _TEST_PROGRESS
  1499                                  	push cs
  1500                                  	pop ds
  1501                                  	mov dx, init2_msg.progress.linebreak
  1502                                  	mov cx, init2_msg.progress.linebreak.length
  1503                                  	mov bx, 2
  1504                                  	mov ah, 40h
  1505                                  	int 21h
  1506                                  %endif
  1507                                  %if _DEBUG0
  1508                                  	mov bx, -2
  1509                                  %endif
  1510                                  	mov dx, init2_msg.subsequent_error_2
  1511                                  	mov cx, init2_msg.subsequent_error_2.length
  1512                                  	jmp init2_error
  1513                                  
  1514                                  @@:
  1515                                  %endif
  1516                                  		; success: this attempt is the new upper bound
  1517                                  	mov word [bp + ?upperbound], dx
  1518                                  %if _TEST_PROGRESS
  1519                                  	mov dx, init2_msg.progress.success
  1520                                  	mov cx, init2_msg.progress.success.length
  1521                                  %endif
  1522                                  	jmp .loop
  1523                                  
  1524                                  .found:
  1525                                  %if _TEST_PROGRESS
  1526                                  	push cs
  1527                                  	pop ds
  1528                                  	mov dx, init2_msg.progress.linebreak
  1529                                  	mov cx, init2_msg.progress.linebreak.length
  1530                                  	mov bx, 2
  1531                                  	mov ah, 40h
  1532                                  	int 21h
  1533                                  %endif
  1534                                  	mov ax, word [bp + ?upperbound]
  1535                                  	sub ax, si		; = how many paragraphs in buffer before source
  1536                                  	add ax, paras( (init1_end - init1_start) 			+ (payload_end - payload) )
  1538                                  				; = how many paragraphs needed for process
  1539                                  	call init2_disp_ax_dec
  1540                                  	mov al, 13
  1541                                  	call init2_disp_al
  1542                                  	mov al, 10
  1543                                  	call init2_disp_al
  1544                                  	mov ax, 4C00h
  1545                                  	int 21h
  1546                                  
  1547                                  
  1548                                  .transfer:
  1549                                  	xor di, di
  1550                                  	push di			; dummy ax value on stack
  1551                                  	push ax			; INIT1 segment
  1552                                  	push di			; zero = init1_start
  1553                                  	retf
  1554                                  
  1555                                  
  1556                                  
  1557                                  %if _INCLUDE_UNCOMPRESSED
  1558                                  
  1559                                  
  1560                                  %if _WRITE_WRONG_FILE
  1561                                  writefiles:
  1562                                  	push cs
  1563                                  	pop ds
  1564                                  	mov dx, init2_msg.wrong_file_name
  1565                                  	xor cx, cx
  1566                                  	mov ah, 3Ch
  1567                                  	int 21h
  1568                                  	jc .notfile
  1569                                  
  1570                                  	mov bx, ax
  1571                                  	mov cx, payload_uncompressed_size >> 4
  1572                                  	xor dx, dx
  1573                                  .loopfile:
  1574                                  	mov ds, si
  1575                                  	mov ah, 40h
  1576                                  	push cx
  1577                                  	mov cx, 16
  1578                                  	int 21h
  1579                                  	pop cx
  1580                                  	inc si
  1581                                  	loop .loopfile
  1582                                  
  1583                                  	mov ds, si
  1584                                  	mov cx, payload_uncompressed_size & 15
  1585                                  	mov ah, 40h
  1586                                  	int 21h
  1587                                  
  1588                                  	mov ah, 3Eh
  1589                                  	int 21h
  1590                                  
  1591                                  .notfile:
  1592                                  
  1593                                  	push cs
  1594                                  	pop ds
  1595                                  	mov dx, init2_msg.wrong_file_name2
  1596                                  	xor cx, cx
  1597                                  	mov ah, 3Ch
  1598                                  	int 21h
  1599                                  	jc .notfile2
  1600                                  
  1601                                  	mov bx, ax
  1602                                  	mov cx, payload_uncompressed_size >> 4
  1603                                  	mov si, cs
  1604                                  	add si, (payload_uncompressed - init2_start) >> 4
  1605                                  	xor dx, dx
  1606                                  .loopfile2:
  1607                                  	mov ds, si
  1608                                  	mov ah, 40h
  1609                                  	push cx
  1610                                  	mov cx, 16
  1611                                  	int 21h
  1612                                  	pop cx
  1613                                  	inc si
  1614                                  	loop .loopfile2
  1615                                  
  1616                                  	mov ds, si
  1617                                  	mov cx, payload_uncompressed_size & 15
  1618                                  	mov ah, 40h
  1619                                  	int 21h
  1620                                  
  1621                                  	mov ah, 3Eh
  1622                                  	int 21h
  1623                                  
  1624                                  .notfile2:
  1625                                  	retn
  1626                                  %endif
  1627                                  
  1628                                  		; INP:	si => decompressed image
  1629                                  		; OUT:	ZR if matching
  1630                                  		;	NZ if mismatching
  1631                                  		; CHG:	es, ds, di, bx, cx
  1632                                  		; STT:	UP
  1633                                  checkdecompressed:
  1634                                  	push ax
  1635                                  	push dx
  1636                                  	push si
  1637                                  %if _PAYLOAD_KERNEL_MAX_PARAS
  1638                                  	mov cx, _PAYLOAD_KERNEL_MAX_PARAS
  1639                                  	mov bx, 0
  1640                                  %else
  1641                                  	mov cx, payload_uncompressed_size >> 4
  1642                                  	mov bx, payload_uncompressed_size & 15
  1643                                  %endif
  1644                                  	mov di, cs
  1645                                  	add di, (payload_uncompressed - init2_start) >> 4
  1646                                  	jcxz .end
  1647                                  .loop:
  1648                                  	push cx
  1649                                  	mov cx, 8
  1650                                  	mov ds, si
  1651                                  	mov es, di
  1652                                  	inc si
  1653                                  	inc di
  1654                                  	push si
  1655                                  	push di
  1656                                  	xor si, si
  1657                                  	xor di, di
  1658                                  	repe cmpsw
  1659                                  	pop di
  1660                                  	pop si
  1661                                  	pop cx
  1662                                  	jne .ret
  1663                                  	loop .loop
  1664                                  .end:
  1665                                  	mov ds, si
  1666                                  	mov es, di
  1667                                  	xor si, si
  1668                                  	xor di, di		; (ZR)
  1669                                  	mov cx, bx
  1670                                  	repe cmpsb
  1671                                  .ret:
  1672                                  	pop si
  1673                                  	pop dx
  1674                                  	pop ax
  1675                                  	retn
  1676                                  %endif
  1677                                  
  1678                                  
  1679                                  init2_error:
  1680                                  %if _DEBUG0
  1681                                  	push bx
  1682                                  %endif
  1683                                  	push cs
  1684                                  	pop ds
  1685                                  	mov bx, 2
  1686                                  	mov ah, 40h
  1687                                  	int 21h
  1688                                  
  1689                                  %if _DEBUG0
  1690                                  	mov dx, init2_msg.rc
  1691                                  	mov cx, init2_msg.rc.length
  1692                                  	mov bx, 2
  1693                                  	mov ah, 40h
  1694                                  	int 21h
  1695                                  	pop ax
  1696                                  	call init2_error_disp_ax_hex
  1697                                  	mov dx, init2_msg.linebreak
  1698                                  	mov cx, init2_msg.linebreak.length
  1699                                  	mov bx, 2
  1700                                  	mov ah, 40h
  1701                                  	int 21h
  1702                                  %endif
  1703                                  
  1704                                  	testopt [bp + ?whichtest], 8000h
  1705                                  	jnz @F
  1706                                  
  1707                                  	mov dx, init2_msg.error_stdout
  1708                                  	mov cx, init2_msg.error_stdout.length
  1709                                  	mov bx, 1
  1710                                  	mov ah, 40h
  1711                                  	int 21h
  1712                                  @@:
  1713                                  	mov ax, 4CFFh
  1714                                  	int 21h
  1715                                  
  1716                                  	lleave ctx
  1717                                  
  1718                                  
  1719                                  %if _DEBUG0
  1720                                  init2_error_disp_ax_hex:	; ax
  1721                                  		xchg al,ah
  1722                                  		call init2_error_disp_al_hex	; display former ah
  1723                                  		xchg al,ah			;  and fall trough for al
  1724                                  init2_error_disp_al_hex:	; al
  1725                                  		push cx
  1726                                  		mov cl,4
  1727                                  		ror al,cl
  1728                                  		call init2_error_disp_al_lownibble_hex
  1729                                  						; display former high-nibble
  1730                                  		rol al,cl
  1731                                  		pop cx
  1732                                  						;  and fall trough for low-nibble
  1733                                  init2_error_disp_al_lownibble_hex:
  1734                                  		push ax			 ; save ax for call return
  1735                                  		and al,00001111b		; high nibble must be zero
  1736                                  		add al,'0'			; if number is 0-9, now it's the correct character
  1737                                  		cmp al,'9'
  1738                                  		jna .decimalnum		 ; if we get decimal number with this, ok -->
  1739                                  		add al,7			;  otherwise, add 7 and we are inside our alphabet
  1740                                   .decimalnum:
  1741                                  		call init2_error_disp_al
  1742                                  		pop ax
  1743                                  		retn
  1744                                  
  1745                                  
  1746                                  init2_error_disp_al:
  1747                                  	push dx
  1748                                  	push cx
  1749                                  	push bx
  1750                                  	push ax
  1751                                  	mov dx, sp
  1752                                  	push ds
  1753                                  	 push ss
  1754                                  	 pop ds
  1755                                  	mov cx, 1
  1756                                  	mov bx, 2
  1757                                  	mov ah, 40h
  1758                                  	int 21h
  1759                                  	pop ds
  1760                                  	pop ax
  1761                                  	pop bx
  1762                                  	pop cx
  1763                                  	pop dx
  1764                                  	retn
  1765                                  %endif
  1766                                  
  1767                                  
  1768                                  init2_disp_al:
  1769                                  	push dx
  1770                                  	push ax
  1771                                  	mov dl, al
  1772                                  	mov ah, 2
  1773                                  	int 21h
  1774                                  	pop ax
  1775                                  	pop dx
  1776                                  	retn
  1777                                  
  1778                                  
  1779                                  		; Display number in ax decimal
  1780                                  		;
  1781                                  		; INP:	ax = number
  1782                                  		; OUT:	displayed using Int21.02
  1783                                  		; CHG:	none
  1784                                  init2_disp_ax_dec:			; ax (no leading zeros)
  1785                                  		push bx
  1786                                  		xor bx, bx
  1787                                  .pushax:
  1788                                  		push dx
  1789                                  		push ax
  1790                                  		or bl, bl
  1791                                  		jz .nobl
  1792                                  		sub bl, 5
  1793                                  		neg bl
  1794                                  .nobl:
  1795                                  		push cx
  1796                                  		mov cx, 10000
  1797                                  		call .divide_out
  1798                                  		mov cx, 1000
  1799                                  		call .divide_out
  1800                                  		mov cx, 100
  1801                                  		call .divide_out
  1802                                  		mov cl, 10
  1803                                  		call .divide_out
  1804                                  							; (Divisor 1 is useless)
  1805                                  		add al, '0'
  1806                                  		call init2_disp_al
  1807                                  		pop cx
  1808                                  		pop ax
  1809                                  		pop dx
  1810                                  		pop bx					; Caller's register
  1811                                  		retn
  1812                                  
  1813                                  
  1814                                  		; INP:	ax = number
  1815                                  		;	cx = divisor
  1816                                  		; OUT:	ax = remainder of operation
  1817                                  		;	result displayed
  1818                                  .divide_out:
  1819                                  		push dx
  1820                                  		xor dx, dx
  1821                                  		div cx				; 0:ax / cx
  1822                                  		push dx				; remainder
  1823                                  		dec bl
  1824                                  		jnz .nobl2
  1825                                  		or bh, 1
  1826                                  .nobl2:
  1827                                  		or bh, al
  1828                                  		jz .leadingzero
  1829                                  		add al, '0'
  1830                                  		call init2_disp_al		; display result
  1831                                   .leadingzero:
  1832                                  		pop ax				; remainder
  1833                                  		pop dx
  1834                                  		retn
  1835                                  
  1836                                  
  1837                                  init2_msg:
  1838                                  %if _TEST_PROGRESS
  1839                                  .progress.1:		db "Info: 1"
  1840                                  .progress.1.length: equ $ - .progress.1
  1841                                  .progress.fail:		db "F"
  1842                                  .progress.fail.length: equ $ - .progress.fail
  1843                                  .progress.success:	db "S"
  1844                                  .progress.success.length: equ $ - .progress.success
  1845                                  .progress.linebreak:	db 13,10
  1846                                  .progress.linebreak.length: equ $ - .progress.linebreak
  1847                                  %endif
  1848                                  %if _WRITE_WRONG_FILE
  1849                                  .wrong_file_name:	asciz "WRONG.BIN"
  1850                                  .wrong_file_name2:	asciz "WRONG2.BIN"
  1851                                  %endif
  1852                                  .initial_error:	db "Error: Test program failed to decompress with full buffer."
  1853                                  .linebreak:	db 13,10
  1854                                  .initial_error.length: equ $ - .initial_error
  1855                                  .linebreak.length: equ $ - .linebreak
  1856                                  %if _DEBUG0
  1857                                  .rc:	db "Error: Failure code="
  1858                                  .rc.length: equ $ - .rc
  1859                                  %endif
  1860                                  %if _INCLUDE_UNCOMPRESSED
  1861                                  .initial_error_2:	db "Error: Test program decompressed wrongly with full buffer.",13,10
  1862                                  .initial_error_2.length: equ $ - .initial_error_2
  1863                                  .subsequent_error_2:	db "Error: Test program decompressed wrongly during test.",13,10
  1864                                  .subsequent_error_2.length: equ $ - .subsequent_error_2
  1865                                  %endif
  1866                                  .cmdline_error:	db "Error: Invalid command line input.",13,10
  1867                                  .cmdline_error.length: equ $ - .cmdline_error
  1868                                  .error_stdout:	_autodigits paras(_TEST_PROGRAM_DECOMPRESSED_SIZE 				+ (payload_end - payload) 				+ (init1_end - init1_start) 				+ ADDITIONAL_MEMORY 				)
  1873                                  		db 13,10
  1874                                  .error_stdout.length: equ $ - .error_stdout
  1875                                  
  1876                                  
  1877                                  		; Move paragraphs
  1878                                  		;
  1879                                  		; INP:	ax => source
  1880                                  		;	dx => destination
  1881                                  		;	cx = number of paragraphs
  1882                                  		; CHG:	-
  1883                                  		; OUT:	ax and dx unchanged
  1884                                  		; Note:	Doesn't work correctly on HMA; doesn't always wrap to LMA either.
  1885                                  		;	Do not provide a wrapped/HMA source or destination!
  1886                                  init2_movp:
  1887                                  	push cx
  1888                                  	push ds
  1889                                  	push si
  1890                                  	push es
  1891                                  	push di
  1892                                  
  1893                                  	cmp ax, dx		; source above destination ?
  1894                                  	ja .up			; yes, move up (forwards) -->
  1895                                  	je .return		; same, no need to move -->
  1896                                  	push ax
  1897                                  	add ax, cx		; (expected not to carry)
  1898                                  	cmp ax, dx		; end of source is above destination ?
  1899                                  	pop ax
  1900                                  	ja .down		; yes, move from top down -->
  1901                                  	; Here, the end of source is below-or-equal the destination,
  1902                                  	;  so they do not overlap. In this case we prefer moving up.
  1903                                  
  1904                                  .up:
  1905                                  	push ax
  1906                                  	push dx
  1907                                  .uploop:
  1908                                  	mov ds, ax
  1909                                  	mov es, dx
  1910                                  	xor di, di
  1911                                  	xor si, si		; -> start of segment
  1912                                  	sub cx, 1000h		; 64 KiB left ?
  1913                                  	jbe .uplast		; no -->
  1914                                  	push cx
  1915                                  	mov cx, 10000h /2
  1916                                  	rep movsw		; move 64 KiB
  1917                                  	pop cx
  1918                                  	add ax, 1000h
  1919                                  	add dx, 1000h		; -> next segment
  1920                                  	jmp short .uploop	; proceed for more -->
  1921                                  .uplast:
  1922                                  	add cx, 1000h		; restore counter
  1923                                  	shl cx, 1
  1924                                  	shl cx, 1
  1925                                  	shl cx, 1		; *8, paragraphs to words
  1926                                  	rep movsw		; move last part
  1927                                  	pop dx
  1928                                  	pop ax
  1929                                  	jmp short .return
  1930                                  
  1931                                  .down:
  1932                                  	std			; _AMD_ERRATUM_109_WORKAROUND as below
  1933                                  .dnloop:
  1934                                  	sub cx, 1000h		; 64 KiB left ?
  1935                                  	jbe .dnlast		; no -->
  1936                                  	push ax
  1937                                  	push dx
  1938                                  	add ax, cx
  1939                                  	add dx, cx
  1940                                  	mov ds, ax		; -> 64 KiB not yet moved
  1941                                  	mov es, dx
  1942                                  	pop dx
  1943                                  	pop ax
  1944                                  	mov di, -2
  1945                                  	mov si, di		; moved from last word down
  1946                                  	push cx
  1947                                  	mov cx, 10000h /2
  1948                                  	rep movsw		; move 64 KiB
  1949                                  	pop cx
  1950                                  	jmp short .dnloop	; proceed for more -->
  1951                                  .dnlast:
  1952                                  	add cx, 1000h		; restore counter
  1953                                  	shl cx, 1
  1954                                  	shl cx, 1
  1955                                  	shl cx, 1		; *8, paragraphs to words
  1956                                  	mov di, cx
  1957                                  	dec di
  1958                                  	shl di, 1		; words to offset, -> last word
  1959                                  	mov si, di
  1960                                  	mov ds, ax
  1961                                  	mov es, dx		; first segment correct
  1962                                  
  1963                                  		; Refer to comment in init0_movp.
  1964                                  %if _AMD_ERRATUM_109_WORKAROUND
  1965                                  	jcxz @FF
  1966                                  	cmp cx, 20
  1967                                  	ja @FF
  1968                                  @@:
  1969                                  	movsw
  1970                                  	loop @B
  1971                                  @@:
  1972                                  %endif
  1973                                  	rep movsw		; move first part
  1974                                  	cld
  1975                                  .return:
  1976                                  	pop di
  1977                                  	pop es
  1978                                  	pop si
  1979                                  	pop ds
  1980                                  	pop cx
  1981                                  	retn
  1982                                  
  1983                                  
  1984                                  	align 16
  1985                                  
  1986                                  	strdef UNCOMPRESSED_FILE, "lDOSLOAD.BIN"
  1987                                  %if _INCLUDE_UNCOMPRESSED
  1988                                  payload_uncompressed:
  1989                                  	incbin _UNCOMPRESSED_FILE
  1990                                  .end:
  1991                                  	db 38
  1992                                  	align 16, db 38
  1993                                  %endif
  1994                                  init2_end:
  1995                                  %endif
  1996                                  
