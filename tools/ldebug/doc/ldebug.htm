<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
"http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=US-ASCII">
<title>lDebug manual</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0"></head>
<body>
<h1>lDebug manual</h1>
<ul>
<li><a href="#overview">1: Overview and highlights</a>
<ul>
<li><a href="#quickstart">1.1 Quick start for reading this manual</a></li>
<li><a href="#tips">1.2 Some tips for using the debugger</a></li>
</ul></li>
<li><a href="#news">2: News</a>
<ul>
<li><a href="#news-r6">2.1 Release 6 (future)</a></li>
<li><a href="#news-r5">2.2 Release 5 (2023-03-08)</a></li>
<li><a href="#news-r4">2.3 Release 4 (2022-03-08)</a></li>
<li><a href="#news-r3">2.4 Release 3 (2021-08-15)</a></li>
<li><a href="#news-r2">2.5 Release 2 (2021-05-05)</a></li>
<li><a href="#news-r1">2.6 Release 1 (2021-02-15) and earlier</a></li>
</ul></li>
<li><a href="#building">3: Building the debugger</a>
<ul>
<li><a href="#buildingcomponents">3.1 Components for building</a></li>
<li><a href="#buildingprocess">3.2 How to build</a></li>
<li><a href="#buildingoptions">3.3 Build options</a></li>
</ul></li>
<li><a href="#gettingstartedrelease">4: Getting started with the release</a></li>
<li><a href="#invoking">5: Invoking the debugger</a>
<ul>
<li><a href="#invoking-boot">5.1 Invoking the debugger in boot loaded mode</a></li>
<li><a href="#invoking-app">5.2 Invoking the debugger as an application</a></li>
<li><a href="#invoking-device">5.3 Invoking the debugger as a device driver</a></li>
<li><a href="#invoking-test">5.4 Invoking the test suite</a></li>
</ul></li>
<li><a href="#interface">6: Interface Reference</a>
<ul>
<li><a href="#interface-output">6.1 Interface Output</a></li>
<li><a href="#interface-input">6.2 Interface Input</a></li>
<li><a href="#interface-serial">6.3 Enabling serial I/O</a></li>
<li><a href="#interface-rdump">6.4 Register dumping</a></li>
<li><a href="#interface-mdump">6.5 Memory dumping</a></li>
<li><a href="#interface-disasm">6.6 Disassembly</a></li>
<li><a href="#interface-load">6.7 Loading the debuggee</a></li>
<li><a href="#interface-run">6.8 Running the debuggee</a></li>
<li><a href="#interface-help">6.9 Help</a></li>
</ul></li>
<li><a href="#debugging">7: Debugging the debugger itself</a>
<ul>
<li><a href="#debugging-init">7.1 Initialising the debuggable debugger</a></li>
</ul></li>
<li><a href="#parref">8: Parameter Reference</a>
<ul>
<li><a href="#parnumber">8.1 Number</a></li>
<li><a href="#paraddress">8.2 Address</a></li>
<li><a href="#parrange">8.3 Range</a></li>
<li><a href="#parrangelines">8.4 Range with <code>LINES</code> keyword allowed</a></li>
<li><a href="#parlist">8.5 List</a></li>
<li><a href="#parlistorrange">8.6 List or range</a></li>
<li><a href="#parkeyword">8.7 Keyword</a></li>
<li><a href="#parindex">8.8 Index</a></li>
<li><a href="#parsegment">8.9 Segment</a></li>
<li><a href="#parbreakpoints">8.10 Breakpoint</a></li>
<li><a href="#parlabel">8.11 Label</a></li>
<li><a href="#parport">8.12 Port</a></li>
<li><a href="#pardrive">8.13 Drive</a></li>
<li><a href="#parsector">8.14 Sector</a></li>
<li><a href="#parcond">8.15 Condition</a></li>
<li><a href="#parregister">8.16 Register</a></li>
<li><a href="#parcommand">8.17 Command</a></li>
<li><a href="#parid">8.18 ID</a></li>
</ul></li>
<li><a href="#exprref">9: Expression Reference</a>
<ul>
<li><a href="#exprliteral">9.1 Literals</a></li>
<li><a href="#exprstringliteral">9.2 String literals</a></li>
<li><a href="#exprvariable">9.3 Variables</a></li>
<li><a href="#exprindirection">9.4 Indirection</a></li>
<li><a href="#exprparens">9.5 Parentheses</a></li>
<li><a href="#exprlinear">9.6 <code>LINEAR</code> keyword</a></li>
<li><a href="#exprdesctype">9.7 <code>DESCTYPE</code> keyword</a></li>
<li><a href="#exprvaluein">9.8 <code>VALUE IN</code> construct</a></li>
<li><a href="#exprconditional">9.9 Conditional <code>?? ::</code> construct</a></li>
<li><a href="#exprsideeffects">9.10 Expression side effects</a></li>
</ul></li>
<li><a href="#cmdref">10: Command Reference</a>
<ul>
<li><a href="#cmdautorepeat">10.1 Empty command - Autorepeat</a></li>
<li><a href="#cmdquestionmark">10.2 ? command</a></li>
<li><a href="#cmdcolon">10.3 : prefix - GOTO label</a></li>
<li><a href="#cmdimmasm">10.4 . (dot) command - Immediate assembler</a></li>
<li><a href="#cmda">10.5 A command - Assemble</a></li>
<li><a href="#cmdb">10.6 B commands - Permanent breakpoints</a></li>
<li><a href="#cmdbu">10.7 BU command - Break Upwards</a></li>
<li><a href="#cmdboot">10.8 BOOT commands - Boot loading support</a></li>
<li><a href="#cmdc">10.9 C command - Compare memory</a></li>
<li><a href="#cmdd">10.10 D command - Dump memory</a></li>
<li><a href="#cmddi">10.11 DI command - Dump Interrupts</a></li>
<li><a href="#cmddm">10.12 DM command - Dump MCBs</a></li>
<li><a href="#cmddstring">10.13 DZ/D$/D#/DW# commands - Dump strings</a></li>
<li><a href="#cmddesc">10.14 D.A/D.D/D.B/D.L/D.T commands - Descriptor modification</a></li>
<li><a href="#cmde">10.15 E command - Enter memory</a></li>
<li><a href="#cmdf">10.16 F command - Fill memory</a></li>
<li><a href="#cmdg">10.17 G command - Go</a></li>
<li><a href="#cmdgoto">10.18 GOTO command - Control flow branch</a></li>
<li><a href="#cmdh">10.19 H command - Hexadecimal add/subtract values</a></li>
<li><a href="#cmdi">10.20 I command - Input from port</a></li>
<li><a href="#cmdif">10.21 IF command - Control flow conditional</a></li>
<li><a href="#cmdinstall">10.22 INSTALL command - Install optional features</a></li>
<li><a href="#cmdlp">10.23 L command - Load Program</a></li>
<li><a href="#cmdls">10.24 L command - Load Sectors</a></li>
<li><a href="#cmdm">10.25 M command - Move memory</a></li>
<li><a href="#cmdmc">10.26 M command - Set Machine mode</a></li>
<li><a href="#cmdn">10.27 N command - Set program Name</a></li>
<li><a href="#cmdo">10.28 O command - Output to port</a></li>
<li><a href="#cmdp">10.29 P command - Proceed</a></li>
<li><a href="#cmdq">10.30 Q command - Quit</a></li>
<li><a href="#cmdqa">10.31 QA command - Quit attached process</a></li>
<li><a href="#cmdqb">10.32 QB command - Quit and break</a></li>
<li><a href="#cmdr">10.33 R command - Display and set Register values</a></li>
<li><a href="#cmdrm">10.34 RM command - Display MMX Registers</a></li>
<li><a href="#cmdrn">10.35 RN command - Display FPU Registers</a></li>
<li><a href="#cmdrx">10.36 RX command - Toggle 386 Register Extensions display</a></li>
<li><a href="#cmdrv">10.37 RV command - Show sundry variables</a></li>
<li><a href="#cmdrvv">10.38 RVV command - Show nonzero user-defined variables</a></li>
<li><a href="#cmdrvm">10.39 RVM command - Show debugger segments</a></li>
<li><a href="#cmdrvp">10.40 RVP command - Show process information</a></li>
<li><a href="#cmdrvd">10.41 RVD command - Show device information</a></li>
<li><a href="#cmds">10.42 S command - Search memory</a></li>
<li><a href="#cmdsleep">10.43 SLEEP command</a></li>
<li><a href="#cmdt">10.44 T command - Trace</a></li>
<li><a href="#cmdtm">10.45 TM command - Show or set Trace Mode</a></li>
<li><a href="#cmdtsr">10.46 TSR command - Enter TSR mode</a></li>
<li><a href="#cmdu">10.47 U command - Disassemble</a></li>
<li><a href="#cmduninstall">10.48 UNINSTALL command - Uninstall optional features</a></li>
<li><a href="#cmdv">10.49 V command - Video screen swapping</a></li>
<li><a href="#cmdwp">10.50 W command - Write Program</a></li>
<li><a href="#cmdws">10.51 W command - Write Sectors</a></li>
<li><a href="#cmdx">10.52 X commands - Expanded Memory (EMS) commands</a></li>
<li><a href="#cmdy">10.53 Y command - Run script file</a></li>
<li><a href="#cmdz">10.54 Z commands - Symbolic debugging support</a></li>
</ul></li>
<li><a href="#varref">11: Variable Reference</a>
<ul>
<li><a href="#varregisters">11.1 Registers</a></li>
<li><a href="#varmmx">11.2 MMX registers - MMxy</a></li>
<li><a href="#varoptions">11.3 Options</a></li>
<li><a href="#varcounts">11.4 Default step counts</a></li>
<li><a href="#varlengths">11.5 Default lengths</a></li>
<li><a href="#varlimits">11.6 Limits</a></li>
<li><a href="#varreturncodes">11.7 Return Codes</a></li>
<li><a href="#varaddresses">11.8 Addresses</a></li>
<li><a href="#vario">11.9 I/O configuration</a></li>
<li><a href="#varserial">11.10 Serial configuration</a></li>
<li><a href="#vartimer">11.11 Timer configuration</a></li>
<li><a href="#vardebug1">11.12 _DEBUG1 variables</a></li>
<li><a href="#vardebug3">11.13 _DEBUG3 variables</a></li>
<li><a href="#varyy">11.14 Y command variables</a></li>
<li><a href="#varv">11.15 V variables - Variables with user-defined purpose</a></li>
<li><a href="#varprocess">11.16 PSP variables</a></li>
<li><a href="#varsr">11.17 SR variables - Search Results</a></li>
<li><a href="#varaccess">11.18 Access variables</a></li>
<li><a href="#varmachine">11.19 Machine type variables</a></li>
<li><a href="#varlfsr">11.20 LFSR variables</a></li>
<li><a href="#varri">11.21 RIxxy - Real 86 Mode Interrupt vectors</a></li>
<li><a href="#varfldot">11.22 FL.xF - Flag status</a></li>
<li><a href="#varhhresult">11.23 HHRESULT - H command result</a></li>
<li><a href="#varint8ctrl">11.24 INT8CTRL - Interrupt 8 Control pressed detection time</a></li>
<li><a href="#vardevice">11.25 Device mode variables</a></li>
<li><a href="#varqqcode">11.26 QQCODE - Q command termination return code</a></li>
<li><a href="#vartermcode">11.27 TERMCODE - Debuggee termination return code</a></li>
</ul></li>
<li><a href="#intref">12: Interrupt Reference</a>
<ul>
<li><a href="#intmandatory">12.1 Mandatory interrupt hooks</a></li>
<li><a href="#intserial">12.2 Serial interrupt</a></li>
<li><a href="#int2F">12.3 Interrupt 2Fh - Multiplex (DPMI entrypoint)</a></li>
<li><a href="#int8">12.4 Interrupt 8 - Timer</a></li>
<li><a href="#int2D">12.5 Interrupt 2Dh - Alternate Multiplex Interrupt</a></li>
</ul></li>
<li><a href="#serviceref">13: Service Reference</a>
<ul>
<li><a href="#service10">13.1 Interrupt 10h</a></li>
<li><a href="#service16">13.2 Interrupt 16h</a></li>
<li><a href="#service2F">13.3 Interrupt 2Fh</a></li>
<li><a href="#service12">13.4 Interrupt 12h</a></li>
<li><a href="#servicepm31">13.5 Protected Mode Interrupt 31h</a></li>
<li><a href="#servicepm2F">13.6 Protected Mode Interrupt 2Fh</a></li>
<li><a href="#servicepm21">13.7 Protected Mode Interrupt 21h</a></li>
<li><a href="#servicepm25">13.8 Protected Mode Interrupt 25h</a></li>
<li><a href="#servicepm26">13.9 Protected Mode Interrupt 26h</a></li>
<li><a href="#serviceE6">13.10 Interrupt E6h</a></li>
<li><a href="#service15">13.11 Interrupt 15h</a></li>
<li><a href="#service13">13.12 Interrupt 13h</a></li>
<li><a href="#service19">13.13 Interrupt 19h</a></li>
<li><a href="#service2D">13.14 Interrupt 2Dh</a></li>
<li><a href="#service25">13.15 Interrupt 25h</a></li>
<li><a href="#service26">13.16 Interrupt 26h</a></li>
<li><a href="#service21">13.17 Interrupt 21h</a></li>
<li><a href="#service67">13.18 Interrupt 67h</a></li>
</ul></li>
<li><a href="#cmdhelp">14: Command help</a>
<ul>
<li><a href="#cmdhelp-ldebug">14.1 lDebug help</a></li>
<li><a href="#cmdhelp-instsect">14.2 INSTSECT help</a></li>
</ul></li>
<li><a href="#helptopics">15: Online help pages</a>
<ul>
<li><a href="#helpmain">15.1 ? - Main online help</a></li>
<li><a href="#helpr">15.2 ?R - Registers</a></li>
<li><a href="#helpf">15.3 ?F - Flags</a></li>
<li><a href="#helpc">15.4 ?C - Conditionals</a></li>
<li><a href="#helpe">15.5 ?E - Expressions</a></li>
<li><a href="#helpv">15.6 ?V - Variables</a></li>
<li><a href="#helpre">15.7 ?RE - R Extended</a></li>
<li><a href="#helprun">15.8 ?RUN - Run keywords</a></li>
<li><a href="#helpoptions">15.9 ?OPTIONS - Options pages</a></li>
<li><a href="#helpo">15.10 ?O - Options</a></li>
<li><a href="#helpboot">15.11 ?BOOT - Boot loading</a></li>
<li><a href="#helpbuild">15.12 ?BUILD - lDebug build (only revisions)</a></li>
<li><a href="#helpb">15.13 ?B - lDebug build (with options)</a></li>
<li><a href="#helpx">15.14 ?X - EMS commands</a></li>
<li><a href="#helpsource">15.15 ?SOURCE - lDebug source reference</a></li>
<li><a href="#helpl">15.16 ?L - lDebug license</a></li>
</ul></li>
<li><a href="#additionalusageconditions">16: Additional usage conditions</a>
<ul>
<li><a href="#auc-brieflz">16.1 BriefLZ depacker usage conditions</a></li>
<li><a href="#auc-lz4">16.2 LZ4 depacker usage conditions</a></li>
<li><a href="#auc-snappy">16.3 Snappy depacker usage conditions</a></li>
<li><a href="#auc-exomizer">16.4 Exomizer depacker usage conditions</a></li>
<li><a href="#auc-x">16.5 X compressor depacker usage conditions</a></li>
<li><a href="#auc-heatshrink">16.6 Heatshrink depacker usage conditions</a></li>
<li><a href="#auc-lzd">16.7 Lzd usage conditions</a></li>
<li><a href="#auc-lzo">16.8 LZO depacker usage conditions</a></li>
<li><a href="#auc-lzsa2">16.9 LZSA2 depacker usage conditions</a></li>
<li><a href="#auc-apl">16.10 aPLib depacker usage conditions</a></li>
<li><a href="#auc-bzp">16.11 bzpack depacker usage conditions</a></li>
</ul></li>
<li><a href="#SourceControlRevisionID">Source Control Revision ID</a></li>
</ul>

<p>
2020 by C. Masloch. Usage of the works is permitted provided that this instrument is retained with the works, so that any entity that uses the works is notified of this instrument. DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
</p>
<p>
This document has been compiled on 2023-03-23.
</p>
<h2><a name="overview"></a><a name="S1"></a>1: Overview and highlights <a href="#overview">#</a></h2>
<p>
lDebug is a 86-DOS debugger based on the MS-DOS Debug clone FreeDOS Debug. It features DPMI client support for 32-bit and 16-bit segments, a 686-level assembler and disassembler, an expression evaluator, an InDOS and a bootloaded mode, script file reading, serial port I/O, permanent breakpoints, conditional tracing, buffered tracing, and auto-repetition of some commands. There is also a symbolic debugging option being developed.
</p>
<h3><a name="quickstart"></a><a name="S1.1"></a>1.1 Quick start for reading this manual <a href="#quickstart">#</a></h3>
<ul><li>
The interface reference explains the basics of the debugger's interface and lists some common commands.
</li>
<li>
The parameter reference lists the types of parameters used by the available commands.
</li>
<li>
The command reference describes most commands in detail.
</li>
<li>
The expression reference details how numeric parameters are parsed by the expression evaluator.
</li>
<li>
The variable reference lists a subset of the debugger's variables and what they can be used for.
</li>
<li>
The interrupt reference lists what interrupt hooks the debugger sets up.
</li>
<li>
The service reference lists what services are called by the debugger, which may be useful for developers of the debugger, or of kernels, ROM-BIOSes, or DPMI hosts.
</li>
<li>
The online help pages provide some additional descriptions not found elsewhere in the manual, as well as overviews of many different topics.
</li>
<li>
The command help lists most of the switches and parameters accepted by the debugger and the instsect program.
</li>
<li>
The news lists an overview of changes since prior releases of lDebug.
</li>
<li>
Invoking the debugger states how to start the debugger, either bootloaded, as a device driver, as an application, or through the test suite.
</li>
<li>
Building the debugger lists components, build options, and instructions on how to build.
</li>
<li>
Debugging the debugger itself lists some considerations for working with CDebug or DDebug as a debuggee.
</li>
<li>
The additional usage conditions section lists attribution and licenses for the various depackers that can be used for the compressed debugger executable.
</li>
<li>
Source Control Revision ID gives the Mercurial hash of the manual's source revision, and links to that revision in ecm's repository.
</li>
</ul>
<p>
For a tour, definitely start with the interface reference. To help invoke the debugger read the section on &#8216;Invoking the debugger as an application&#8217;. It may help to read the manual while testing the debugger on another terminal. Use the main page of the online help as a reference to what is possible, then check the command reference for details. To explain what parameter types are used refer to the parameter reference. For how to calculate refer to the expression reference.
</p>
<p>
Reconfiguring the debugger can be done using variables, including the <code>Debugger Assembler Options</code> (DAO) and the <code>Debugger Common Options</code> (DCO) 1 to 6. Use the variable reference and the online help pages on the options for those. Change variables using the R commands, such as &#8216;<code>r dco or= 800</code>&#8217; or &#8216;<code>r ior := #50</code>&#8217;.
</p>
<h3><a name="tips"></a><a name="S1.2"></a>1.2 Some tips for using the debugger <a href="#tips">#</a></h3>
<ul><li>
Use the <code>GT</code> or <code>GNT</code> commands to skip past conditionals
</li>
<li>
Use <code>G ABO</code> to skip past calls or loops if <code>P</code> would not work
</li>
<li>
T, P, G, U, and D commands have autorepeat to repeat the same command if an empty line (only blanks) is entered after they return control to the debugger prompt
</li>
<li>
The <code>POINTER</code> type expression allows using a 32-bit number as a 16:16 segmented address whereever an address parameter is parsed
</li>
<li>
The assembler can access the expression evaluator by surrounding an expression with parentheses &#8216;<code>(...)</code>&#8217;
</li>
<li>
The A, E, D, and U commands write to the AAO, AEO, ADO, and AUO variables to point past the end of their last read or write
</li>
<li>
The ABO variable points past the last instruction disassembled by an R command
</li>
<li>
Permanent breakpoints can be set up using the B commands, including as pass points or conditionally
</li>
<li>
The G command can repeat the prior list by specifying the <code>AGAIN</code> keyword as the first breakpoint, and can save to the list without actually executing the debuggee by ending the breakpoint list with a <code>REMEMBER</code> keyword
</li>
<li>
T, P, and G commands can change either the instruction pointer only or also the code segment using an equals-sign-prefixed address as the first prameter. The TTEST command will change the CS:IP without actually executing anything.
</li>
<li>
The machine type can be viewed or changed with an M command. Assembly and disassembly will note if a required machine level is absent according to the machine type.
</li>
<li>
DCO option 800 enables the line editor and input history even when using DOS for input
</li>
<li>
DCO6 option 200 will use the ROM-BIOS for output instead of DOS, including for register change highlighting
</li>
<li>
DCO option 8 will act as if the debugger is always running with the InDOS flag set, avoiding DOS calls from the debugger itself
</li>
<li>
The <code>INSTALL AMIS</code> and <code>INSTALL TIMER</code> commands can be used to provide the debugger's AMIS interface and hook the timer interrupt
</li>
<li>
The <code>DW ss:sp</code> command is useful to view the current stack formatted as words
</li>
<li>
The debugger is largely capitalisation-insensitive
</li>
<li>
The LFSR variable allows to generate a stream of pseudo-random numbers
</li>
<li>
The DIM command shows MCB names of blocks pointed to by interrupt vectors, while DIL (or DIML) will query AMIS multiplexers for their interrupt entrypoints to find hidden chains
</li>
<li>
Long output of many commands is paged by default, displaying a &#8216;<code>[more]</code>&#8217; prompt that pauses the output until a keypress is received
</li>
<li>
The VALUE IN construct allows to match one numeric value or range against many match values or match ranges
</li>
<li>
A breakpoint can be set up on an interrupt handler by issuing for example &#8216;<code>BP NEW ptr ri2Dp</code>&#8217;, if the interrupt handler is writeable
</li>
<li>
If given a single expression the H command displays the result as hexadecimal and as decimal
</li>
<li>
Decimal numbers can be entered with a <code>#</code> prefix, and binary with <code>2#</code>. Character codes can be used as numbers with <code>#"..."</code>
</li>
<li>
Script files can be run with the Y command
</li>
<li>
A program can be traced until it tries to modify interrupts 1 or 3 using &#8216;<code>tp FFFFF while ! value from linear 0:1*4 length 3*4 in writing silent</code>&#8217;. Add a conditional breakpoint like &#8216;<code>bp new ptr ri21p when value ax in 2501, 2503</code>&#8217; beforehand to intercept DOS calls to change these interrupts
</li>
<li>
If at its entrypoint and you want to return from a near function, use &#8216;<code>g word [ss:sp]</code>&#8217;. For a 16-bit far or interrupt function use &#8216;<code>g ptr [ss:sp]</code>&#8217;
</li>
<li>
In a loop with several exit conditons, trace with T or P and accumulate exits with &#8216;<code>G AGAIN address REMEMBER</code>&#8217; (insert an offset or <code>(NOT)TAKEN</code> keywords for the address), then finally run &#8216;<code>G AGAIN</code>&#8217;
</li>
<li>
The L and W commands for reading and writing sectors accept drive letters for their second parameter, specified with a trailing colon
</li>
<li>
The RV, RVM, RVP, and RVD commands will show some information on modes, memory segment locations, processes, and device headers
</li>
<li>
RX toggles the 32-bit register view for the R command
</li>
<li>
The RE buffer can contain many different commands, which are run on RE commands or when T, P, or G initiate a register dump
</li>
<li>
The DCO options are described in the full <code>?O</code> help page as well as individual pages like <code>?O6</code> for DCO6
</li>
<li>
Not sure what version of lDebug is running? The command <code>?BUILD</code> displays the description and source control revision IDs. The description includes a build date or release number.
</li>
<li>
Setting a breakpoint at the current instruction pointer with the G command will trace past this instruction once then write the breakpoint and run at full speed
</li>
<li>
There's a TSR mode converting the application-mode debugger into a resident program, allowing to debug the debugger's parent process
</li>
<li>
The symbolic F register for the R command allows dumping and modifying the flags using the abbreviated flag states
</li>
<li>
The R command can modify variables using binary operators suffixed by an equal sign, both on the command line of the R command as well as after the R variable prompt
</li>
<li>
By adding a trailing dot after a variable name for the R command, a variable's value can be inspected without bringing up a variable prompt that requires submitting a second input line
</li>
</ul>
<h2><a name="news"></a><a name="S2"></a>2: News <a href="#news">#</a></h2>
<h3><a name="news-r6"></a><a name="S2.1"></a>2.1 Release 6 (future) <a href="#news-r6">#</a></h3>
<h3><a name="news-r5"></a><a name="S2.2"></a>2.2 Release 5 (2023-03-08) <a href="#news-r5">#</a></h3>
<ul><li>
Client PSP is now stored internally as a segment, even when lDebugX is in Protected Mode. DM command now shows this segment rather than a selector. (The PSPSEL variable can be read for a selector instead.)
</li>
<li>
RM command now accepts an optional size keyword
</li>
<li>
&#8216;<code>IF EXISTS R variable THEN</code>&#8217; command added
</li>
<li>
MMX support of the machine is re-detected after lDebugX switched modes
</li>
<li>
Fix: RM command and MMxy variable read and R MMxy variable write work now
</li>
<li>
Fix: In <code>/E+</code> mode a zero word is now pushed to the initial stack
</li>
<li>
dosemu2 <code>-dumb</code> mode now detected specifically when needed for register change highlighting to ROM-BIOS interrupt 10h
</li>
<li>
Fix: Bootloaded init could have corrupted part of its image during second relocation, if needed. (This case cannot occur during normal load at 200h:0 on a machine with 512 KiB or more of available LMA.)
</li>
<li>
Fix: Creating a process resets the DTA to PSP:80h
</li>
<li>
Fix: &#8216;<code>R VD</code>&#8217; accesses VD variable, rather than run &#8216;<code>RVD</code>&#8217; command
</li>
<li>
Improvements to support NEC V20 machine
</li>
<li>
Add CIP and CSP variables, use CIP for EXECUTING keyword
</li>
<li>
Fix error handling if S command search area is shorter than search mask
</li>
<li>
IOCLINE variable added to support display on the HP 95LX's narrow screen
</li>
<li>
Fix: Stack access variables set wrongly for interrupt instructions
</li>
<li>
Fix: In DPMI protected mode QA or Q command sometimes would not work
</li>
<li>
Immediate assembler merged. Currently defaults to disabled at build time.
</li>
<li>
Bootable lDebug: Allow to access small FAT32 file system (less than 64 Ki clusters)
</li>
<li>
Add timer configuration variables and default the SDELTALIMIT variable to 5 to improve wait performance
</li>
<li>
Serial I/O: Add option to always do EOI after calling downlink for IRQ sharing. Autodetect in KEEP prompt if this option must be used or if IRQ sharing must not be used.
</li>
<li>
Query patch support for ldosboot iniload can be used to set the BOOTUNITFLx variable for the debugger load unit
</li>
<li>
Change: DCO6 option 200h only makes output go to ROM-BIOS, new DCO6 option 0100_0000h makes all Input/Output use ROM-BIOS. (The 200h flag still allows to read script files from DOS.)
</li>
<li>
lDebugX: Fix, allow to use TSR command in PM (expected a segment where a selector was read)
</li>
<li>
lDebugX: Fix PSP variables and TSR command expecting higher limit in PM (getsegmented now sets limit 0)
</li>
<li>
lDebugX: Fix getexpression not preserving the scratch selector
</li>
<li>
Add FL.xF variables to read flag status in expressions, eg FL.CF which reads as 1 if CY and 0 if NC
</li>
<li>
When creating an empty process (eg after QA command) also write the current command line tail to it (instead of the debugger's internal N buffers)
</li>
<li>
Display amount of ancestors for the symsnip revision ID
</li>
<li>
A pair of 32-bit E command fixes
</li>
<li>
Write AES:AEO (e_addr) in E command and allow E command without an address
</li>
<li>
lDebugX: Add DESCTYPE keyword in expressions
</li>
<li>
lDebugX: Add descriptor modification commands and DARESULT variable, refer to <a href="#cmddesc">section 10.14</a>
</li>
<li>
Add XARESULT variable for XA command
</li>
<li>
Allow to share the serial IRQ so eg two lDebug instances can be connected to two serial ports that use the same IRQ, like COM2 and COM4 (both use IRQ #3 by default)
</li>
<li>
Do not simulate repeated string scan/compare instructions when disassembling them using the U command (only do so for R command disassembly)
</li>
<li>
Disassembler handles o32/o16 OSIZE prefixes as belonging to push and pop with segregs, instead of displaying the prefix as &#8216;<code>unused</code>&#8217;.
</li>
<li>
If simulation of repeated string scan/compare instructions is disabled in DAO then the access variables will now be set up assuming a count of 1, rather than the maximum possible count.
</li>
<li>
Add convenience entrypoints for debuggable mode at CODE:1, CODE2:0, and CODE2:1. The offset 0 entrypoints will return to the main command loop, called &#8216;<code>cmd3</code>&#8217;. The offset 1 entrypoints will additionally display a linebreak.
</li>
<li>
Allow switching lCDebugX to debuggable mode upon putrunint and allow running a breakpoint early in putrunint.
</li>
<li>
Add AMIS private function 33h, provided by lDebugX by default and can be used by lDDebugX/lCDebugX by default
</li>
<li>
Add INSTALL and UNINSTALL commands
</li>
<li>
Allow to specify length of D command with LINES keyword
</li>
<li>
Add DEFAULTDLEN, DEFAULTDLINES, DEFAULTULEN, and DEFAULTULINES variables to modify default sizes of D and U commands
</li>
<li>
Display long numeric constants with underscore separators for readability in online help pages and documentation
</li>
<li>
Allow to disable disassembler memory access for referenced memory and repeated string instruction simulation, using four new DAO flags
</li>
<li>
Change HP 95LX 40-column friendly mode support in the disassembler to use two DAO flags rather than two DCO6 flags (one of which was shared)
</li>
<li>
Allow to specify variable RIxP/S/O/L with x as a single-digit hexadecimal number
</li>
<li>
Bugfix: Allow operators between ?? and :: in a ternary operator expression for H command
</li>
<li>
Allow to specify <code>SILENT</code> keyword followed by a number before the S command's range or list, display only up to a certain amount of results
</li>
<li>
Add CLR operator, bitwise AND with the bitwise NOT of the right hand operand. Precedence above bitwise AND.
</li>
<li>
Bugfix: Absolute value operator <code>?</code> should always give its result an unsigned type
</li>
<li>
Allow switching lCDebugX to debuggable mode upon debugger exception and allow running a breakpoint early or late in debugger exception.
</li>
<li>
Add debugger exception areas to display the cause of a memory access which may fault in the debugger. Also adds a linebreak for eg referenced memory reads to work in tandem with the partial disassembler output. (Idea from FreeDOS Debug/X, though there it only does a linebreak and implements it differently.)
</li>
<li>
Bugfix: Disassemble mov with segreg and memory operand always with m16, ignoring the operand size selected. In assembler never emit an osize prefix and reject an explicit <code>dword</code> size keyword.
</li>
<li>
In disassembler display instruction and referenced memory address before accessing memory, so partial output is displayed in case a fault occurs in the debugger (FreeDOS Debug/X pick)
</li>
<li>
Document side effects of expression evaluator
</li>
<li>
Bugfix, allow all valid address parameter formats for the source address of an M move memory command (suggested by FreeDOS Debug/X)
</li>
<li>
Add AMIS private function 31h to instruct lDebugX to try to install its DPMI hook, make use of this in lDDebugX and lCDebugX
</li>
<li>
Add descriptions of BOOT commands to manual
</li>
<li>
Fix HIDDEN= keyword for BOOT READ/WRITE with partition specified, add HIDDENADD= keyword to modify rather than replace hidden sectors
</li>
<li>
Fix a bug in BOOT PROTOCOL= command that could disallow use of ENTRY and BPB parameters if running a non-DPMI build on a 386+ machine
</li>
<li>
Avoid faults in the debugger if a code selector with a low limit gets used for writing, eg by A or E commands
</li>
<li>
Fix bug setting wrong debuggee CS limit if _DUALCODE build
</li>
<li>
Add variables DSTACKSEG/SEL, DENTRYSEG/SEL, DCODE1/2SEG/SEL, DAUXBUFSEG/SEL, DHISBUFSEG/SEL, DSCRATCHSEL, DSYM1/2SEL (selector variables only for lDebugX, symsels only for symbolic lDebugX)
</li>
<li>
RVM command shows second code segment if _DUALCODE build
</li>
<li>
In C, E, and A commands in PM display original selector, not the scratch selector as replacement. Variable AAS is also affected by this.
</li>
<li>
Fix a bug with different selectors for lDebugX C and M commands (picked from FreeDOS Debug/X version 2.00)
</li>
<li>
Add taken keywords to address parsing, refer to <a href="#paraddress">section 8.2</a>. (This effectively adds the <code>GT</code> and <code>GNT</code> commands, as well as <code>TTEST=TAKEN</code> and <code>TTEST=NOTTAKEN</code> to change <code>(e)ip</code>.)
</li>
<li>
Bugfix: Allow entering double-slash to disable second file search for the BOOT PROTOCOL= command even if no command line follows
</li>
<li>
Application /C= switch and kernel command line will now skip leading blanks following a semicolon that is converted to a linebreak
</li>
<li>
Modify serial interrupt handler to pass on interrupt call if the PIC does not indicate an interrupt in the In-Service Register (ISR)
</li>
<li>
Add /M switch and interrupt 7, 0Ch, 0Dh hooks (for R86M exceptions), though build options for all of them are disabled by default
</li>
<li>
Add force BPB CHS geometry (4) and force LBA access (2) flags to the <code>BOOTUNITFLx</code> flag variables
</li>
<li>
Add switches /F and /E
</li>
<li>
Allow zero as parenthetical partition specification, allow to access partition <code>u(bootldpunit).(bootldppart)</code> if LDP is equal to FDA
</li>
<li>
Bugfix: Reading with BOOT command that crossed 64 KiB DMA boundary would copy too much or too little from the sector segment to target
</li>
<li>
Start of HP 95LX support (NEC disassembly repeat rules, narrower R/U/D command output, do not intercept interrupt 6)
</li>
<li>
Bugfix: Command <code>r f .</code> no longer displays garbage
</li>
<li>
Use test_high_limit to check segment limits, to determine whether to use 32-bit offsets in several spots
</li>
<li>
Disable calling XMS by Protected Mode far call by default
</li>
<li>
Add dual code segment support to allow code size beyond 64 KiB
</li>
<li>
Introduce dash prefix to commands to disable symbolic debugging features (no-op if not symbolic build)
</li>
<li>
Introduce U address LENGTH length LINES keyword to disassemble a number of lines rather than bytes
</li>
<li>
Add BS command for swapping permanent breakpoint indices
</li>
<li>
Document doubled delimiter quote mark for lists and string literals
</li>
<li>
Add string literal escaping of delimiter quote mark by doubling the delimiter quote mark
</li>
<li>
Add <code>/2</code> switch to use alternative video adapter for debugger output if available (pick from FreeDOS Debug)
</li>
<li>
Add <code>?OPTIONS</code> help page and specific pages for DCO1, DCO2, DCO3, DCO4, DCO6, DIF, and DAO
</li>
<li>
Set new <code>INICOMP_WINNER</code> build variable so as to use lzsa2 compression for current releases
</li>
<li>
Add <code>_DEBUG_COND</code> build option to allow toggling debug mode on and off at run time
</li>
<li>
Add <code>INT8CTRL</code> variable which contains number of ticks to wait for Control pressed entrypoint; set to zero to disable
</li>
<li>
Fix: Control-C also aborts RC command buffer execution
</li>
<li>
Fix: Default operand for <code>AAM</code> and <code>AAD</code> instructions is omitted in disassembler
</li>
<li>
Enhancement: If at the end of a stdin-redirected file the debugger cannot quit it will now enable InDOS mode and allow the user to control the debugger afterwards
</li>
<li>
Fix: Do not crash or loop infinitely upon encountering the end of a stdin-redirected file
</li>
<li>
Extract more source files from debug.asm
</li>
<li>
Allow appending <code>00</code> to a 16-bit register name to get a 32-bit value with the register value in the high word
</li>
<li>
Do not cause error from empty <code>/C=''</code> switch
</li>
<li>
Use ampersand prompt to display commands run from RC buffer
</li>
<li>
When loading a .BIN file set the process's command line buffer the same way as if loading a .COM file
</li>
<li>
Add heading hash links to every heading in the ldebug.htm manual (requires patched Halibut)
</li>
<li>
Add LFSR and LFSRTAP variables
</li>
<li>
Run unix2dos on ldebug.txt manual
</li>
<li>
Add QD (quit from device initialisation) and QC (quit from device in container MCB) commands
</li>
<li>
Add RVD command to display device header address and allocation size, as well as DEVICEHEADER and DEVICESIZE variables to read same
</li>
<li>
Bugfix, on pass or non-pass permanent breakpoint hit while running with T/TP/P command do not check WHILE condition
</li>
<li>
Add <code>PARAS</code> keyword to range length parsing, to multiply a count by 16 (size of a paragraph)
</li>
<li>
Bugfix, should allow to run if int 2Fh is invalid
</li>
<li>
Add device-driver mode to allow loading the debugger in CONFIG.SYS
</li>
<li>
Fix, do not crash if no UMCB but int 21.5803 works
</li>
<li>
Add V commands and /V command-line switch (video screen swapping)
</li>
<li>
Add <code>RIxxP</code> variables to read IVT entries in a way suitable to be used as <code>POINTER</code> type expressions
</li>
<li>
Work around FreeDOS kernel bug prior to 2022 May so as to fail on loading an empty executable
</li>
<li>
Fix, also use SDA manipulation to change current PSP when lDebugX is in Protected Mode
</li>
<li>
Add TERMCODE variable to read int 21.4D return after debuggee process terminated
</li>
<li>
Add QB command (run breakpoint late in debugger quit)
</li>
<li>
Add RVP command to display debugger mode and current debuggee and debugger process addresses
</li>
<li>
Add (D)PSP|PARENT|PRA|PSPSEL variables
</li>
<li>
Do not try to proceed past a call near immediate if the called functions consists of a <code>retf</code> instruction. (This supports a method for relocation, used for example by the debugger itself.)
</li>
<li>
Add command-line switch /B to run a breakpoint early
</li>
<li>
Add RC commands to view, change, and run RC buffer commands, re-using the command line buffer
</li>
<li>
Add <code>MACHX86</code> and <code>MACHX87</code> variables to read machine type
</li>
<li>
Allow M machine type command to parse an expression for the machine level number to set
</li>
<li>
Add QA command (try to terminate attached process)
</li>
<li>
Fix int 19h and debuggee termination handling. Int 19h in a DOS application mode now sets up registers to terminate the current process when running the debuggee again.
</li>
<li>
Add an lDebugX option DCO3 20_0000 to break on entering PM
</li>
<li>
Add an lDebugX option DCO3 10_0000 to use a 32-bit stack segment for the debugger itself (can help compatibility)
</li>
<li>
Fix so that semicolon is allowed as End Of Line in getrange
</li>
<li>
Fix <code>R size [mem] := val</code> causing a fault in the debugger if value ends in FFFFh
</li>
<li>
Implement <code>POINTER</code> types for handling a 32-bit expression as a 16:16 far pointer
</li>
<li>
Implement basic handling of expression types (signed/unsigned)
</li>
<li>
Revision IDs in <code>?BUILD</code> command list the amount of ancestors to help to compare revisions
</li>
<li>
Fix a segment addressing bug when switching modes (eg have a breakpoint in a DPMI allocation while the client is running in 86 Mode)
</li>
<li>
Fix some cases of detecting 32-bit offsets incorrectly
</li>
</ul>
<h3><a name="news-r4"></a><a name="S2.3"></a>2.3 Release 4 (2022-03-08) <a href="#news-r4">#</a></h3>
<ul><li>
Recognise LF as linebreak in serial input
</li>
<li>
E interactive mode fixes:
<ul><li>
Support LF to exit interactive mode (that is, accept Linux style linebreaks)
</li>
<li>
Support DEL sent by serial terminal
</li>
<li>
In lDebugX correctly handle 32-bit offsets
</li>
<li>
Also write new value when minus is entered
</li>
<li>
Honour blank for continue to next byte, CR or dot for exit interactive mode
</li>
<li>
Always correctly read value even if blank is entered afterwards
</li>
<li>
Improve E interactive mode compatibility across different input sources (like stdin file, script file, serial terminal)
</li>
<li>
Display linebreak upon new address displayed
</li>
</ul>

</li>
<li>
Fix: Register variable &#8216;<code>CH</code>&#8217; would be misparsed as &#8216;<code>CHAR</code>&#8217; type instead of the expected variable
</li>
<li>
Allow DI command to receive an IN value list similar to the y in a VALUE x IN y construct
</li>
<li>
Fix: Allow to set a breakpoint on an interrupt 21h handler and do not crash or corrupt state if the debuggee then terminates. (That is, do not call service 4Dh before restoring breakpoints.)
</li>
<li>
Fix: Too long N command could crash the debugger
</li>
<li>
Fix: DDebug TSR quit would not work correctly due to overflowing a rel8 <code>jmp</code>
</li>
<li>
Add R, M, and L key letters to DI command (always 86 Mode, show MCB names, follow AMIS interrupt lists)
</li>
<li>
Fix: <code>R WORD [memory]</code> prompt would not consider the size keyword as part of the input line prompt
</li>
<li>
Add AMIS private function 30h - Update IISP Header
</li>
<li>
In DI command in 86 Mode follow IISP headers
</li>
<li>
Add <code>QQCODE</code> variable
</li>
<li>
Add <code>BOOT[L|Y|S][UNIT|PART]</code> variables, <code>BOOTUNITFL(x)</code> variables
</li>
<li>
Add bzpack compression method
</li>
<li>
Drop DPS variable when building without DPMI support
</li>
<li>
Fix PSP variables in Protected Mode: PSP is always a 86 Mode segment, PSPS is a segment or selector, and PPR and PPI work
</li>
<li>
Add <code>HHRESULT</code> variable
</li>
</ul>
<h3><a name="news-r3"></a><a name="S2.4"></a>2.4 Release 3 (2021-08-15) <a href="#news-r3">#</a></h3>
<ul><li>
Add workaround with extra int 23h and int 22h handlers and raw mode-switching to use interrupt 21h service 0Ah in PM. DCO2 flag 800h clear by default.
</li>
<li>
Add TRYAMISNUM variable to try a specific AMIS multiplex number first
</li>
<li>
Add DCO4 flag 2 to allow disabling lDebugX's int 2Fh hook
</li>
<li>
Build option <code>_MEMREF_AMOUNT</code> enabled by default
</li>
<li>
mktables switches <code>direction</code> and <code>stackhinting</code> enabled by default
</li>
<li>
Fix DOS application script file reading to honour InDOS status
</li>
<li>
Fix H BASE= command with GROUP= sometimes displaying trailing garbage
</li>
<li>
Fix DDebugX hooking random PM interrupts
</li>
<li>
Fix trailing blanks in DI command
</li>
<li>
Added a number of automated acceptance tests
</li>
<li>
Add variable <code>AMISNUM</code> to read the multiplex number
</li>
<li>
Fix an old bug in the assembler that happened to make instructions like &#8216;<code>mov ax, 0</code>&#8217; fail to assemble now
</li>
<li>
Made interrupt 8 hook optional, default-off
</li>
<li>
Added optional, default-off interrupt 2Dh hook
</li>
<li>
Properly unhook interrupts utilising IISP header chains, if the debugger's interrupt handlers are reachable. Added DCO4 flags (upper 16 bits) to force unhooking if a handler is unreachable. If a handler is both unreachable and not forcibly unhooked then it stays hooked. The Q command fails in that case.
</li>
<li>
Fix to allow &#8216;<code>$</code>&#8217; prefix to segments in DebugX while in Real/Virtual 86 Mode
</li>
<li>
Debugger's 86 Mode entrypoints now use the IBM Interrupt Sharing Protocol header. (However, it is still assumed that the debugger <em>owns</em> the interrupt entrypoints.)
</li>
<li>
Add <code>WIDTH=</code> keyword handling to <code>H BASE=</code>
</li>
<li>
Introduce variables IOL and IOF to control how many levels of execution are cancelled by Control-C
</li>
<li>
Scripts with CR LF linebreaks at the end or after calling another script no longer cause superfluous empty lines to be processed
</li>
<li>
Control-C aborts script file reading that is in progress
</li>
<li>
Bugfix, when calling three nested levels of Y script files while bootloaded then the outermost script's already buffered content would not rewind properly
</li>
<li>
Fix so that Control-C from ROM-BIOS keypress buffer is consumed properly while reading script file, instead of looping forever
</li>
<li>
Check for Control-C in ROM-BIOS's circular keypress buffer, add variables IOS and IOE
</li>
<li>
Extend Control-C handling so RE buffer execution is aborted by it
</li>
<li>
Add a simple <code>BOOT DIR</code> command (SFN name only, attributes, size (using FAT+), datetime)
</li>
<li>
Add string literals <code>#"..."</code> to expression evaluator
</li>
<li>
Add <code>H BASE=</code> command
</li>
<li>
Add <code>merge</code> and <code>debug</code> switches to mktables. Both are default off for now. Merging means redundant operand list tails are merged.
</li>
<li>
Bugfix, accessing the variable SRC caused an infinite loop
</li>
<li>
LZMA-lzip depacker fixed to not use <code>cs xlatb</code>, as the segment override prefix may be ignored on CPUs below 386
</li>
<li>
Added conditional <code>?? ::</code> construct operator
</li>
<li>
Merged branch <code>uumemref</code> and made memrefs available in default branch. The build option <code>_MEMREF_AMOUNT</code> must be enabled to use them.
</li>
<li>
Memory access direction and stack hinting in the assembler and disassembler tables. Switches named <code>direction</code> and <code>stackhinting</code> to mktables program. (Default off for now.)
</li>
<li>
LINEAR term allowed in expressions
</li>
<li>
VALUE IN construct allowed in expressions
</li>
<li>
Commas are only allowed between expressions, no longer within expressions
</li>
<li>
If DCO2 flag 8000h is set during RE buffer execution and SILENT 1 was used do actually only display last RE output
</li>
</ul>
<h3><a name="news-r2"></a><a name="S2.5"></a>2.5 Release 2 (2021-05-05) <a href="#news-r2">#</a></h3>
<ul><li>
Documented SLEEP command
</li>
<li>
Line editing history for raw terminal/serial input (in a fixed segment of size 8 KiB currently)
</li>
<li>
Fix missing register dump after T/TP/P which ends up matching a non-pass non-hit breakpoint
</li>
<li>
Fix: Entering a literal as 3#102002022201221111211 or #4294967296 would overflow silently to zero instead of causing an error
</li>
<li>
Reset high words of EIP and ESP when trying to terminate client process
</li>
<li>
Add change highlighting to R register dump
</li>
<li>
Assembler internals: Allow ASM_ESCAPE usage when needed
</li>
<li>
If BL command is given an unused index do not display incorrect WHEN
</li>
<li>
Reset segment registers when trying to terminate client process
</li>
<li>
Handle unusual SIB bytes correctly in P command's disassembly
</li>
<li>
Bugfix, Y script file called by another Y script file would turn quiet
</li>
<li>
Bugfix, if permanent breakpoint WHEN condition was in use then the wrong index and ID would be displayed in the pass/hit message
</li>
<li>
Acknowledge IRQ to secondary PIC too if applicable (if using a high IRQ for the serial I/O interrupt)
</li>
<li>
Bugfix, in BOOT commands do not prepend a word to the auxbuff anymore
</li>
<li>
Only create manual in HTML, text, and PDF formats
</li>
<li>
Add files doc/fdbuild.txt and doc/LDEBUG.LSM for FreeDOS packages
</li>
<li>
BOOT: work around qemu bug with &#8216;<code>LOOPNZ</code>&#8217;
</li>
<li>
BOOT: retry CHS reads up to 16 times
</li>
<li>
Add instsect and lDebug command help to manual
</li>
<li>
Expression evaluator allows &#8216;<code>OR=</code>&#8217; as synonym for &#8216;<code>|=</code>&#8217; (especially useful if shell does not allow specifying pipe symbol for /C)
</li>
<li>
Assembler: Allow specifying &#8216;<code>LOOPxx destination, (E)CX</code>&#8217; as in NASM instruction reference to specify address size
</li>
<li>
For assembler allow specifying &#8216;<code>INT BYTE 3</code>&#8217; to get CDh encoding and display it this way in disassembler
</li>
<li>
Only adjust offset saved in PSP's SPSAV variable if it points to our stack
</li>
<li>
In assembler do not allow sizeless memory operand when immediate matches IMMS8 (eg &#8216;<code>add [100], 12</code>&#8217;)
</li>
</ul>
<h3><a name="news-r1"></a><a name="S2.6"></a>2.6 Release 1 (2021-02-15) and earlier <a href="#news-r1">#</a></h3>
<ul><li>
&#8216;<code>G REMEMBER</code>&#8217; command to work with the saved temporary breakpoint list
</li>
<li>
WHEN conditions for permanent breakpoints
</li>
<li>
RIxxO/S/L variables (read-only view of IVT entry)
</li>
<li>
3BYTE type for &#8216;<code>R var</code>&#8217; and indirection in expression evaluator
</li>
<li>
In disassembler handle unusual SIB byte contents correctly
</li>
<li>
IDs for listing permanent breakpoints
</li>
<li>
In disassembler correctly dump far memory operands, double memory operands (BOUND), and do a32 addressing
</li>
<li>
Add &#8216;<code>S range REVERSE</code>&#8217; command
</li>
<li>
Fix corner case of S command: The commands &#8216;<code>f 100 l 10 0</code>&#8217; \ &#8216;<code>s 100 l 10 0</code>&#8217; should result in 16 matches
</li>
<li>
SROx and SRC search result variables
</li>
<li>
SLEEP command
</li>
<li>
H command displays decimal numeric value (when given a single expression)
</li>
<li>
In disassembler display WORD keyword when o16 in 32-bit CS
</li>
<li>
Bugfix, in XR do not skip first digit of allocation size
</li>
<li>
G and T/TP/P breakpoints work reliably in DebugX when the client enters, leaves, or switches from/to Protected Mode
</li>
<li>
F and S command allow accepting &#8216;<code>RANGE</code>&#8217; specifications for source data
</li>
<li>
Add TTC/TPC/PPC default step counts for T/TP/P commands
</li>
<li>
DW/DD commands to dump memory in words or doublewords
</li>
<li>
Manual added (this document)
</li>
<li>
RE buffer execution to run almost arbitrary commands when T/TP/P/G intend to dump register contents
</li>
<li>
Conditional control flow with IF and GOTO in a script file
</li>
<li>
/C command line option to pass commands to the debugger on startup
</li>
<li>
In assembler allow specifying SHORT/NEAR/FAR for jumps and calls
</li>
<li>
Script file reading
</li>
<li>
Pass point functionality (inspired by DR-DOS's SID) using counters
</li>
<li>
G LIST command to list the saved temporary breakpoint list
</li>
<li>
Auto-repetition for G command, G AGAIN command
</li>
<li>
DebugX's DPMI entrypoint hooking automatically checked instead of always avoiding it on MSW and dosemu
</li>
<li>
Serial port I/O, with defaults (for COM2) that can be reconfigured using debugger variables
</li>
<li>
Permanent breakpoints
</li>
<li>
Buffered tracing using &#8216;<code>P/TP/T ... SILENT</code>&#8217; which writes to an internal buffer during the run then replays the last entries from it upon finishing the run
</li>
<li>
TP command which is like T except it handles repeated string operations like P
</li>
<li>
DM command lists MCB sizes in decimal Bytes/KiB
</li>
<li>
Conditional tracing using &#8216;<code>P/TP/T ... WHILE</code>&#8217; conditions
</li>
<li>
L and W commands allow drive letters instead of numbers
</li>
<li>
Bootloaded mode and its BOOT commands
</li>
<li>
NASM style address disassembly, blanks after commas, keywords uncapitalised
</li>
<li>
TSR mode and command to enter it
</li>
<li>
R command allows treating flags (CF, ZF, etc), debugger variables, registers, and memory variables (byte, word, 3byte, dword) as variables
</li>
<li>
Conditional "jumping" and "not jumping" notices in register dump's single-line disassembly
</li>
<li>
Options DCO1, DCO2, DCO3, DAO to modify some behaviour
</li>
<li>
Extended online help pages
</li>
<li>
_DEBUG option which swaps the exception handlers and thus allows debugging most of the debugger itself (_DEBUG builds are not included in the package and have to be created by building them specifically)
</li>
<li>
Arbitrary unsigned 32-bit expression evaluator
</li>
<li>
Paging for long command output
</li>
<li>
Usage conditions changed to Fair License (having asked Paul Vojta and received his confirmation), prior conditions also allowed as alternatives
</li>
</ul>
<h2><a name="building"></a><a name="S3"></a>3: Building the debugger <a href="#building">#</a></h2>
<p>
Building lDebug is not supported on conventional DOS-like systems. (DJGPP environments may suffice but are not tested.) Assembling the main debugger executable may require up to 1 GiB of memory.
</p>
<h3><a name="buildingcomponents"></a><a name="S3.1"></a>3.1 Components for building <a href="#buildingcomponents">#</a></h3>
<p>
The following components are required to build with the provided scripts:
</p>
<ul><li>
bash - to run mak* scripts
</li>
<li>
perl - to patch binaries (overwrite unused revision IDs)
</li>
<li>
grep - to detect whether boot loading is in use, and to export variables
</li>
<li>
sed - to filter dosemu2 output
</li>
<li>
hg (Mercurial) - to retrieve revision IDs
</li>
<li>
wc - to count amount of ancestors
</li>
<li>
python - to run hg and to run the test suite
</li>
<li>
C compiler - to compile supporting programs
</li>
<li>
dosemu2 - to run build decompression tests (optional)
</li>
<li>
qemu - to run build decompression tests (optional)
</li>
<li>
nasm - to assemble. NASM versions to choose:
<ul><li>
NASM versions up to 2.07 fail -- &#8216;<code>%deftok</code>&#8217; is not supported
</li>
<li>
NASM versions prior to 2.09.02 fail -- &#8216;<code>%deftok</code>&#8217; is implemented wrongly
</li>
<li>
NASM version 2.09.02 works (last tested 2019-11)
</li>
<li>
NASM versions 2.09.03 to 2.09.10 all fail -- &#8216;<code>%assign %$foo%[bar] quux</code>&#8217; doesn't function right
</li>
<li>
NASM version 2.10.09 works (last tested 2019-11)
</li>
<li>
NASM version 2.14.03 works (last tested 2020-12)
</li>
<li>
NASM version 2.15.03 works (last tested 2020-12)
</li>
<li>
NASM version 2.16 (current git head) fails, due to <a href="https://bugzilla.nasm.us/show_bug.cgi?id=3392732">a bug with %strcat</a> and <a href="https://bugzilla.nasm.us/show_bug.cgi?id=3392733">a bug with %assign ?%1</a> and <a href="https://bugzilla.nasm.us/show_bug.cgi?id=3392803">a bug with %00</a>
</li>
<li>
(As of 2022-08-23) Current git head <a href="https://github.com/netwide-assembler/nasm/pull/25#issuecomment-1186217590">with a patch</a> for the %strcat bug and <a href="https://bugzilla.nasm.us/show_bug.cgi?id=3392803">with a patch</a> for the %00 bug works (last tested 2022-08)
</li>
<li>
NASM version 2.16rc10 works (last tested 2022-11)
</li>
</ul>

</li>
<li>
halibut - to build this manual
</li>
<li>
supporting programs:
<ul><li>
mktables (included in debugger source)
</li>
<li>
tellsize (included in separate repo called tellsize)
</li>
<li>
mktmpinc.pl (included in separate repo called mktmpinc, to create temporary include files, optional)
</li>
<li>
crc16-t/iniload/checksum (included in separate repo called crc16-t, to add checksumming, optional)
</li>
<li>
a 86-DOS kernel and shell (to run build decompression tests or the test suite, optional)
</li>
</ul>

</li>
<li>
additional sources (must be referenced in cfg.sh or ovr.sh):
<ul><li>
lmacros (macro collection)
</li>
<li>
scanptab (partition table scanning for bootable debugger)
</li>
<li>
ldosboot (iniload frame for bootable debugger, boot sector loaders)
</li>
<li>
instsect (application to install boot sector loaders)
</li>
<li>
bootimg (to run decompression test with qemu and create boot image for qemu to use for the test suite)
</li>
<li>
inicomp (if to use compression support), also needs one of:
<ul><li>
brieflz (blzpack)
</li>
<li>
lz4 (lz4c)
</li>
<li>
snappy (snzip)
</li>
<li>
exomizer -- recommended as this usually results in the smallest files
</li>
<li>
x-compressor
</li>
<li>
heatshrink
</li>
<li>
lzip -- usually even smaller than Exomizer but takes longer to decompress
</li>
<li>
lzop
</li>
<li>
lzsa
</li>
<li>
apultra
</li>
<li>
bzpack
</li>
</ul>

</li>
<li>
crc16-t/iniload (if to add checksumming)
</li>
<li>
symsnip (only if symbolic option is enabled)
</li>
</ul>

</li>
</ul>
<h3><a name="buildingprocess"></a><a name="S3.2"></a>3.2 How to build <a href="#buildingprocess">#</a></h3>
<ol><li>
Clone the mercurial repo from <a href="https://hg.pushbx.org/ecm/ldebug">https://hg.pushbx.org/ecm/ldebug</a> or in an existing repo use &#8216;<code>hg pull</code>&#8217; to update the repo
</li>
<li>
Update the repo with &#8216;<code>hg up</code>&#8217; or &#8216;<code>hg up default</code>&#8217; or any other available commit you want to build
</li>
<li>
Clone the other needed repos from <a href="https://hg.pushbx.org/ecm/">https://hg.pushbx.org/ecm/</a> or in existing repos use &#8216;<code>hg fetch</code>&#8217; or the sequence of &#8216;<code>hg pull</code>&#8217; then &#8216;<code>hg up</code>&#8217; to update the repos. (Usually the additional source repos do not have multiple branches.)
</li>
<li>
Copy the ldebug/source/cfg.sh file to ovr.sh in the same directory
</li>
<li>
Edit ovr.sh to point to the repos
</li>
<li>
Edit <code>INICOMP_METHOD</code> in ovr.sh to select none, one, or several compression methods. Surround multiple values with quotes and delimit with blanks. If the value "none" is used no compression will occur. If several values are given the smallest of the resulting files will be used as the <code>ldebug.com</code> result. This favours LZMA-lzip (lzd) and Exomizer 3 (exodecr) compression as they result in the best ratios. The uncompressed <code>ldebugu.com</code> file will always be generated, you can rename or copy or symlink it to use it as <code>ldebug.com</code> if you want.
</li>
<li>
If you have dosemu2 or qemu, you may enable the <code>use_build_decomp_test</code> option. This insures that the compressed executables will actually succeed in decompression when entered in EXE mode, and will lower the required minimum allocation given in the EXE header to the minimally required value so that decompression will still succeed. This defaults to using dosemu2, which must have a DOS installed that allows filesystem redirection. <code>DEFAULT_MACHINE</code> can be used to select qemu instead. The options <code>BOOT_KERNEL</code>, <code>BOOT_COMMAND</code>, and <code>BOOT_PROTOCOL</code> must be set up then to allow building a bootable diskette. (This is needed because qemu does not offer filesystem redirection for DOS.)
</li>
<li>
The <code>use_build_revision_id</code> option is by default on. It requires that the sources are in hg (Mercurial) repos and that the hg command is available to run &#8216;<code>hg id</code>&#8217;. The resulting revision IDs are embedded into the executable and will be shown for the ?B (long) and ?BUILD (short) commands.
</li>
<li>
In ovr.sh you can also specify which tools to use. For example, the variable <code>$NASM</code> specifies the nasm executable to use, with path if needed.
</li>
<li>
If you want to rebuild debugtbl.inc you should compile mktables then run it. While in the ldebug/source directory, run &#8216;<code>./makec</code>&#8217; (or use whatever C compiler to build mktables) then &#8216;<code>./mktables</code>&#8217; next. Note that mktables only needs to be used if either the source files (instr.*) changed or the mktables program itself has been altered. If the assembler and disassembler tables are not to change then mktables need not be used.
</li>
<li>
Finally, run &#8216;<code>./mak.sh</code>&#8217; from the ldebug/source directory. You may pass environment variables to it, such as &#8216;<code>INICOMP_METHOD=exodecr ./mak.sh</code>&#8217; to select Exomizer compression. You may also pass it parameters which will be passed to the main assembly command, such as &#8216;<code>./mak.sh -D_DEBUG4</code>&#8217; to enable debugging messages.
</li>
</ol>
<p>
The mak.sh script expects that the current working directory is equal to the directory that it resides in. So you'll always want to run it as &#8216;<code>./mak.sh</code>&#8217; from that directory. The same is true of the make* scripts.
</p>
<p>
The make* scripts work as follows:
</p>
<dl><dt>
make
</dt>
<dd>
calls mak.sh to create debug and debugx
</dd>
<dt>
maked
</dt>
<dd>
calls mak.sh to create ddebug and ddebugx
</dd>
<dt>
maker
</dt>
<dd>
calls mak.sh to create only debug
</dd>
<dt>
makerd
</dt>
<dd>
calls mak.sh to create only ddebug
</dd>
<dt>
makex
</dt>
<dd>
calls mak.sh to create only debugx
</dd>
<dt>
makexd
</dt>
<dd>
calls mak.sh to create only ddebugx
</dd>
</dl>
<p>
ldebug/tmp, ldebug/lst, and ldebug/bin will receive the files created by the mak script. The following filenames are for the default when running mak.sh on its own which is to create debug. (When ddebug, debugx, or ddebugx are created, the names change accordingly.) In the ldebug/bin subdirectory, <code>debug.com</code> will be a nonbootable executable (even if the <code>_BOOTLDR</code> option is enabled). This executable can safely be compressed using EXE packers such as the UPX. (In cfg.sh the option <code>use_build_shim</code> now controls whether <code>debug.com</code> is created. It defaults to disable this output file.) If the <code>_BOOTLDR</code> option is enabled, <code>ldebug.com</code> will be a compressed bootable executable (if any compression method is selected), whereas <code>ldebugu.com</code> will be an uncompressed bootable executable. These bootable executables must not be compressed using any other programs. Doing that would render the kernel mode entrypoints unusable. Incidentally, UPX rejects these files because their &#8216;last page size&#8217; MZ EXE header field holds an invalid value.
</p>
<p>
The bootable executables can be used as MS-DOS 6 protocol <code>IO.SYS</code>, MS-DOS 7/8 <code>IO.SYS</code>, PC-DOS 6/7 <code>IBMBIO.COM</code>, FreeDOS <code>KERNEL.SYS</code>, RxDOS.3 <code>RXDOS.COM</code>, or as a Multiboot specification or Multiboot2 specification kernel. In any kernel load protocol case, the root FS that is being loaded from should be a valid FAT12, FAT16, or FAT32 file system on an unpartitioned (super)floppy diskette (unit number up to 127) or MBR-partitioned hard disk (unit number above 127). In addition, the bootable executables also are valid 86-DOS application programs that can be loaded in EXE mode either as application or as device driver. (Internally, all the .com files are MZ executables with a header, but they are named with a .COM file name extension for compatibility.)
</p>
<p>
It is valid to append additional data, such as a .ZIP archive, to any of the executables. However, if too large this may render loading with the FreeDOS load protocol impossible. All the other protocols work even in the presence of arbitrarily large appended data.
</p>
<h4><a name="buildinginstsect"></a><a name="S3.2.1"></a>3.2.1 How to build the instsect application <a href="#buildinginstsect">#</a></h4>
<ol><li>
Clone the mercurial repo from <a href="https://hg.pushbx.org/ecm/ldebug">https://hg.pushbx.org/ecm/ldebug</a> or in an existing repo use &#8216;<code>hg pull</code>&#8217; to update the repo
</li>
<li>
Update the repo with &#8216;<code>hg up</code>&#8217; or &#8216;<code>hg up default</code>&#8217; or any other available commit you want to build
</li>
<li>
Clone the other needed repos (lmacros, ldosboot, instsect) from <a href="https://hg.pushbx.org/ecm/">https://hg.pushbx.org/ecm/</a> or in existing repos use &#8216;<code>hg fetch</code>&#8217; or the sequence of &#8216;<code>hg pull</code>&#8217; then &#8216;<code>hg up</code>&#8217; to update the repos. (Usually the additional source repos do not have multiple branches.)
</li>
<li>
Copy the ldebug/source/cfg.sh file to ovr.sh in the same directory
</li>
<li>
Edit ovr.sh to point to the repos
</li>
<li>
In ovr.sh you can also specify which tools to use. For example, the variable <code>$NASM</code> specifies the nasm executable to use, with path if needed.
</li>
<li>
Finally, run &#8216;<code>./makinst.sh</code>&#8217; from the ldebug/source directory. You may pass environment variables to it. You may also pass it parameters which will be passed to the assembly commands.
</li>
</ol>
<p>
The makinst.sh script expects that the current working directory is equal to the directory that it resides in. So you'll always want to run it as &#8216;<code>./makinst.sh</code>&#8217; from that directory.
</p>
<p>
ldebug/tmp, ldebug/lst, and ldebug/bin will receive the files created by the makinst script. ldebug/bin/instsect.com will be the instsect application, which has boot sector loaders for FAT12, FAT16, and FAT32 embedded. The default protocol is lDOS and the default kernel name LDEBUG.COM. Read the instsect help page for instructions on how to use it. Refer to <a href="#cmdhelp-instsect">section 14.2</a> for the instsect help. The help can also be obtained by running <code>instsect.com /?</code> from DOS. The kernel name can be modified with the <code>/F=</code> switch to instsect. For instance, &#8216;<code>instsect.com /f=lddebugu.com a:</code>&#8217; installs the loader onto drive A: with the name set up to load the uncompressed lDDebug.
</p>
<p>
Current lDOS boot32 uses the FSIBOOT4 protocol for an additional stage. This is interoperable with the upcoming RxDOS version 7.25's use of the FSIBOOT4 protocol, as well as with loaders that use a different sector for their additional stage (like Microsoft's), or those that do not use an additional stage (like FreeDOS's).
</p>
<h4><a name="buildingtest"></a><a name="S3.2.2"></a>3.2.2 How to prepare the test suite <a href="#buildingtest">#</a></h4>
<p>
The test suite (test/test.py) by default uses qemu. (dosemu2 tends to need more than 5 seconds to start while qemu manages in 2 seconds or less.)
</p>
<p>
If the debugger is run as a DOS application and qemu is used then a boot image containing a DOS kernel, shell, autoexec.bat, and quit program must be created. If the build option use_build_qimg is enabled then calls to mak.sh will create such an image. The script file makqimg.sh carries out this task.
</p>
<p>
If the debugger is run as a DOS application and dosemu2 is used then the DOS installed in dosemu is used. The -K and -E switches to dosemu2 are used to mount a host directory and execute the debugger.
</p>
<p>
If the debugger is bootloaded (in either qemu or dosemu2) then a boot image with only the debugger executable and a startup boot script file must be created. If the build option use_build_bimg is enabled then calls to mak.sh will create such an image. The script file makbimg.sh carries out this task.
</p>
<p>
The test script creates symlinks to bin/ and tmp/qemutest/ and tmp/bdbgtest/ on its own. It can be executed from any directory, as it should find its files based on its own location. The test suite uses pseudoterminals, qemu or dosemu2, and the default Python unittest module.
</p>
<p>
Some tests may require having executed the script file test/scripts/mak.sh from within the test/scripts directory. When booting the debugger or using qemu, this must be run before makbimg.sh or makqimg.sh is run.
</p>
<p>
The DPMI tests currently require manual setup, with a directory test/dpmitest/ containing the dpmitest programs (for dosemu2) or a diskette image test/dpmi.img containing the programs as well as the HDPMI host executable (for qemu).
</p>
<h3><a name="buildingoptions"></a><a name="S3.3"></a>3.3 Build options <a href="#buildingoptions">#</a></h3>
<dl><dt>
_DEBUG
</dt>
<dd>
Make the program debuggable. A &#8216;D&#8217; is usually prepended to the program name. This means that the program's handlers are only installed within the function run, and are uninstalled within the function intrtn1_code. This allows debugging everything except this section. This is intended to be used with a default build of lDebug as the outer debugger. However, there is nothing preventing usage of a different debugger. To indicate that the debuggable debugger is running, its default command prompts are prepended by a tilde &#8216;<code>~</code>&#8217;.
<p>
(To debug everything including the section from run to intrtn1_code, or the DPMI entry of lDebugX, a lower-level debugger must be used, such as dosemu's dosdebug or other debuggers that are integrated into emulators.)
</p>

</dd>
<dt>
_DEBUG_COND
</dt>
<dd>
Only takes effect if _DEBUG option is also enabled. Allow to enable or disable debuggable mode within the same process. A &#8216;C&#8217; is usually prepended to the program name. To indicate that the debuggable mode is enabled, the debugger's default command prompts are prepended by a tilde &#8216;<code>~</code>&#8217;.
<p>
The command-line switch /D+ can be used to start up in debuggable mode. /D- instead insures to start up in non-debuggable mode. The DCO6 flag 100h can be toggled subsequently to toggle debuggable mode.
</p>

</dd>
<dt>
_PM
</dt>
<dd>
Make the program DPMI-capable. An &#8216;X&#8217; is usually appended to the program name. If possible, the interrupt 2Fh function 1687h is hooked and made to return lDebugX's entrypoint. Otherwise, the initial entry into protected mode must be traced. Upon entry lDebugX will install itself as if it is the actual client, initialise itself, then set up the original client as if that had entered protected mode. The assembler and disassembler will detect and support 32-bit code segments. Other commands will also use 32-bit addressing to allow using 32-bit segments. To indicate that the debugger is in protected mode, its default command prompt changes from the dash &#8216;<code>-</code>&#8217; to a hash sign &#8216;<code>#</code>&#8217;. (lDDebugX or lCDebugX in debuggable mode prepends its tilde to that resulting in &#8216;<code>~#</code>&#8217;.)
</dd>
<dt>
_BOOTLDR
</dt>
<dd>
Makes the program support being bootloaded. This additionally requires the lDOS iniload stage wrapped around the MZ .EXE image of the debugger. The mak.sh script prepends an &#8216;l&#8217; to the base filename to create the names for the bootable files. For building debug, this results in <code>ldebugu.com</code> and <code>ldebug.com</code>. In bootloaded mode, I/O is never done using DOS, as if InDOS mode was always on. The DOS's current PSP is not switched during debugger operation. The MCB chain can only be displayed using the DM command by specifying the start segment explicitly. The BOOT commands are supported, refer to <a href="#helpboot">section 15.11</a>.
</dd>
<dt>
_HISTORY
</dt>
<dd>
Enables the line editing history for raw terminal and serial input. Defaults to on. Size can be specified using _HISTORY_SIZE. Whether a separate segment is used can be controlled using the _HISTORY_SEPARATE_FIXED option. Defaults to an 8 KiB separate segment buffer.
</dd>
<dt>
_MEMREF_AMOUNT
</dt>
<dd>
Indicates number of memref structures to include. Default 4 (on). If enabled without a value, the default (4) is selected. When enabling this option, you most likely want to first rebuild the assembler and disassembler tables using the command <code>./mktables direction stackhinting</code>. (These mktables switches are now default enabled.) This allows for memrefs to indicate whether an explicit memory operand is a read or write (<code>direction</code>), as well as for stack accesses like <code>push</code>, <code>pop</code>, <code>call</code>, <code>retn</code> to be recognised in memrefs (<code>stackhinting</code>). Memrefs are initialised by disassembly. Memrefs can be accessed using the access variables like <code>READADR0</code>, <code>READLEN0</code>, etc. Refer to <a href="#varaccess">section 11.18</a>. The access variables are written after an R command's register dump and disassembly (refer to <a href="#cmdr">section 10.33</a>). Access variables can be accessed using special keywords behind the <code>IN</code> of a <code>VALUE x IN y</code> construct (refer to <a href="#exprvaluein">section 9.8</a>).
<p>
Note that memrefs are not always exact. For instance, accesses by some instructions are not detected (eg <code>lgdt</code>, <code>sgdt</code>, <code>fsave</code>). Some instructions' accesses are not always correctly detected, such as <code>enter</code> with non-zero second operand, string instructions spanning segment boundaries, or instructions using <code>ss</code> after a write to <code>ss</code> that causes disassembly repetition. Some types of accesses are never detected either, such as GDT/LDT accesses to load descriptors. The stack access of software interrupt instructions is correctly detected only when tracing interrupts (Trace Mode set to 1, refer to <a href="#cmdtm">section 10.45</a>); if the interrupt call is proceeded past then like any proceeded-past function call it may use more stack space.
</p>

</dd>
<dt>
_SYMBOLIC
</dt>
<dd>
Enables the symbolic debugging support. This currently defaults to off. Documentation about the symbolic debugging support is still lacking. This may require the _DUALCODE build option to be enabled.
</dd>
<dt>
_IMMASM
</dt>
<dd>
Enable the immediate assembler. Refer to <a href="#cmdimmasm">section 10.4</a>. This currently defaults to off. This may require the _DUALCODE build option to be enabled.
</dd>
<dt>
_DUALCODE
</dt>
<dd>
Enable the second code segment of the debugger. Most of the symbolic and immediate assembler code will be put into the second code segment if it is enabled. Currently defaults to on if both _PM and _SYMBOLIC are enabled.
</dd>
</dl>
<h2><a name="gettingstartedrelease"></a><a name="S4"></a>4: Getting started with the release <a href="#gettingstartedrelease">#</a></h2>
<p>
The stand-alone and FreeDOS release packages contain the following files:
</p>
<p>
In the <code>bin</code> or <code>BIN</code> directory:
</p>
<dl><dt>
<code>ldebugu.com</code>
</dt>
<dd>
Uncompressed bootable debugger, build without DPMI support
</dd>
<dt>
<code>ldebug.com</code>
</dt>
<dd>
Compressed bootable debugger, build without DPMI support
</dd>
<dt>
<code>ldebugxu.com</code>
</dt>
<dd>
Uncompressed bootable debugger, build with DPMI support
</dd>
<dt>
<code>ldebugx.com</code>
</dt>
<dd>
Compressed bootable debugger, build with DPMI support
</dd>
<dt>
<code>instsect.com</code>
</dt>
<dd>
Application to install boot sector loaders, with lDOS loaders that default to load <code>LDEBUG.COM</code> from a FAT12, FAT16, or FAT32 file system
</dd>
</dl>
<p>
The <code>tmp</code> or <code>SOURCE/LDEBUG/ldebug/tmp</code> directory contains subdirectories for each used compression method. For example, there is a subdirectory named <code>lz4</code>. These subdirectories contain the compressed executables <code>ldebug.com</code> and <code>ldebugx.com</code> built with the corresponding compression method.
</p>
<p>
NB: The default choice of compression method (LZMA-lzip) is chosen based purely on the smallest possible executable size. It may be unsuitable for use on low-end systems where it may take several minutes to decompress the application. In this case, the uncompressed executables may be used, or those compressed with another method (as found in the <code>tmp</code> subdirectories).
</p>
<p>
In the <code>doc</code> directory, or <code>DOC/LDEBUG</code>:
</p>
<dl><dt>
<code>ldebug.htm</code>
</dt>
<dd>
This manual in HTML, preferred form
</dd>
<dt>
<code>ldebug.txt</code>
</dt>
<dd>
Manual in plain text (FreeDOS package: with CR LF line endings)
</dd>
<dt>
<code>ldebug.pdf</code>
</dt>
<dd>
Manual in PDF
</dd>
<dt>
<code>fdbuild.txt</code>
</dt>
<dd>
FreeDOS package build instructions
</dd>
<dt>
<code>LDEBUG.LSM</code>
</dt>
<dd>
LSM file for lDebug FreeDOS package
</dd>
</dl>
<p>
In the root directory, or also <code>DOC/LDEBUG</code>:
</p>
<dl><dt>
<code>license.txt</code>
</dt>
<dd>
Full license texts for lDebug
</dd>
</dl>
<p>
In the <code>APPINFO</code> directory, only for FreeDOS package:
</p>
<dl><dt>
<code>LDEBUG.LSM</code>
</dt>
<dd>
LSM file for lDebug FreeDOS package
</dd>
</dl>
<p>
In the <code>lst</code> or <code>SOURCE/LDEBUG/ldebug/lst</code> directory:
</p>
<dl><dt>
<code>debug.lst</code>
</dt>
<dd>
Assembly listing corresponding to <code>ldebug.com</code> and <code>ldebugu.com</code>
</dd>
<dt>
<code>debug.map</code>
</dt>
<dd>
Assembly map corresponding to <code>ldebug.com</code> and <code>ldebugu.com</code>
</dd>
<dt>
<code>debugx.lst</code>
</dt>
<dd>
Assembly listing corresponding to <code>ldebugx.com</code> and <code>ldebugxu.com</code>
</dd>
<dt>
<code>debugx.map</code>
</dt>
<dd>
Assembly map corresponding to <code>ldebugx.com</code> and <code>ldebugxu.com</code>
</dd>
</dl>
<h2><a name="invoking"></a><a name="S5"></a>5: Invoking the debugger <a href="#invoking">#</a></h2>
<h3><a name="invoking-boot"></a><a name="S5.1"></a>5.1 Invoking the debugger in boot loaded mode <a href="#invoking-boot">#</a></h3>
<p>
The debugger can be loaded as a variety of kernel formats.
</p>
<p>
The Multiboot1 and Multiboot2 entrypoints will expect that a kernel command line is provided. The FreeDOS, RxDOS.3, and lDOS load protocols allow specifying a kernel command line, but it is optional.
</p>
<p>
If a kernel command line is detected then its contents are entered into the command line buffer. Unescaped semicolons are translated into Carriage Returns. Semicolons and backslashes may be escaped with backslashes.
</p>
<p>
If no kernel command line is given, the debugger assumes a default. It is equivalent to checking for a file and label using the IF command (<a href="#cmdif">section 10.21</a>), then if found to execute that script file. The IF condition is like <code>if exists y ldp/LDEBUG.SLD :bootstartup then</code> and the subsequent script command is <code>y ldp/LDEBUG.SLD :bootstartup</code> (<a href="#cmdy">section 10.53</a>). The filename is however <code>LDDEBUG.SLD</code> for DDebug builds, and <code>LCDEBUG.SLD</code> for CDebug builds.
</p>
<p>
Executing the <code>Q</code> command (<a href="#cmdq">section 10.30</a>) makes the debugger uninstall itself then continue running whatever code the debuggee is in. Executing the <code>BOOT QUIT</code> command (<a href="#helpboot">section 15.11</a>) makes the debugger attempt to shut down the machine. First it will try to call a dosemu-specific callback. Next it will attempt shutting down with APM. (This works in qemu.) Finally it will give up if no attempt worked.
</p>
<h3><a name="invoking-app"></a><a name="S5.2"></a>5.2 Invoking the debugger as an application <a href="#invoking-app">#</a></h3>
<p>
The debugger is internally an MZ .EXE style application. It may need MS-DOS version 3 level features. A few switches are supported:
</p>
<dl><dt>
<code>/?</code>
</dt>
<dd>
Show the command help page about invoking the debugger. Refer to <a href="#cmdhelp-ldebug">section 14.1</a> for a copy of that help.
</dd>
<dt>
<code>/C</code>
</dt>
<dd>
Put the text following this switch into the command line buffer. Unquoted unescaped blanks indicate the end of the text. Parts may be quoted using single quote marks or double quote marks. Unescaped semicolons are translated into Carriage Returns. Semicolons, backslashes, quote marks, and blanks may be escaped with backslashes.
</dd>
<dt>
<code>/S</code>
</dt>
<dd>
This switch is only used if the symbolic option is enabled. It can be used to set the size of the symbol tables early, before loading a debuggee application.
</dd>
<dt>
<code>/B</code>
</dt>
<dd>
Run a breakpoint within the debugger's initialisation.
</dd>
<dt>
<code>/F</code>
</dt>
<dd>
Enable/disable treating file as a flat binary. Enable if a blank or plus sign follows this switch. Disable if a minus sign follows this switch. This controls the DCO6 option 400h. If enabled, .EXE and .COM files will be loaded as flat binaries even if they contain an MZ executable header. Writing the files back as flat binaries is also enabled by this. (Note that the file has to fit into memory for this.) /F implies /E+, but /F+ and /F- do not imply anything about /E.
</dd>
<dt>
<code>/E</code>
</dt>
<dd>
Enable/disable setting Stack Segment != PSP for loading flat binaries. Enable if a blank or plus sign follows this switch. Disable if a minus sign follows this switch. This controls the DCO6 option 800h. If enabled then loading a flat binary file (with filename extensions such as <code>.bin</code> or using the /F switch) will set up a Stack Segment at the end of the process memory block. That is, in a different segment than the process segment. If disabled, then flat binaries always get SS = PSP even if that leaves the stack pointing into the binary image. /F implies /E+.
</dd>
<dt>
<code>/V</code>
</dt>
<dd>
Enable/disable video screen swapping. Enable if a blank or plus sign follows this switch. Disable if a minus sign follows this switch. Refer to <a href="#cmdv">section 10.49</a>.
</dd>
</dl>
<p>
After the switches a filename may follow. After the filename, command line contents for the process to be debugged may follow. These are both passed to the N command. Then, an L command for loading an application is run.
</p>
<p>
Executing the <code>Q</code> command (<a href="#cmdq">section 10.30</a>) makes the debugger try to terminate the debuggee application and to then terminate itself. The debugger returns to whatever application called it.
</p>
<p>
If the TSR command (<a href="#cmdtsr">section 10.46</a>) is used, the debugger patches the parent of the currently running application to be the debugger's parent. A subsequent <code>Q</code> command will then behave much like it does in boot loaded mode: The debugger uninstalls itself and continues execution in the current debuggee context.
</p>
<h3><a name="invoking-device"></a><a name="S5.3"></a>5.3 Invoking the debugger as a device driver <a href="#invoking-device">#</a></h3>
<p>
The debugger's MZ .EXE style executable can also be loaded as a device driver. Loading as a device driver requires an MS-DOS version 5 level feature. Namely, the loader has to initialise and pass the pointer to the end of memory available to the device driver. (The debugger attempts to detect whether this pointer is passed and indicates enough memory, but it is unclear how well that works.)
</p>
<p>
Device drivers can be loaded from CONFIG.SYS using a <code>DEVICE=</code> directive. Other loaders such as DEVLOAD may work too. (DEVLOAD 3.25 specifically needs a patch to fix some problems keeping track of memory and to allow DEVLOAD to report more than 64 KiB of memory available to the device driver.)
</p>
<p>
DOS device loaders generally convert the device driver's command line to allcaps. To work around this, the debugger will interpret the exclamation mark in a special way: An exclamation mark indicates to convert the next letter to a small letter, if it is a capital letter. To pass a literal exclamation mark, double it.
</p>
<p>
All command line switches of the application mode are also accepted by the device mode debugger. In particular, <code>/C=</code> can be used to pass commands to execute.
</p>
<p>
The debugger will start up with debuggee client registers set up from the way they were passed by the device loader. CS:IP will point to a far return instruction in the debugger's entry segment. The stack will be preserved from what the device loader passed, too. That means running the debuggee allows to return control to DOS and have it finish installation of the debugger as a device. Subsequently, DOS and other device drivers and applications can be debugged, just like when resident in TSR mode.
</p>
<p>
The device mode debugger can terminate in two different modes. Both require a specific command letter appended to the Q command.
</p>
<p>
QD may be used if control did not return to the device loader yet. The debugger checks this condition by stashing away a copy of all regular registers to compare to their current values. This includes all GPRs, all segment registers, EIP, and EFL. Also, the debugger's device header fields for pointing to the next device header are compared to FFFFh. If both match, it is assumed that we can still modify the request header passed by the device loader. This allows to report an error and set up an empty memory block to keep, so that the loader will know to discard the device.
</p>
<p>
QC may be used if control has returned to the device loader already and the debugger device has been installed into the system. It requires locating the device header in the chain of devices that starts with the NUL device in the DOS data segment. It also requires to find the memory block containing the debugger. It must be either a PSP-alike MCB (self-owned regular MCB containing exactly the debugger allocation) or an &#8216;<code>SD</code>&#8217; (System Data) container MCB with one or more sub-MCBs (one of which contains exactly the debugger allocation). If these conditions are met, the debugger can be quit. It re-uses parts of the TSR application mode termination.
</p>
<p>
<strong>NOTE:</strong> Using QC currently assumes that no system file handles are left allocated to the placeholder character device that the debugger installs to keep itself resident. This device is currently called &#8216;<code>LDEBUG$$</code>&#8217;. If this rule is not followed the system might crash.
</p>
<h3><a name="invoking-test"></a><a name="S5.4"></a>5.4 Invoking the test suite <a href="#invoking-test">#</a></h3>
<p>
Use the test.py script in the test subdirectory. Use the -v switch to do verbose output. Specify test name patterns to use with -k, or omit to run all tests. The script uses the following environment variables:
</p>
<dl><dt>
build_name
</dt>
<dd>
Build name to use. Either debug (default), debugx, ddebug, ddebugx, cdebug, or cdebugx.
</dd>
<dt>
test_booting
</dt>
<dd>
If set to a nonzero number, boot into the debugger. Otherwise, a DOS is loaded and the debugger is run as an application. Some tests are booting only, some other tests are non-booting only. The unsupported tests are skipped automatically.
</dd>
<dt>
test_initialise_commands
</dt>
<dd>
Commands to be executed by the test set up method right after establishing serial I/O. Semicolons are replaced by Carriage Returns. This should include the command &#8216;<code>r dco6 clr= 100</code>&#8217; if testing lCDebug to disable its debuggable mode.
</dd>
<dt>
test_sleepduration
</dt>
<dd>
Floating point number which defines the default sleep duration, in seconds, for read calls that do not override it. This defaults to 0.05.
</dd>
<dt>
test_addsleepduration
</dt>
<dd>
Floating point number which defines a duration, in seconds, to add to the duration of overridden read calls. This defaults to 0.0.
</dd>
<dt>
DEFAULT_MACHINE
</dt>
<dd>
qemu or dosemu
</dd>
<dt>
DOSEMU
</dt>
<dd>
dosemu executable to use
</dd>
<dt>
QEMU
</dt>
<dd>
qemu executable to use
</dd>
<dt>
DEBUG
</dt>
<dd>
If set to a nonzero number, dump all serial I/O and all debugging messages.
</dd>
</dl>
<p>
The most common reason for random failures is timing. If this is suspected to be the case, the duration variables allow increasing the time spent waiting on debugger output. They were added to replace the workflow of editing durations manually in the test script.
</p>
<h2><a name="interface"></a><a name="S6"></a>6: Interface Reference <a href="#interface">#</a></h2>
<h3><a name="interface-output"></a><a name="S6.1"></a>6.1 Interface Output <a href="#interface-output">#</a></h3>
<p>
The debugger provides a line-based text interface. The interface is written to DOS standard output by default. If InDOS mode is entered or the debugger is bootloaded then the interface is written to the terminal using interrupt 10h. Serial I/O can be enabled to write the interface to the serial port.
</p>
<h3><a name="interface-input"></a><a name="S6.2"></a>6.2 Interface Input <a href="#interface-input">#</a></h3>
<p>
The default command prompt indicates that a command may be entered. It is a dash &#8216;<code>-</code>&#8217; by default, or a hash sign &#8216;<code>#</code>&#8217; when DebugX is in Protected Mode. An exclamation point &#8216;<code>!</code>&#8217; is prepended by a DOS application debugger (not bootloaded) while DOS's InDOS flag is set. A tilde &#8216;<code>~</code>&#8217; is prepended for DDebug, or CDebug while in debuggable mode.
</p>
<p>
If DOS command line input is done as raw input (eg if DCO option 800h is set) or the input is from a raw (ROM-BIOS) terminal, or from a serial port, then the line editing history is enabled. Prior commands may be recalled using the Up arrow key. The Down arrow key may also be used to reverse the recall. As soon as any prior or new line is edited the history recall is disabled.
</p>
<p>
Long command output may be paged. In that case, once a screenful has been displayed, a &#8216;<code>[more]</code>&#8217; prompt is displayed to pause the output. After pressing any key the output is continued. If Control-C is pressed, the current command is aborted.
</p>
<h3><a name="interface-serial"></a><a name="S6.3"></a>6.3 Enabling serial I/O <a href="#interface-serial">#</a></h3>
<p>
Refer to <a href="#varserial">section 11.10</a> for the serial configuration variables. Setting the DCO flag 4000h enables serial I/O. Upon enabling serial I/O a prompt is sent to the serial port. This prompt looks like the following example:
</p>
<pre><code>lDebug connected to serial port. Enter KEEP to confirm.
=
</code></pre>
<p>
(The name of the debugger is modified to indicate DebugX, DDebug, DDebugX, CDebug, or CDebugX. The prompt indicator is &#8216;<code>~= </code>&#8217; for DDebug or CDebug while in debuggable mode.) If the keep prompt is successfully displayed by the serial terminal and is responded to with the requested &#8216;<code>KEEP</code>&#8217; keyword then serial I/O is established.
</p>
<p>
If the confirmation does not occur after a timeout then serial I/O is disabled again. The timeout defaults to about 15 seconds. In this case the debugger itself clears the DCO flag 4000h.
</p>
<p>
If the DCO flag 4000h is cleared then serial I/O is disabled.
</p>
<h3><a name="interface-rdump"></a><a name="S6.4"></a>6.4 Register dumping <a href="#interface-rdump">#</a></h3>
<p>
The R command (refer to <a href="#cmdr">section 10.33</a>) without any parameters dumps the current register values. Then it disassembles a single instruction, or occasionally more than one. The register dump looks like this by default:
</p>
<pre><code>-r
AX=0000 BX=0001 CX=58A0 DX=0000 SP=0800 BP=0000 SI=0000 DI=0000
DS=1BEC ES=1BEC SS=35A9 CS=1BEC IP=0140 NV UP EI PL ZR NA PE NC
1BEC:0140 8CC8              mov     ax, cs
-
</code></pre>
<p>
If the &#8216;<code>RX</code>&#8217; command was used to switch on 32-bit register dumping, then the register dump looks like this:
</p>
<pre><code>-r
EAX=00000000 EBX=00000001 ECX=000058A0 EDX=00000000 ESP=00000800 EBP=00000000
ESI=00000000 EDI=00000000 NV UP EI PL ZR NA PE NC
DS=1BEC ES=1BEC SS=35A9 CS=1BEC FS=0000 GS=0000 EIP=00000140
1BEC:0140 8CC8              mov     ax, cs
-
</code></pre>
<p>
The RE command (<a href="#cmdre">section 10.33.1</a>) runs the RE buffer commands. The default RE buffer content is a single &#8216;<code>@R</code>&#8217; command. After running the program being debugged, usually the RE buffer commands are also being run. This includes a step with the T, TP, or P commands. (<a href="#cmdt">Section 10.44</a>, <a href="#cmdtp">section 10.44.1</a>, <a href="#cmdp">section 10.29</a>.) It also includes a run with the G command. (<a href="#cmdg">Section 10.17</a>.) Further, a permanent breakpoint which is configured as a pass point being passed also runs the RE buffer commands. (<a href="#cmdb">Section 10.6</a>.)
</p>
<p>
Setting the flags 1_0000 or 4_0000 in the DCO3 variable enables register change highlighting. When output is written to DOS standard output or to a serial port then ANSI escape sequences are used to highlight. Specifically, &#8216;<code>\x1B[7m</code>&#8217; is used to reverse video and then &#8216;<code>\x1B[m</code>&#8217; to reset the colours.
</p>
<p>
For DOS standard output it may be needed to install an ANSI escape sequence parser.
</p>
<p>
For serial I/O the terminal connected to the debugger is expected to handle the escape sequences.
</p>
<p>
If the output is to a terminal using interrupt 10h and DCO3 flag 2_0000 is clear and the terminal is detected as functional then highlighting is done using interrupt 10h video attributes.
</p>
<p>
The functionality check is done by calling interrupt 10h service 03h. If the indicated current column is nonzero then the terminal is considered functional. (Current dosemu2 in <code>-dumb</code> terminal mode is detected as not being functional.)
</p>
<p>
If this check fails or the DCO3 flag 2_0000 is set then escape sequences are written using interrupt 10h.
</p>
<h3><a name="interface-mdump"></a><a name="S6.5"></a>6.5 Memory dumping <a href="#interface-mdump">#</a></h3>
<p>
Another basic command is the D command (<a href="#cmdd">section 10.10</a>). It is used to dump memory contents. For example, to dump part of a program:
</p>
<pre><code>-d
1BEC:0140  8C C8 31 DB 05 70 14 50-53 CB 70 03 91 67 BC 45 ..1..p.PS.p..g.E
1BEC:0150  3F 10 C1 6F F9 70 BA 22-7C 71 C3 72 0A 81 0A 81 ?..o.p."|q.r....
1BEC:0160  47 74 68 76 6C 77 32 72-A7 2F BD 78 4B 16 9F 7B Gthvlw2r./.xK..{
1BEC:0170  C9 2B 09 37 0A 81 81 7D-E2 7E AC A0 00 00 00 00 .+.7...}.~......
1BEC:0180  10 49 00 00 0F 00 00 00-00 00 00 00 10 49 00 00 .I...........I..
1BEC:0190  0F 00 00 00 F8 30 80 00-00 00 00 00 80 00 00 00 .....0..........
1BEC:01A0  07 00 00 00 07 00 00 00-00 00 00 00 00 00 00 00 ................
1BEC:01B0  00 00 00 00 97 65 00 00-00 00 00 00 00 00 00 00 .....e..........
-
</code></pre>
<p>
Or, to dump the stack as words:
</p>
<pre><code>-dw ss:sp
header     0    2    4    6    8    A    C    E    0123456789ABCDEF
35A9:0800  0000 0000 0000 0000-0000 0000 0000 0000 ................
35A9:0810  0000 0000 0000 0000-0000 0000 0000 0000 ................
35A9:0820  0000 0000 0000 0000-0000 0000 0000 0000 ................
35A9:0830  0000 0000 0000 0000-0000 0000 0000 0000 ................
35A9:0840  0000 0000 0000 0000-0000 0000 0000 0000 ................
35A9:0850  0000 0000 0000 0000-0000 0000 0000 0000 ................
35A9:0860  0000 0000 0000 0000-0000 0000 0000 0000 ................
35A9:0870  0000 0000 0000 0000-0000 0000 0000 0000 ................
-
</code></pre>
<h3><a name="interface-disasm"></a><a name="S6.6"></a>6.6 Disassembly <a href="#interface-disasm">#</a></h3>
<p>
The U command is used to disassemble one or several instructions. Example:
</p>
<pre><code>-u
305C:0000 8CD0              mov     ax, ss
305C:0002 8CDA              mov     dx, ds
305C:0004 29D0              sub     ax, dx
305C:0006 31D2              xor     dx, dx
305C:0008 B90400            mov     cx, 0004
305C:000B D1E0              shl     ax, 1
305C:000D D1D2              rcl     dx, 1
305C:000F E2FA              loop    000B
305C:0011 50                push    ax
305C:0012 01E0              add     ax, sp
305C:0014 83D200            adc     dx, +00
305C:0017 83C00F            add     ax, +0F
305C:001A 83D200            adc     dx, +00
305C:001D 24F0              and     al, F0
305C:001F 83FA01            cmp     dx, +01
-
</code></pre>
<h3><a name="interface-load"></a><a name="S6.7"></a>6.7 Loading the debuggee <a href="#interface-load">#</a></h3>
<p>
A program to examine can be loaded using the N and L commands. If the debugger is loaded as a DOS application with a filename specified in its command line, it will run the N and L commands on its own.
</p>
<p>
The N command sets up some buffers internal to the debugger. One of those specifies the pathname of the executable file to load. The pathname must include the filename extension, if any. The pathname must be relative to the current directories at the time the L command runs, or it must be absolute. The tail of the N command after the pathname is used as the command line tail for a new debuggee process.
</p>
<p>
The L command without any parameters attempts to load the program specified to the last N command into a new process. If the L command does not display any messages this indicates success.
</p>
<h3><a name="interface-run"></a><a name="S6.8"></a>6.8 Running the debuggee <a href="#interface-run">#</a></h3>
<p>
Once a program is loaded into the debugger it can be run in several ways:
</p>
<dl><dt>
G command
</dt>
<dd>
Runs at full speed until a breakpoint is encountered. Temporary breakpoints can be specified to the G command. Refer to <a href="#cmdg">section 10.17</a>.
</dd>
<dt>
T command
</dt>
<dd>
Traces a single instruction, except for software interrupts which are by default run at full speed with a breakpoint after them. Refer to <a href="#cmdt">section 10.44</a>.
</dd>
<dt>
P command
</dt>
<dd>
Either runs at full speed with a breakpoint behind the current instruction, or traces a single instruction. Software interrupts, call instructions, repeated string instructions, and loop instructions are proceeded past by using a breakpoint. Refer to <a href="#cmdp">section 10.29</a>.
</dd>
<dt>
TP command
</dt>
<dd>
Like the T command except that repeated string instructions are proceeded past like the P command would. Refer to <a href="#cmdtp">section 10.44.1</a>.
</dd>
</dl>
<p>
All run commands support auto-repeat: Submitting an empty line to the debugger (blanks allowed but no comment) will make the debugger run the last command again. For the G command auto-repeat, the specified temporary breakpoints will be used again. Refer to <a href="#cmdautorepeat">section 10.1</a>.
</p>
<p>
Permanent breakpoints can be set up and changed using the B commands. They can be configured to behave as pass points as well. Refer to <a href="#cmdb">section 10.6</a>.
</p>
<p>
The ?RUN help page in <a href="#helprun">section 15.8</a> lists some additional features of the T, P, and TP commands.
</p>
<h3><a name="interface-help"></a><a name="S6.9"></a>6.9 Help <a href="#interface-help">#</a></h3>
<p>
The online help can be accessed using the &#8216;<code>?</code>&#8217; command. Refer to <a href="#helptopics">section 15</a> for copies of the online help.
</p>
<h2><a name="debugging"></a><a name="S7"></a>7: Debugging the debugger itself <a href="#debugging">#</a></h2>
<p>
There are debuggable builds of the debugger, called lDDebug (unconditionally debuggable) and lCDebug (conditionally debuggable).
</p>
<p>
The debuggable mode works by installing the mandatory interrupt handlers of the debuggable debugger only within the &#8216;<code>run</code>&#8217; function, so as to return the control flow to this instance when it runs its debuggee code. On return into this instance, it uninstalls its mandatory handlers again. This mechanism allows to debug most of the debugger using a different instance of lDebug (or potentially another debugger).
</p>
<p>
In debuggable mode, an additional command is supported, the BU command (which stands for "Break Upwards"). It will run a breakpoint within the debugger's code segment which will break into the other debugger. Its code was updated so it will break at the command dispatcher after the label cmd4. This means if the outer debugger is also an lDebug then it can be instructed to skip to the next command being dispatched by entering the command &#8216;<code>G ip</code>&#8217;.
</p>
<p>
lDDebugX (or lCDebugX) can also install its exception areas into the other lDebugX instance. For this, the other debugger needs to have run an &#8216;<code>INSTALL AMIS</code>&#8217; command. Then the debuggable debugger can run its &#8216;<code>INSTALL AREAS</code>&#8217;. Afterwards, faults in the debuggable debugger will make the other lDebugX indicate the area of the fault.
</p>
<p>
After lDebugX has caught a fault in the CODE or CODE2 segment, it can be instructed to resume the lDDebugX (or lCDebugX) command input loop (cmd3) by running a &#8216;<code>G=0</code>&#8217; command. If &#8216;<code>G=1</code>&#8217; is used instead, an additional linebreak will be displayed by the debuggable debugger before it starts prompting for input. This is useful if the fault occurred with some partial output currently displayed. The offset 0 and offset 1 entries are also supported by non-DPMI builds and can of course be used at any point in time other than after a fault, too.
</p>
<p>
There are some DCO6 flags to control breakpoints and entering lCDebug's debuggable mode in the functions debuggerexception and putrunint. They can be displayed using a &#8216;<code>?O6</code>&#8217; command.
</p>
<p>
Other than for the most trivial sessions it is recommended to control the outer debugger by serial I/O, separately from the I/O of the debuggable debugger. If the latter also should be controlled by serial I/O then two different ports can be used. The terminal connected to the outer debugger can also be set up for TracList, the lDebug companion application which traces a listing file. For instance, if lDDebugX is to be traced, TracList should be run with the ldebug/lst/ddebugx.lst listing file.
</p>
<h3><a name="debugging-init"></a><a name="S7.1"></a>7.1 Initialising the debuggable debugger <a href="#debugging-init">#</a></h3>
<p>
To allow the debuggable debugger to relocate and initialise its code sections, the outer debugger should generally start running the debuggable debugger with a plain &#8216;<code>G</code>&#8217; command. The debuggable debugger can then return control to the outer debugger using its &#8216;<code>BU</code>&#8217; command.
</p>
<p>
If the initialisation of the debuggable debugger is to be debugged, the &#8216;<code>/B</code>&#8217; switch may be of use. Otherwise, note that the NEC V20/V30 and 486 CPU detections may fail when traced using an outer lDebug.
</p>
<p>
The NEC detection may lock the machine up if its specially encoded &#8216;<code>pop cx</code>&#8217; is traced or run with a breakpoint directly behind it. To allow to continue tracing after it, a breakpoint must be set up at the &#8216;<code>jcxz</code>&#8217; instruction or later. There must not be a breakpoint on the &#8216;<code>mov sp, ax</code>&#8217; instruction. The &#8216;<code>pop cx</code>&#8217; instruction must not be traced with the Trace Flag set. Failure to honour these requirements may lock up the NEC CPUs, for example the one used in the HP 95LX, which then may require resetting the system with Ctrl-Shift-On. This also resets the system date and time.
</p>
<p>
The 486 detection may wrongly detect a 386 instead of a 486+ when traced on some systems, such as some revisions of dosemu(2).
</p>
<h2><a name="parref"></a><a name="S8"></a>8: Parameter Reference <a href="#parref">#</a></h2>
<h3><a name="parnumber"></a><a name="S8.1"></a>8.1 Number <a href="#parnumber">#</a></h3>
<p>
Plain numbers are evaluated as expressions. Refer to <a href="#exprref">section 9</a>. Expressions consist of any number of the following:
</p>
<ul><li>
Unary operators
</li>
<li>
Binary operators
</li>
<li>
Operands
</li>
</ul>
<p>
Plain number parsing for an expression continues for as long as a valid expression is continued. For example, in the command &#8216;<code>D 100 + 20 L 10</code>&#8217; the starting address (its offset to be specific) is calculated as &#8216;100 + 20&#8217;. Then the expression evaluator encounters the &#8216;<code>L</code>&#8217;, which is not a valid binary operator. Plain number expression parameters are used by a lot of commands. Sometimes, the plain number parameter type is called &#8216;count&#8217; or &#8216;value&#8217;.
</p>
<h3><a name="paraddress"></a><a name="S8.2"></a>8.2 Address <a href="#paraddress">#</a></h3>
<p>
An address parameter is calculated with a default segment. First, a plain number is parsed. If it is followed by a colon, the first number is taken as segment, and then another number is parsed for the offset. If the first number is specified as a pointer type using the type keyword &#8216;<code>POINTER</code>&#8217; then its upper 16 bits are taken as segment and its lower 16 bits are taken as the offset. Otherwise, the first number is used as the offset. Offsets may be 16 bits or 32 bits wide, though 32-bit offsets are only valid for DebugX and only in 32-bit segments.
</p>
<p>
If a segment or pointer type expression are prefixed by a dollar sign &#8216;<code>$</code>&#8217; then the specified segment is always taken as a Real/Virtual 86 Mode segment, even if DebugX is in Protected Mode. Otherwise, in Protected Mode a segmented address refers to a selector.
</p>
<p>
Instead of an address, the address parameter may consist of the taken keywords: <code>TAKEN</code> or <code>T</code> for taken, and <code>NOTTAKEN</code> or <code>NT</code> for not taken. This is only valid if the current <code>cs:(e)ip</code> points at a conditional branch instruction, and will cause a parsing error otherwise. The taken keywords will evaluate to a segmented address pointing at the target of the conditional branch. The not taken keywords will evaluate to a segmented address pointing to behind the conditional branch instruction.
</p>
<p>
Address parameters are used by a lot of commands.
</p>
<h3><a name="parrange"></a><a name="S8.3"></a>8.3 Range <a href="#parrange">#</a></h3>
<p>
A range parameter may have a default length, or it may be disallowed to omit a length. Parsing a range starts with parsing an address. Then, if the end of the line is not yet reached, an end for the range may be specified. The end may be a plain number, which is taken as the offset of the last byte to include in the range. The address of the last byte to include must be equal or above the address of the first byte that is included in the range.
</p>
<p>
The end may instead be specified with an &#8216;<code>L</code>&#8217; or &#8216;<code>LENGTH</code>&#8217; keyword. In that case, the keyword is followed by a plain number and an optional item size keyword. A length of zero is not valid. The item size keyword may be &#8216;<code>BYTES</code>&#8217;, &#8216;<code>WORDS</code>&#8217;, &#8216;<code>DWORDS</code>&#8217;, or &#8216;<code>PARAS</code>&#8217;. For the latter three, the plain number will be multiplied by 2 or 4 or 16. The &#8216;<code>BYTES</code>&#8217; keyword is only provided for symmetry; currently all commands taking ranges default to byte size for the &#8216;<code>LENGTH</code>&#8217; number.
</p>
<p>
For example, the command &#8216;<code>DD 100 LENGTH 4 DWORDS</code>&#8217; will dump memory from address 0100h (in the current data segment) in dword units, for a length of 4*4 = 16 bytes. The item size keywords were introduced primarily for the &#8216;<code>DW</code>&#8217; and &#8216;<code>DD</code>&#8217; commands (refer to <a href="#cmdd">section 10.10</a>), but they can be used for any command that accepts a range.
</p>
<p>
Range parameters are used by a lot of commands.
</p>
<h3><a name="parrangelines"></a><a name="S8.4"></a>8.4 Range with <code>LINES</code> keyword allowed <a href="#parrangelines">#</a></h3>
<p>
This type of parameter is an extension of the range parameter type. Both the default length and the explicit length may be specified as a number of lines instead of an address length.
</p>
<p>
An explicit &#8216;<code>LINES</code>&#8217; length is specified by prepending an &#8216;<code>L</code>&#8217; or &#8216;<code>LENGTH</code>&#8217; keyword (like an address length) but then specifying a unit as &#8216;<code>LINES</code>&#8217; instead. The number of lines specified must be nonzero and below 8000h.
</p>
<p>
The exact details of how a lines length is used depend on the command in question. A range with lines length is allowed for the U command (<a href="#cmdu">section 10.47</a>) and the D/DB/DW/DD commands (<a href="#cmdd">section 10.10</a>).
</p>
<h3><a name="parlist"></a><a name="S8.5"></a>8.5 List <a href="#parlist">#</a></h3>
<p>
A list is made up of a sequence of items. Each item is either a plain number or a quoted string. List parsing continues until the end of the line. Each plain number represents a single byte. Quoted strings represent as many bytes as there are quoted. A quoted string can be delimited by single quotes <code>'</code> or double quotes <code>"</code>. If the used delimiter quote mark occurs twice back to back while reading the quoted string, this is taken as an escape to include the delimiter mark itself as a byte of the string. List parameters are used by the E, F, and S commands. Refer to <a href="#cmde">section 10.15</a>, <a href="#cmdf">section 10.16</a>, and <a href="#cmds">section 10.42</a>.
</p>
<h3><a name="parlistorrange"></a><a name="S8.6"></a>8.6 List or range <a href="#parlistorrange">#</a></h3>
<p>
A list or range can be specified for this parameter. The range is identified by a leading &#8216;<code>RANGE</code>&#8217; keyword. Otherwise, a list is parsed. A list or range parameter is as yet used by the S command and the F command, refer to <a href="#cmds">section 10.42</a> and <a href="#cmdf">section 10.16</a>.
</p>
<h3><a name="parkeyword"></a><a name="S8.7"></a>8.7 Keyword <a href="#parkeyword">#</a></h3>
<p>
A keyword is checked insensitive to capitalisation. Keywords depend on each command. Only the keywords used to specify a range's length are shared by all commands that parse ranges.
</p>
<h3><a name="parindex"></a><a name="S8.8"></a>8.8 Index <a href="#parindex">#</a></h3>
<p>
An index is a plain number that specifies a breakpoint index. It allows operating on one specific breakpoint. The index parameter type is used by the B commands, refer to <a href="#cmdb">section 10.6</a>.
</p>
<h3><a name="parsegment"></a><a name="S8.9"></a>8.9 Segment <a href="#parsegment">#</a></h3>
<p>
A segment is a plain number for parsing purposes. The segment parameter type is used by the DM command and some BOOT commands, refer to <a href="#cmddm">section 10.12</a> and <a href="#helpboot">section 15.11</a>.
</p>
<h3><a name="parbreakpoints"></a><a name="S8.10"></a>8.10 Breakpoint <a href="#parbreakpoints">#</a></h3>
<p>
Each breakpoint is a single address, which defaults to the code segment. The address may instead be specified starting with an AT sign &#8216;<code>@</code>&#8217;, followed by a blank or an opening parenthesis. In that case, the following plain number specifies the non-segmented linear address to use. The breakpoint parameter type is used by the B and G commands, refer to <a href="#cmdb">section 10.6</a> and <a href="#cmdg">section 10.17</a>.
</p>
<h3><a name="parlabel"></a><a name="S8.11"></a>8.11 Label <a href="#parlabel">#</a></h3>
<p>
A label is a (not quoted) string keyword. It may start with an optional colon. A label can be used by the GOTO and Y commands, refer to <a href="#cmdgoto">section 10.18</a> and <a href="#cmdy">section 10.53</a>.
</p>
<h3><a name="parport"></a><a name="S8.12"></a>8.12 Port <a href="#parport">#</a></h3>
<p>
A port is a plain number for parsing purposes. The port parameter type is used by the I and O commands, refer to <a href="#cmdi">section 10.20</a> and <a href="#cmdo">section 10.28</a>.
</p>
<h3><a name="pardrive"></a><a name="S8.13"></a>8.13 Drive <a href="#pardrive">#</a></h3>
<p>
A drive may be either an alphabetic letter followed by a colon, or a plain number. The number zero corresponds to drive A: then. The drive parameter type is used by the L and W sector commands, refer to <a href="#cmdls">section 10.24</a> and <a href="#cmdws">section 10.51</a>. The N and Y commands (<a href="#cmdn">section 10.27</a> and <a href="#cmdy">section 10.53</a>) also accept drive parameters, but only as part of their filenames. These must be in the drive letter followed by colon format.
</p>
<h3><a name="parsector"></a><a name="S8.14"></a>8.14 Sector <a href="#parsector">#</a></h3>
<p>
A sector is a plain number, which can be equal to any 32-bit value. The sector parameter type is used by the L and W sector commands, refer to <a href="#cmdls">section 10.24</a> and <a href="#cmdws">section 10.51</a>. Some BOOT commands also use sector numbers, refer to <a href="#helpboot">section 15.11</a>.
</p>
<h3><a name="parcond"></a><a name="S8.15"></a>8.15 Condition <a href="#parcond">#</a></h3>
<p>
A condition is a plain number. It is evaluated either to nonzero (true) or zero (false). The condition parameter type is used by the IF command, as well as the P, TP, and T commands when specified with a &#8216;<code>WHILE</code>&#8217; keyword. The BW and BP (with a &#8216;<code>WHEN</code>&#8217; keyword) commands also use conditions. Refer to <a href="#cmdif">section 10.21</a>, <a href="#cmdp">section 10.29</a>, <a href="#cmdt">section 10.44</a>, <a href="#cmdbw">section 10.6.3</a>, <a href="#cmdbp">section 10.6.1</a>. The length of a condition for B commands is limited by how much space is left in the permanent breakpoint conditions buffer. This buffer currently defaults to 1024 bytes. It is shared for all conditions of all permanent breakpoints.
</p>
<h3><a name="parregister"></a><a name="S8.16"></a>8.16 Register <a href="#parregister">#</a></h3>
<p>
A register specifies an internal variable of the debugger. Most prominently these include the debuggee's registers as stored by the debugger in its data segment. A register or variable may be an operand in a plain number's expression. However, several forms of the R command also use register parameters. These allow reading and writing the register values. Refer to <a href="#cmdr">section 10.33</a>.
</p>
<h3><a name="parcommand"></a><a name="S8.17"></a>8.17 Command <a href="#parcommand">#</a></h3>
<p>
Command is a special parameter type that is used only by the RE.APPEND, RE.REPLACE, RC.APPEND, and RC.REPLACE commands (<a href="#cmdredot">section 10.33.2</a> and <a href="#cmdrcdot">section 10.33.4</a>). It is read verbatim and entered into the RE or RC command buffer. Semicolons within a command parameter are not parsed as end of line comment markers. Instead, they are converted to CR (13) codes in the buffer. This delimits the parts of the parameter into several commands. A semicolon may be prefixed by a backslash to escape it and thus enter a literal semicolon into the buffer.
</p>
<h3><a name="parid"></a><a name="S8.18"></a>8.18 ID <a href="#parid">#</a></h3>
<p>
ID is a special parameter type that is used only by the BP and BI commands (<a href="#cmdbp">section 10.6.1</a> and <a href="#cmdbi">section 10.6.2</a>). Leading and trailing whitespace is ignored. An ID can be empty, or contain up to 63 bytes of data. The length of an ID is also limited by how much space is left in the permanent breakpoint ID buffer. This buffer currently defaults to 384 bytes. It is shared for all IDs of all permanent breakpoints.
</p>
<h2><a name="exprref"></a><a name="S9"></a>9: Expression Reference <a href="#exprref">#</a></h2>
<h3><a name="exprliteral"></a><a name="S9.1"></a>9.1 Literals <a href="#exprliteral">#</a></h3>
<p>
Literals consist of one or more digits. A literal must start with a digit or hash sign &#8216;<code>#</code>&#8217;. Embedded underscores &#8216;<code>_</code>&#8217; are skipped. Literals must not overflow 4 giga binary minus 1, that is FFFF_FFFFh.
</p>
<p>
The default base for literals is sixteen (hexadecimal). A hash sign &#8216;<code>#</code>&#8217; indicates a base change. If nothing preceeds the hash sign the base is changed to ten (decimal). Otherwise, the number before the hash sign is read in the prior base and taken as the base to change to. The base must be between 2 and 36. Multiple hash signs are allowed in the same literal.
</p>
<h3><a name="exprstringliteral"></a><a name="S9.2"></a>9.2 String literals <a href="#exprstringliteral">#</a></h3>
<p>
String literals consist of up to 4 bytes. The bytes are specified starting with a hash sign &#8216;<code>#</code>&#8217; followed by a single-quote mark <code>'</code> or double-quote mark <code>"</code>. The same quote mark is used to end the string literal. If the delimiter quote mark occurs twice back to back while reading the string literal, that is handled as an escape to include the delimiter mark itself as a byte. Strings are read in a little-endian order, same as NASM does. That is, the first byte of a multi-byte string is read into the lowest byte of the numeric value. This matches the order obtained by writing the string to memory and reading it as a word, 3byte, or dword.
</p>
<h3><a name="exprvariable"></a><a name="S9.3"></a>9.3 Variables <a href="#exprvariable">#</a></h3>
<p>
A variable consists of a variable name, possibly followed by parentheses with an index expression. Variable names are capitalisation insensitive. Variables differ in size, there are variables consisting of 8, 16, 24, or 32 bits. Variables can be written to using the R command. Some variables are read-only. A few variables allow writing some but not all bits.
</p>
<h3><a name="exprindirection"></a><a name="S9.4"></a>9.4 Indirection <a href="#exprindirection">#</a></h3>
<p>
Indirection is indicated by square brackets. Within the brackets an address is parsed, defaulting to <code>ds</code> as the segment. The size of the indirect access can be specified with a type specifier before the brackets. The usual types are <code>BYTE</code>, <code>WORD</code>, <code>3BYTE</code>, and <code>DWORD</code>. Like variables, indirection terms can be written to using the R command.
</p>
<h3><a name="exprparens"></a><a name="S9.5"></a>9.5 Parentheses <a href="#exprparens">#</a></h3>
<p>
Parentheses can be used to force a different order of operations.
</p>
<h3><a name="exprlinear"></a><a name="S9.6"></a>9.6 <code>LINEAR</code> keyword <a href="#exprlinear">#</a></h3>
<p>
A keyword reading <code>LINEAR</code> introduces an address to parse. The address defaults to <code>ds</code> as the segment. The address may be separated from subsequent text with a comma. If the expression is to be separated from a subsequent element using a comma after a <code>LINEAR</code> address then two commas are needed. Depending on the segmentation scheme of the current mode the segmented address is converted into a linear address. If DebugX is in Protected Mode and the segment base cannot be determined the expression is rejected as an error.
</p>
<h3><a name="exprdesctype"></a><a name="S9.7"></a>9.7 <code>DESCTYPE</code> keyword <a href="#exprdesctype">#</a></h3>
<p>
This keyword introduces a descriptor type read. The following expression is taken to be a selector specification. This keyword is only valid for (DPMI-enabled) lDebugX builds, and only while in Protected Mode.
</p>
<p>
The value is read from a &#8216;<code>lar</code>&#8217; instruction on the following expression, and shifted to the right by 8. If the instruction indicates that the selector does not refer to a valid descriptor then the result of this keyword is zero.
</p>
<h3><a name="exprvaluein"></a><a name="S9.8"></a>9.8 <code>VALUE IN</code> construct <a href="#exprvaluein">#</a></h3>
<p>
A keyword reading <code>VALUE</code> starts a <code>VALUE IN</code> construct. Between the <code>VALUE</code> and subsequent <code>IN</code> keyword there is a single value expression, or a range of the form <code>FROM expression TO expression</code> or <code>FROM expression LENGTH expression</code>. Next follows the <code>IN</code> keyword. After this, there is a list of match ranges. A match range is either a single value expression, or a range of the form <code>FROM expression TO expression</code> or <code>FROM expression LENGTH expression</code>. After each match range a comma indicates another match range follows.
</p>
<p>
In a <code>FROM TO</code> specification the first expression has to evaluate to unsigned below-or-equal the second expression. In a <code>FROM LENGTH</code> specification the length must be nonzero. If these conditions are not met then the value or match range in question is always considered as not matching.
</p>
<p>
The entire <code>VALUE IN</code> construct evaluates to how many of the match ranges match the value range. The construct only evaluates to zero if no matches occurred. A nonzero value indicates that at least one match occurred.
</p>
<h4><a name="exprvaluein-keywords"></a><a name="S9.8.1"></a>9.8.1 <code>VALUE IN</code> construct keywords <a href="#exprvaluein-keywords">#</a></h4>
<p>
Instead of a value or match range as specified here, the keyword <code>EXECUTING</code> may be specified. This expands to the following input:
</p>
<pre><code>FROM LINEAR cs:cip LENGTH abo - cip
</code></pre>
<p>
If the <code>_MEMREF_AMOUNT</code> build option is enabled and paired with the <code>direction</code> and <code>stackhinting</code> switches to mktables then additional keywords are available for <code>VALUE IN</code> match ranges. That is, these keywords must be specified behind the <code>IN</code> and cannot be specified between the <code>VALUE</code> and <code>IN</code>.
</p>
<p>
These keywords are as follows:
</p>
<dl><dt>
<code>READING</code>
</dt>
<dd>
Expands to a comma-separated list of <code>FROM readadr0 LENGTH readlen0</code> constructs, for every read access variable pair (refer to <a href="#varaccess">section 11.18</a>).
</dd>
<dt>
<code>WRITING</code>
</dt>
<dd>
Expands to a comma-separated list of <code>FROM writadr0 LENGTH writlen0</code> constructs, for every write access variable pair (refer to <a href="#varaccess">section 11.18</a>).
</dd>
<dt>
<code>ACCESSING</code>
</dt>
<dd>
Expands to <code>READING, WRITING, EXECUTING</code>.
</dd>
</dl>
<h3><a name="exprconditional"></a><a name="S9.9"></a>9.9 Conditional <code>?? ::</code> construct <a href="#exprconditional">#</a></h3>
<p>
The ternary conditional operator takes three operands. It is the only ternary operator.
</p>
<p>
The first operand, the condition, is specified before the <code>??</code> keyword. Note that the <code>??</code> keyword must be terminated by a blank or an opening square bracket or round parenthesis.
</p>
<p>
The second operand is specified between the <code>??</code> keyword and the <code>::</code> keyword. Its value is used as the construct's return value if the condition is true.
</p>
<p>
The third operand is specified after the <code>::</code> keyword. Its value is used as the construct's return value if the condition is false.
</p>
<p>
The conditional operator can be nested freely. The conditional operator must not be combined into the R command's assignment operator as in <code>??:=</code>. The third operand may be separated from subsequent text with a comma. If the expression is to be separated from a subsequent element using a comma after a conditional's third operand then two commas are needed.
</p>
<p>
Any side effects that may happen from parsing and reading the second operand or the third operand will always happen, even if the operand in question is not selected as the result by the construct.
</p>
<h3><a name="exprsideeffects"></a><a name="S9.10"></a>9.10 Expression side effects <a href="#exprsideeffects">#</a></h3>
<p>
Some uses of the expression evaluator may have side effects. These side effects may happen even if the parsing of an expression or a command ultimately fails. As a special case, side effects may occur up to twice if a machine mode command (<a href="#cmdmc">section 10.26</a>) is parsed.
</p>
<p>
The ternary <code>?? ::</code> operator and the <code>VALUE IN</code> construct will both always evaluate every operand that they're given, even if that operand is not selected as the result or does not contribute to the match count.
</p>
<p>
Possible side effects include:
</p>
<ul><li>
LFSR and RLFSR variables will be stepped once each time they're read.
</li>
<li>
Indirection can read access arbitrary memory in the current mode, making it possible to affect memory-mapped I/O if such memory is visible to the debugger. Other variables may also read memory, but not as arbitrary as indirection.
</li>
<li>
If an address parsed within an address parameter or in indirection or in a <code>LINEAR</code> construct includes a dollar sign prefixed segment or pointer type expression, then lDebugX may request a selector from the DPMI host.
</li>
<li>
If the symbolic build option is enabled, symbol table access in XMS or 86 Mode memory may occur.
</li>
</ul>
<h2><a name="cmdref"></a><a name="S10"></a>10: Command Reference <a href="#cmdref">#</a></h2>
<h3><a name="cmdautorepeat"></a><a name="S10.1"></a>10.1 Empty command - Autorepeat <a href="#cmdautorepeat">#</a></h3>
<p>
Entering an empty command at an interactive prompt results in autorepeat. Empty means no content except for blanks. A line starting with a semicolon comment is not considered empty. Interactive prompts for this purpose include:
</p>
<ul><li>
the debugger as a DOS application (<code>int 21h</code>)
</li>
<li>
the debugger in InDOS mode or as a bootloaded program (<code>int 16h</code>/<code>int 10h</code>)
</li>
<li>
the debugger across a serial port (port I/O)
</li>
</ul>
<p>
Input that does not count as an interactive prompt includes:
</p>
<ul><li>
reading from a file redirected as stdin using DOS (<code>int 21h</code>)
</li>
<li>
reading from a Y script file using DOS (<code>int 21h</code>)
</li>
<li>
reading from a Y script file while bootloaded (<code>int 13h</code>)
</li>
<li>
reading from the command line buffer
</li>
<li>
reading from the RE buffer
</li>
</ul>
<p>
Autorepeat is not supported by all commands. The following commands support autorepeat:
</p>
<dl><dt>
D/DB/DW/DD
</dt>
<dd>
Continues memory dump behind the last prior dumped position. Continues with the same element size as the prior dump. As for if the command is executed with an address lacking a length, the default length is used. (It defaults to 128 bytes, refer to <a href="#varlengths">section 11.5</a>.)
</dd>
<dt>
DZ/D$/D#/DW#
</dt>
<dd>
Continues string dump behind the last prior dumped string. Continues with the same type of string as the prior dump.
</dd>
<dt>
DX
</dt>
<dd>
Continues memory dump.
</dd>
<dt>
G
</dt>
<dd>
Repeats a step running the debuggee. An equals address given to the prior Go command is not used again. The same G breakpoints as used by the prior Go command are used (same as G AGAIN). The exception is that wherever a breakpoint matches the <code>CS:(E)IP</code> at the start of the command's execution, it is skipped once.
</dd>
<dt>
P
</dt>
<dd>
Repeats a step running the debuggee. An equals address given to the prior Proceed command is not used again. A count given to the prior Proceed command is not used again, autorepeat always runs as if not given a count. (That means the PPC variable is used as the effective count. Refer to <a href="#varcounts">section 11.4</a>.)
</dd>
<dt>
T
</dt>
<dd>
Repeats a step running the debuggee. An equals address given to the prior Trace command is not used again. A count given to the prior Trace command is not used again, autorepeat always runs as if not given a count. (That means the TTC variable is used as the effective count. Refer to <a href="#varcounts">section 11.4</a>.)
</dd>
<dt>
TP
</dt>
<dd>
Repeats a step running the debuggee. An equals address given to the prior Trace/Proceed command is not used again. A count given to the prior Trace/Proceed command is not used again, autorepeat always runs as if not given a count. (That means the TPC variable is used as the effective count. Refer to <a href="#varcounts">section 11.4</a>.)
</dd>
<dt>
U
</dt>
<dd>
Repeats disassembly behind the last prior disassembled instruction. As for if the command is executed with an address lacking a length, the default length is used. (It defaults to 32 bytes, refer to <a href="#varlengths">section 11.5</a>.)
</dd>
</dl>
<h3><a name="cmdquestionmark"></a><a name="S10.2"></a>10.2 ? command <a href="#cmdquestionmark">#</a></h3>
<pre><code>Online help    ?
</code></pre>
<p>
The question mark command (?) lists the main online help screen.
</p>
<p>
There are additional help topics that can be listed by using the question mark command with an additional letter or keyword. These keywords are as follows:
</p>
<pre><code>Registers      ?R
Flags          ?F
Conditionals   ?C
Expressions    ?E
Variables      ?V
R Extended     ?RE
Run keywords   ?RUN
Options pages  ?OPTIONS
Options        ?O
Boot loading   ?BOOT
lDebug build   ?BUILD
lDebug build   ?B
lDebug sources ?SOURCE
lDebug license ?L
</code></pre>
<p>
The full help pages are listed in <a href="#helptopics">section 15</a>.
</p>
<h3><a name="cmdcolon"></a><a name="S10.3"></a>10.3 : prefix - GOTO label <a href="#cmdcolon">#</a></h3>
<p>
A leading colon indicates a destination label for GOTO, see <a href="#cmdgoto">section 10.18</a>.
</p>
<h3><a name="cmdimmasm"></a><a name="S10.4"></a>10.4 . (dot) command - Immediate assembler <a href="#cmdimmasm">#</a></h3>
<p>
A dot command can be used to invoke the immediate assembler. This is only available if the _IMMASM build option was enabled. Following the dot, an instruction is parsed which is assembled. If successful, then the assembled instruction is immediately run.
</p>
<p>
Branches and instructions involving CS as a prefix or operand are handled specifically to do something equivalent to the assembled instruction, by a combination of special detection and modification or as-if handling. This includes jmp far/near/short, jcc, loop, call far/near, retf/retn/iret, mov to ds, mov from ds or cs, push cs, push ds, pop ds, lds, and all memory operands with cs prefix. (The instructions involving ds are handled specifically because a cs prefix is replaced by a ds prefix and ds is temporarily replaced by the cs value then.)
</p>
<p>
Interrupt calls are always proceeded past, even if TM is set. The int instruction is run from a buffer internal to the debugger. Interrrupts which depend on the CS or (E)IP they're called from may not work as expected. Calls are usually traced, but can be proceeded past by including a comma after the dot command.
</p>
<p>
Warning: It is generally not safe to modify SS or SP to relocate the stack with the immediate assembler. This will fail because the immediate assembler traces most of the instructions assembled with it, which uses the stack both before and after running the instruction. LSS SP or LSS ESP are okay if the stack is valid immediately after the instruction is traced. To relocate the stack otherwise you may use the R command to modify the SS and (E)SP debugger variables. This does not trace anything in between modifying the two variables.
</p>
<h3><a name="cmda"></a><a name="S10.5"></a>10.5 A command - Assemble <a href="#cmda">#</a></h3>
<pre><code>assemble        A [address]
</code></pre>
<p>
Starts assembly at the indicated address (which defaults to CS segment), or if no address is specified, at the "a_addr" (AAS:AAO variables).
</p>
<p>
Assembly mode has its own prompt. Entering a single dot (.) or an empty line terminates assembly mode. Comments can be given with a prefixed semicolon. In assembly mode, whereever an immediate number occurs an expression can be given surrounded by parentheses ( and ). In such expressions, register names like AX are evaluated to the values held by the registers at assembly time. To refer to a register as an assembly operand, it must occur outside parentheses.
</p>
<h3><a name="cmdb"></a><a name="S10.6"></a>10.6 B commands - Permanent breakpoints <a href="#cmdb">#</a></h3>
<p>
There are a fixed number of permanent breakpoints provided by the debugger. The default is to provide 16 permanent breakpoints. They are specified by indices ranging from 00 to 0F. A breakpoint can be unused, used while enabled, or used while disabled. A breakpoint that is in use has a specific linear address. It is allowed, though not advised, for several breakpoints to be set to the same address.
</p>
<p>
When running the debuggee with the commands G, T, TP, or P, hitting a permanent breakpoint stops execution, and indicates in a message "Hit permanent breakpoint XX" where XX is replaced by the hexadecimal byte index of the breakpoint. If the breakpoint counter is not equal to 8000h when the breakpoint is hit, then the "Hit" message is followed by a "counter=YYYY" indicator. If the breakpoint ID is not empty, then the ID is shown with an "ID: " prefix. The ID is shown either on the same line as the "Hit" message, or on the next line if the ID exceeds 28 bytes. After that message a register dump occurs, same as for default breaking for the Run commands.
</p>
<p>
The exceptions are as follows:
</p>
<ul><li>
If the CS:(E)IP at the first step of a G command matches any breakpoints, then G does a TP-like step with all breakpoints other than the "cseip"-breakpoint written, while the "cseip"-breakpoint is not written. After that, the "cseip"-breakpoint is written and execution resumes as normal for G.
</li>
<li>
If T.NB or TP.NB or P.NB is used, no permanent breakpoints are written at all.
</li>
<li>
If T.SB or TP.SB or P.SB is used, then during the first step no permanent breakpoints are written. If a counter higher than 1 is given, then during subsequent steps permanent breakpoints are written.
</li>
</ul>
<p>
Each breakpoint has a breakpoint counter, which defaults to 8000h if not set explicitly by the BP or BN commands. The breakpoint counter behaves as follows:
</p>
<ul><li>
If (counter &amp; 3FFFh) equals zero then the counter is considered to be at a terminal state.
</li>
<li>
If the point breaks while the counter is not at a terminal state, then the counter is decremented.
</li>
<li>
If the counter is decremented to 0 or 4000h, then the point is hit.
</li>
<li>
If the counter is decremented to 8000h or C000h, or was already at either count without being decremented, then the point is hit.
</li>
<li>
If the point is not hit but the bit (counter &amp; 4000h) is set, then the point is passed.
</li>
</ul>
<p>
Example counter values:
</p>
<dl><dt>
8000h (default)
</dt>
<dd>
Always break
</dd>
<dt>
4000h
</dt>
<dd>
Always pass
</dd>
<dt>
8003h
</dt>
<dd>
Break on third time the breakpoint is reached, then break always
</dd>
<dt>
0003h
</dt>
<dd>
Break on third time the breakpoint is reached, but do not break again
</dd>
<dt>
C006h
</dt>
<dd>
Pass for five times, then on the sixth time the breakpoint is reached break on it, then break always
</dd>
</dl>
<p>
The point being passed means that during running the debuggee with a Run command, execution is not stopped, but a message indicating "Passed permanent breakpoint XX, counter=YYYY" is displayed. As for the "Hit" message the ID, if any, is also shown. After that message, a register dump occurs. Then execution is continued in accordance with the command that is running debuggee code.
</p>
<p>
Each breakpoint can have a breakpoint condition. If the condition expression evaluates to false when the point breaks, then the point is not considered hit or passed. The breakpoint counter is not stepped then either.
</p>
<h4><a name="cmdbp"></a><a name="S10.6.1"></a>10.6.1 BP command - Set breakpoint <a href="#cmdbp">#</a></h4>
<pre><code>set breakpoint  BP index|AT|NEW address
                  [[NUMBER=]number] [WHEN=cond] [ID=id]
</code></pre>
<p>
BP initialises the breakpoint with the given index. It must be a yet unused breakpoint. If the index is specified as the keyword NEW, the lowest unused breakpoint (if any) is selected. If there is the keyword AT instead of an index or a keyword NEW, then an existing breakpoint at the same linear address is reset, or a new one is added (same as if given the NEW keyword).
</p>
<p>
The address can be given in a segmented format, which defaults to CS, and which in DebugX is subject to either PM or 86M segmentation semantics depending on which mode the debugger is in. The address can also be given with an @ specifier (followed by an opening parenthesis or whitespace) in which case it is specified as the 32-bit linear address. Debug without DPMI support limits breakpoints to 24-bit addresses, of which 21 bits are usable.
</p>
<p>
The optional number, which defaults to 8000h, sets the breakpoint counter to that number.
</p>
<p>
The optional WHEN keyword introduces a breakpoint condition. If the breakpoint is reached then the condition, if specified, is checked before stepping the counters. If the condition is false at that point the point is not considered hit or passed and its counter is not stepped.
</p>
<p>
There is an optional OFFSET keyword (not shown in the example) which allows overriding the breakpoint's preferred offset. Refer to <a href="#cmdbo">section 10.6.4</a> for details.
</p>
<p>
The optional ID keyword allows setting the breakpoint ID. The ID is displayed by BL and when a breakpoint is hit or passed. The default ID is an empty ID. Note that the ID extends for the remainder of the line. There cannot be a breakpoint counter number nor WHEN condition nor OFFSET after the ID keyword.
</p>
<h4><a name="cmdbi"></a><a name="S10.6.2"></a>10.6.2 BI command - Set breakpoint ID <a href="#cmdbi">#</a></h4>
<pre><code> set ID         BI index|AT address [ID=]id
</code></pre>
<p>
BI sets the breakpoint ID of the specified breakpoint. The ID is displayed by BL and when a breakpoint is hit or passed. The ID may be specified as empty.
</p>
<h4><a name="cmdbw"></a><a name="S10.6.3"></a>10.6.3 BW command - Set breakpoint condition <a href="#cmdbw">#</a></h4>
<pre><code> set condition  BW index|AT address [WHEN=]cond
</code></pre>
<p>
The BW command sets the breakpoint condition. If the WHEN keyword and the condition are absent then the condition is reset. That means the point is no longer conditional.
</p>
<h4><a name="cmdbo"></a><a name="S10.6.4"></a>10.6.4 BO command - Set breakpoint preferred offset <a href="#cmdbo">#</a></h4>
<pre><code> set offset     BO index|AT address [OFFSET=]number
</code></pre>
<p>
The BO command sets the breakpoint preferred offset. The preferred offset is used only by the BL command. It is used to determine the segmented address to display. The offset is a word variable for Debug and a dword variable for DebugX. If the OFFSET keyword and the number are absent then the offset is disabled, as if the breakpoint was specified with a linear address. (Internally this is done by setting the offset to all 1 bits. The offset can be explicitly set to FFFFh (Debug) or FFFF_FFFFh (DebugX) for the same effect.)
</p>
<h4><a name="cmdbn"></a><a name="S10.6.5"></a>10.6.5 BN command - Set breakpoint number <a href="#cmdbn">#</a></h4>
<pre><code> set number     BN index|AT address|ALL number
</code></pre>
<p>
BN sets the breakpoint counter of the specified breakpoint with the given index, or all used breakpoints when given the keyword ALL, or the first breakpoint with a matching linear address when given the AT keyword. The number defaults to 8000h.
</p>
<h4><a name="cmdbc"></a><a name="S10.6.6"></a>10.6.6 BC command - Clear breakpoint <a href="#cmdbc">#</a></h4>
<pre><code> clear          BC index|AT address|ALL
</code></pre>
<p>
BC clears the specified breakpoint with the given index, or all breakpoints when given the keyword ALL, or the first breakpoint with a matching linear address when given the AT keyword. This returns the specified breakpoint (or all of them) to the unused state. Any associated ID or condition is deleted by BC too.
</p>
<h4><a name="cmdbd"></a><a name="S10.6.7"></a>10.6.7 BD command - Disable breakpoint <a href="#cmdbd">#</a></h4>
<pre><code> disable        BD index|AT address|ALL
</code></pre>
<p>
Given an index or the keyword ALL or the keyword AT (like BC), BD disables breakpoints that are in use. A disabled breakpoint's address is retained and BP will not allow initialising it anew (except with AT), but it is otherwise skipped in breakpoint handling.
</p>
<h4><a name="cmdbe"></a><a name="S10.6.8"></a>10.6.8 BE command - Enable breakpoint <a href="#cmdbe">#</a></h4>
<pre><code> enable         BE index|AT address|ALL
</code></pre>
<p>
Like BD, but enables breakpoints.
</p>
<h4><a name="cmdbt"></a><a name="S10.6.9"></a>10.6.9 BT command - Toggle breakpoint <a href="#cmdbt">#</a></h4>
<pre><code> toggle         BT index|AT address|ALL
</code></pre>
<p>
Like BE and BD, but toggles breakpoints: A disabled breakpoint is enabled, while an enabled breakpoint is disabled.
</p>
<h4><a name="cmdbs"></a><a name="S10.6.10"></a>10.6.10 BS command - Swap breakpoint <a href="#cmdbs">#</a></h4>
<pre><code> swap           BS index1 index2
</code></pre>
<p>
This command is provided to allow re-ordering existing breakpoints. It takes two indices both of which must refer to valid breakpoints. However, it is allowed to specify the index of an unused breakpoint for either of the parameters (or even both). All data associated with the two breakpoints is swapped.
</p>
<h4><a name="cmdbl"></a><a name="S10.6.11"></a>10.6.11 BL command - List breakpoints <a href="#cmdbl">#</a></h4>
<pre><code> list           BL [index|AT address|ALL]
</code></pre>
<p>
BL lists a specific breakpoint given by its index, or all used breakpoints if given the keyword ALL or given neither an index nor the keyword. When given the AT keyword, all breakpoints with a matching linear address are listed. (This differs from all other B commands, which only select the first matching breakpoint when the AT keyword is given.)
</p>
<p>
When listing all breakpoints only used breakpoints are displayed.
</p>
<p>
The output format for unused breakpoints is as follows:
</p>
<ul><li>
"BP"
</li>
<li>
The byte index given as two hexadecimal digits
</li>
<li>
"Unused"
</li>
</ul>
<p>
The output format for used breakpoints is as follows:
</p>
<ul><li>
"BP"
</li>
<li>
The byte index given as two hexadecimal digits
</li>
<li>
A plus sign if the breakpoint is enabled, a minus sign if it is disabled.
</li>
<li>
"Lin=" followed by the linear address of this breakpoint.
</li>
<li>
The segmented address of this breakpoint. Only displayed if the breakpoint was initially specified with a segmented address, or it had a preferred offset specified with the BP OFFSET= keyword or to the BO command.
</li>
<li>
The breakpoint content byte given in parentheses (generally "CC").
</li>
<li>
"Counter=" followed by the breakpoint counter.
</li>
<li>
"ID: " followed by the breakpoint ID, if any. Depending on the length the ID is shown on the first line or on a second line.
</li>
<li>
"WHEN " followed by the breakpoint condition, if any. This is always written to a line on its own.
</li>
</ul>
<p>
Example output of BL:
</p>
<pre><code>-bp at 100 id = start
-bp at 103 counter = 4000
-bp at 105 when al == 7
-bl
BP 00 + Lin=01_BB70  1BA7:0100 (CC) Counter=8000, ID: start
BP 01 + Lin=01_BB73  1BA7:0103 (CC) Counter=4000
BP 02 + Lin=01_BB75  1BA7:0105 (CC) Counter=8000
 WHEN al == 7
-
</code></pre>
<h3><a name="cmdbu"></a><a name="S10.7"></a>10.7 BU command - Break Upwards <a href="#cmdbu">#</a></h3>
<pre><code>break upwards   BU
</code></pre>
<p>
This command, which is only supported by Debuggable builds (DDebug) or Conditionally Debuggable builds (CDebug), causes the debugger to execute an int3 instruction in its own code segment. This breaks to the next debugger that was installed prior to DDebug or CDebug. Prior to the breakpoint, the message "Breaking to next instance." is displayed.
</p>
<p>
In non-debuggable lDebug builds, the following error message is displayed instead:
</p>
<pre><code>-bu
Already in topmost instance. (This is no debugging build of lDebug.)
-
</code></pre>
<p>
In conditionally debuggable builds, the following message is displayed instead if CDebug is currently not in debuggable mode:
</p>
<pre><code>-bu
Debuggable mode is disabled.
Enable with this command: r DCO6 or= 0100
-
</code></pre>
<h3><a name="cmdboot"></a><a name="S10.8"></a>10.8 BOOT commands - Boot loading support <a href="#cmdboot">#</a></h3>
<p>
The BOOT commands are only available if the debugger is running in boot loaded mode.
</p>
<h4><a name="cmdbootprotocol"></a><a name="S10.8.1"></a>10.8.1 BOOT PROTOCOL= command <a href="#cmdbootprotocol">#</a></h4>
<pre><code>BOOT PROTOCOL=proto [parameters] [partition] [pathnames [cmdline]]
</code></pre>
<p>
This command is used to load a boot sector or kernel using the loaders implemented by the debugger. These loaders attempt to be highly compatible to the original loaders whose load protocols they simulate.
</p>
<h5><a name="cmdbootprotocolprotocol"></a><a name="S10.8.1.1"></a>10.8.1.1 Specify protocol <a href="#cmdbootprotocolprotocol">#</a></h5>
<p>
Using the keyword <code>PROTOCOL</code>, the load protocol to use as a base can be specified. This keyword is required, unless the special protocol named <code>SECTOR</code> is to be used.
</p>
<h5><a name="cmdbootprotocolaltering"></a><a name="S10.8.1.2"></a>10.8.1.2 Altering protocol parameters <a href="#cmdbootprotocolaltering">#</a></h5>
<p>
When specifying a protocol other than the special <code>SECTOR</code> protocol, the protocol parameters can be altered. Each protocol will set up defaults for all of those parameters. Each protocol can be completely described by a combination of parameters and default filenames. Every parameter is indicated by a keyword followed by a numeric expression, or in some cases followed by a segmented address.
</p>
<p>
The following parameters are available:
</p>
<dl><dt>
MINPARA
</dt>
<dd>
Specify minimum amount of paragraphs to load from the first file. It is an error if a file is shorter than that.
</dd>
<dt>
MAXPARA
</dt>
<dd>
Specify maximum amount of paragraphs to load from the first file. It is valid for the file to be shorter or longer than this. If nonzero then it is an error if the file is so long that there is not enough memory to hold this amount of paragraphs. If zero, then as much of the file is loaded as fits.
</dd>
<dt>
SEGMENT
</dt>
<dd>
Specify load address of the data from the first file. The number specified is taken to be the segment of an address within memory.
</dd>
<dt>
ENTRY
</dt>
<dd>
Specify entrypoint to set up in the CS:IP registers. If a single numeric expression, it is taken as the offset (for IP) and the segment value is assumed as zero. That is, CS will be set up to equal the SEGMENT parameter in use. If a segmented address, the offset is used for IP and the segment is used as a relative adjustment to the SEGMENT that is in use to obtain the value for CS. It is valid for the segment value to be positive or negative.
</dd>
<dt>
BPB
</dt>
<dd>
Specify where to load the boot sector with (E)BPB. If a single numeric expression, it is taken as the offset in segment zero. If the segment is specified as 0FFFFh or -1, then the "auto-BPB" feature is used and the boot sector and stack is located at a high address that is not otherwise used. The offset is still set to the offset part in this case.
</dd>
<dt>
CHECKOFFSET
</dt>
<dd>
Specify offset of word value to check. Must not possibly cross a sector boundary. (This is checked by testing that the offset modulo 32 is not equal to 31.) May not be higher than 0FFFEh.
</dd>
<dt>
CHECKVALUE
</dt>
<dd>
Specify value of word to check. If zero, no check occurs. It is an error if this value is nonzero and the check does not match.
</dd>
</dl>
<p>
The following boolean parameters are available. Like the other parameters they read a numeric expression, but this is only checked to be true (non-zero) or false (zero).
</p>
<dl><dt>
SET_DL_UNIT
</dt>
<dd>
If true, set up the DL register with the load unit. This is used by several protocols.
</dd>
<dt>
SET_BL_UNIT
</dt>
<dd>
If true, set up the BL register with the load unit. This is used by the FreeDOS and EDR-DOS protocols.
</dd>
<dt>
SET_SIDI_CLUSTER
</dt>
<dd>
If true, initialise the DI (FAT12/FAT16) or SI:DI (FAT32) registers to hold the number of the first cluster of the first file. This is used by the MS-DOS v7 protocol.
</dd>
<dt>
SET_DSSI_DPT
</dt>
<dd>
If true, initialise DS:SI registers to point to the DPT. (Set equal to the interrupt 1Eh vector.) This may be used by the MS-DOS v6 and IBMDOS protocols.
</dd>
<dt>
PUSH_DPT
</dt>
<dd>
If true, initialise stack to hold a segmented (16:16) pointer to the interrupt 1Eh vector (always 0:78h) and then the DPT address (equal to the interrupt 1Eh vector). This may be used by the MS-DOS v6 and IBMDOS protocols, and is used by the MS-DOS v7 protocol.
</dd>
<dt>
DATASTART_HIDDEN
</dt>
<dd>
If true, modify the data start variable at <code>dword [ss:bp - 4]</code> to include the number of hidden sectors. (The hidden sectors are the partition's start offset in its unit.) This is used by the MS-DOS (v6/v7) and IBMDOS protocols.
</dd>
<dt>
SET_AXBX_DATASTART
</dt>
<dd>
If true, set the AX:BX register pair to the data start variable. If DATASTART_HIDDEN is also set, the registers will receive the value of the data start variable that includes the hidden sectors. This is used by the MS-DOS v6 and IBMDOS protocols.
</dd>
<dt>
SET_DSBP_BPB
</dt>
<dd>
If true, set up the DS register to equal SS. This makes DS:BP point to the boot sector with the (E)BPB. This is used by the EDR-DOS protocol.
</dd>
<dt>
LBA_SET_TYPE
</dt>
<dd>
If true, change the third byte of the boot sector to indicate the use of LBA access functions in the manner expected by the MS-DOS v7 load protocol. That means a 90h (nop instruction) is written if to use CHS access, a 0Eh is written if the FAT type is not FAT32 and to use LBA access, and a 0Ch is written if the FAT type is FAT32 and to use LBA access.
</dd>
<dt>
MESSAGE_TABLE
</dt>
<dd>
If true, include the message table used by the MS-DOS v7 load protocol.
</dd>
<dt>
SET_AXBX_ROOT_HIDDEN
</dt>
<dd>
If true, pass the sector number of the root directory start including hidden sectors in the AX:BX register pair. This is used by the RxDOS.0 and RxDOS.1 protocols.
</dd>
<dt>
NO_BPB
</dt>
<dd>
If true, do not load the boot sector with BPB. This is used by the CHAIN protocol.
</dd>
<dt>
SET_DSSI_PARTINFO
</dt>
<dd>
If true, load sector with partition table to address 00600h and point DS:SI and DS:BP to the active partition table entry within the partition table. This is used by the CHAIN protocol.
</dd>
<dt>
CMDLINE
</dt>
<dd>
If true, allow a command line to be specified after the filenames. This is used by the RxDOS.2, RxDOS.3, and lDOS protocols. As an extension it may be enabled for the FreeDOS protocol, too.
</dd>
</dl>
<h5><a name="cmdbootprotocolpartition"></a><a name="S10.8.1.3"></a>10.8.1.3 Specifying protocol partition <a href="#cmdbootprotocolpartition">#</a></h5>
<p>
After the parameters, the debugger will try to parse a partition specification. Partition specifications are capitalisation-insensitive. A partition may be specified in the following ways:
</p>
<dl><dt>
FDA
</dt>
<dd>
Diskette-style (unpartitioned) file system on unit 00h
</dd>
<dt>
FDB
</dt>
<dd>
Diskette-style (unpartitioned) file system on unit 01h
</dd>
<dt>
HDA1
</dt>
<dd>
MBR-style (partitioned) file system on unit 80h, first primary partition
</dd>
<dt>
HDA2
</dt>
<dd>
MBR-style (partitioned) file system on unit 80h, second primary partition
</dd>
<dt>
HDA5
</dt>
<dd>
MBR-style (partitioned) file system on unit 80h, first logical partition
</dd>
<dt>
HDA6
</dt>
<dd>
MBR-style (partitioned) file system on unit 80h, second logical partition
</dd>
<dt>
HDA(partnumber)
</dt>
<dd>
MBR-style (partitioned) file system on unit 80h, with partition specified by partnumber.
</dd>
<dt>
HDB1
</dt>
<dd>
MBR-style (partitioned) file system on unit 81h, first primary partition
</dd>
<dt>
LDP
</dt>
<dd>
File system that the debugger loaded from
</dd>
<dt>
YDP
</dt>
<dd>
File system that the most recent Y command loaded from
</dd>
<dt>
SDP
</dt>
<dd>
Last used file system
</dd>
<dt>
U00.
</dt>
<dd>
Diskette-style (unpartitioned) file system on unit 00h
</dd>
<dt>
U80.1
</dt>
<dd>
MBR-style (partitioned) file system on unit 80h, first primary partition
</dd>
<dt>
U(unitnumber).(partnumber)
</dt>
<dd>
Unit specified by unitnumber with partition specified by partnumber. The specified partnumber may be specified as an expression in parentheses or as a literal number without parentheses. If it is an expression equal to zero in parentheses then that means unpartitioned.
</dd>
<dt>
LD(partnumber)
</dt>
<dd>
Unit that the debugger loaded from, with partition specified by partnumber.
</dd>
<dt>
YD(partnumber)
</dt>
<dd>
Unit that the most recent Y command loaded from, with partition specified by partnumber.
</dd>
<dt>
SD(partnumber)
</dt>
<dd>
Last used unit, with partition specified by partnumber.
</dd>
</dl>
<p>
If no partition can be parsed, SDP is assumed. Note that partition numbers are parsed as decimal numbers, except if the partition number is specified as an expression with parentheses, in which case the default expression base is used (hexadecimal).
</p>
<h5><a name="cmdbootprotocolnames"></a><a name="S10.8.1.4"></a>10.8.1.4 Specifying protocol filenames <a href="#cmdbootprotocolnames">#</a></h5>
<p>
One or two pathnames may be specified to load, after the parameters or the partition specification. Both will have a default specified by the protocol. The default for the second name may be empty. If the second name is empty, no additional file is searched for.
</p>
<p>
Each pathname may include subdirectory names, indicated by trailing slashes. If a pathname ends in a slash, the default filename is searched in the directory indicated by the pathname. The second pathname may be specified as two slashes to indicate no second file. If either pathname is specified as only one slash, then the default name is searched for in the root directory, exactly as if the pathname was not specified.
</p>
<p>
The 32-byte directory entry of the first file is loaded to 00500h. The 32-byte directory entry of the second file is loaded to 00520h. These entries are used by the MS-DOS v6 and IBMDOS protocols. If no second file is searched for, the 32 bytes at 00520h are filled with zeroes.
</p>
<p>
The blank-padded FCB filenames of the two files are stored within the pseudo boot sector with (E)BPB that the loader sets up for the kernel. This supports kernels scanning the boot sector for informational filenames.
</p>
<h5><a name="cmdbootprotocolcmdline"></a><a name="S10.8.1.5"></a>10.8.1.5 Specifying protocol command line <a href="#cmdbootprotocolcmdline">#</a></h5>
<p>
If the CMDLINE boolean parameter is enabled, then after the two pathnames specifying filenames a command line is parsed. The command line should be separated from the second filename specification with one or more blanks. This command line is passed to the loaded kernel as specified for the lDOS load protocol. (The FreeDOS kernel was extended to also use a command line passed this way.)
</p>
<p>
If the CMDLINE parameter is enabled but no command line content is specified, then an empty command line is passed. Note that this differs from passing no command line. To pass no command line, the CMDLINE parameter must be disabled.
</p>
<p>
As a special case, semicolons are allowed within the specified command line and do not indicate comments.
</p>
<h4><a name="cmdbootlist"></a><a name="S10.8.2"></a>10.8.2 BOOT LIST command <a href="#cmdbootlist">#</a></h4>
<pre><code>BOOT LIST [unit|partition]
</code></pre>
<p>
This command is used to list partitions on an MBR-style partitioned unit.
</p>
<h4><a name="cmdbootdir"></a><a name="S10.8.3"></a>10.8.3 BOOT DIR command <a href="#cmdbootdir">#</a></h4>
<pre><code>BOOT DIR [partition] [pathname]
</code></pre>
<p>
This command is used to list files within a directory of a FAT12, FAT16, or FAT32 file system. A partition specification may be included. A pathname may be included; if it refers to a directory then the contents are listed, otherwise the specified file is listed.
</p>
<h4><a name="cmdbootreadwrite"></a><a name="S10.8.4"></a>10.8.4 BOOT READ and BOOT WRITE commands <a href="#cmdbootreadwrite">#</a></h4>
<pre><code>BOOT READ|WRITE [unit|partition] segment [[HIDDEN=sector] sector [count]]
</code></pre>
<p>
These commands are used to read or write sectors from disks. After the command keyword, a partition specification may be listed. Then, a segment must follow. This specifies the buffer to use.
</p>
<p>
After the segment, an optional HIDDEN= keyword can be specified to specify a 32-bit sector number base. This is useful to implement 33-bit LBA access, but note it will overwrite the partition offset if a partition is specified. Instead of the HIDDEN= keyword, a HIDDENADD= keyword can be specified. It also reads a 32-bit sector number base. However, as opposed to HIDDEN=, HIDDENADD= will add to the hidden value of a specified partition, instead of replacing it. If a whole unit without a partition is specified then HIDDEN= and HIDDENADD= will result in the same offset being used.
</p>
<p>
After the segment and optional hidden keywords, a 32-bit sector number may be specified. It defaults to zero. After the sector number, a 16-bit count may be specified. It defaults to one.
</p>
<p>
Note that sectors are read or written one sector at a time. If the interrupt 13h function used returns an error 9 (boundary error), the debugger will attempt to use its auxiliary buffer to carry out the read or write, copying data as appropriate. The auxiliary buffer is aligned so as not to cross a 64 KiB boundary in memory. (Error 9 is usually returned if trying to access too many sectors at once or when diskette ISA DMA would cross a 64 KiB boundary.)
</p>
<h4><a name="cmdbootquit"></a><a name="S10.8.5"></a>10.8.5 BOOT QUIT command <a href="#cmdbootquit">#</a></h4>
<pre><code>BOOT QUIT
</code></pre>
<p>
This attempts to shut down the machine. A dosemu-specific callout will be attempted first, if dosemu is detected. Using APM will be attempted next, which works on qemu. If neither works, the debugger gives up.
</p>
<h3><a name="cmdc"></a><a name="S10.9"></a>10.9 C command - Compare memory <a href="#cmdc">#</a></h3>
<pre><code>compare         C range address
</code></pre>
<p>
Given a range, the address of which defaults to DS, and another address that also defaults to DS, this command compares strings of bytes, and lists the bytes that differ.
</p>
<h3><a name="cmdd"></a><a name="S10.10"></a>10.10 D command - Dump memory <a href="#cmdd">#</a></h3>
<pre><code>dump            D [range]
dump bytes      DB [range]
dump words      DW [range]
dump dwords     DD [range]
</code></pre>
<p>
Given a range, the address of which defaults to DS, this command dumps memory in hexadecimal and as ASCII characters. The range may be specified with a lines length (refer to <a href="#parrangelines">section 8.4</a>). The default length if none is specified defaults to the number of lines specified in the variable <code>DEFAULTDLINES</code> if it is nonzero, or else the number of bytes specified in the variable <code>DEFAULTDLEN</code>.
</p>
<p>
If a lines length is used, that many lines are dumped. The count of lines does not include the header or trailer if they're used. The count of lines will be inaccurate if the symbolic build is used and the dump lists symbols that point into the dumped data. (The amount of data in this case will match what it should be to produce the requested count of lines if no symbols were listed.) The count of lines will be accurate if either the 40-column friendly mode is enabled or not. If enabled, roughly half as much data is dumped for a given amount of lines, as the 40-column mode dumps up to 8 bytes per line as opposed to the 80-column mode which dumps up to 16 bytes per line.
</p>
<p>
If the DCO option 4 is set, characters with the high bit set (80h to FFh) are displayed as-is in the character dump. Otherwise, they will be treated like control characters, which means replaced by dots.
</p>
<p>
If no range is specified, the D command continues dumping at "d_addr" (ADS:ADO), which is updated by each D command to point after the last shown byte. The default length is determined in the same way as for if a range without a length is specified. If autorepeat is used it behaves the same way as a D command without a range.
</p>
<p>
The default is for D to dump bytes. After a DW or DD command, the autorepeat and plain D (without a range) default to the last-used size. If the default range should be used but the size should be reset to bytes, the DB command can be used. The D command with a range always acts the same as DB.
</p>
<h3><a name="cmddi"></a><a name="S10.11"></a>10.11 DI command - Dump Interrupts <a href="#cmddi">#</a></h3>
<pre><code>dump interrupts DI[R][M][L] interrupt [count]
</code></pre>
<p>
The DI command dumps interrupt vectors from the IVT (86M) or IDT (PM). In PM, for the vectors 00h to 1Fh, the exception handlers are also dumped. In 86 Mode, an interrupt chain is displayed if more than one entrypoint is reachable from the topmost handler. To make the next handler reachable, a handler must match one of several header / entry formats:
</p>
<ul><li>
IBM Interrupt Sharing Protocol (IISP) header (fully standard, with 10EBh entrypoint and EBh jump to hardware reset - this matches what Ralf Brown's AMIS programs recognise)
</li>
<li>
Non-standard IISP header
</li>
<li>
iHPFS-style uninstalled IISP header (EA90h entrypoint)
</li>
<li>
FreeDOS kernel relocation (near call followed by far jump immediate)
</li>
<li>
Just a far jump immediate
</li>
</ul>
<p>
If the R is specified (directly after DI) then 86 Mode handlers are dumped even if in PM.
</p>
<p>
If the M is specified then MCB names are displayed.
</p>
<p>
If the L is specified then AMIS interrupt lists are queried for the interrupt number being dumped. This is so that the involved multiplex numbers and interrupt list indices can be displayed, and also so that hidden chains can be dumped. This means chains that are not reachable from the topmost IVT handler, but are found through the AMIS "Determine Chained Interrupts" call (either 03h pointer or 04h list return). The list index is displayed as FFFFh if the handler was found with 03h pointer return. Otherwise it indicates how many list entries precede the found handler's entry. For example, &#8216;<code>list:0000h</code>&#8217; means that the first list entry matched, and &#8216;<code>list:0001h</code>&#8217; means that the second list entry matched.
</p>
<p>
Specifying the L makes the debugger use its auxiliary buffer. That means the DIL command cannot be used from the RE buffer if either a T/TP/P WHILE condition is used, or the T/TP/P silent buffer is used, or both. In addition, note that with the default buffer size, no more than about a 1000 handlers can be handled. (The actual limit may be as low as 500 handlers if a lot of hidden chains occur.) If the limit is exceeded then the DIL command will display an error. The same error can also occur if the chain loops, or references a single handler from more than one other handler, or a single handler is listed by more than one multiplexer.
</p>
<h3><a name="cmddm"></a><a name="S10.12"></a>10.12 DM command - Dump MCBs <a href="#cmddm">#</a></h3>
<pre><code>dump MCB chain  DM [segment]
</code></pre>
<p>
The DM command dumps an MCB chain. If not given a start MCB segment, and the debugger is running as an 86-DOS application, the start of DOS's MCB chain is used. If given a start MCB segment, this is used as the starting MCB. (Note: In current RxDOS builds, the start MCB is always at segment 60h.)
</p>
<p>
The DM command initially lists the debuggee's PSP. This is only valid when the debugger is running as an 86-DOS application.
</p>
<p>
The MCB chain dump is continued until an MCB is encountered that has neither an M nor a Z signature letter, or the MCB address wraps around the 1 MiB boundary. In particular, this means that a disabled UMB link MCB (usually pointing to the MCB at segment 9FFFh if there is no EBDA nor any pre-boot-loaded programs) will not end the dump.
</p>
<p>
Example output:
</p>
<pre><code>-dm
PSP: 1A73
02B4 4D 0008 0016    352 B SD
02CB 4D 02CC 00BC    2 KiB COMMAND
0388 4D 039D 0013    304 B SYSTEM
039C 4D 039D 0034    832 B SYSTEM
03D1 4D 04A3 0013    304 B LDEBUG
03E5 4D 03E6 00BC    2 KiB COMMAND
04A2 4D 04A3 15CF   87 KiB LDEBUG
1A72 5A 1A73 858C  534 KiB DEBUGGEE
9FFF 4D 0008 3100  196 KiB SC
D100 4D 0008 1EFF  123 KiB SC
F000 4D 02CC 0040   1024 B COMMAND
F041 4D 0000 0492   18 KiB
F4D4 4D 0000 0619   24 KiB
FAEE 4D 0000 0090    2 KiB
FB7F 5A 03E6 0080   2048 B COMMAND
-
</code></pre>
<p>
The columns are as follows:
</p>
<ol><li>
Segment address of MCB in hexadecimal. Always one less than the segment of the memory block contents.
</li>
<li>
Signature letter in hexadecimal. Usually 4D (&#8216;<code>M</code>&#8217;) for linking MCB and 5A (&#8216;<code>Z</code>&#8217;) otherwise.
</li>
<li>
Owner of the MCB in hexadecimal. Values below 50h are special system values. 0 indicates an unused MCB. 8 is the usual <code>SC</code>/<code>SD</code>/<code>S</code> system MCB owner. Higher values are generally process segments. A process segment is usually a memory block that is preceded by an MCB, which is owned by that block itself.
</li>
<li>
Size in paragraphs of the MCB in hexadecimal. A value of zero is valid and indicates an MCB with an empty corresponding memory block.
</li>
<li>
Size in bytes or kibibytes, in decimal.
</li>
<li>
Name of the owner of this MCB. Free MCBs do not have a name. System MCBs have a name that is up to two letters long. Otherwise, the name is read from the MCB owner's own MCB. In this case the name is up to 8 letters long.
</li>
</ol>
<h3><a name="cmddstring"></a><a name="S10.13"></a>10.13 DZ/D$/D#/DW# commands - Dump strings <a href="#cmddstring">#</a></h3>
<pre><code>display strings DZ/D$/D[W]# [address]
</code></pre>
<p>
The D string commands each dump a string at a specified address, which defaults to DS as the segment.
</p>
<ul><li>
DZ displays an ASCIZ string, terminated by a byte with the value 0.
</li>
<li>
D$ displays a CP/M-style string, terminated by a dollar sign character $.
</li>
<li>
D# displays a Pascal-style string with a length count in the first byte.
</li>
<li>
DW# displays a string with a length count in the first word.
</li>
</ul>
<h3><a name="cmddesc"></a><a name="S10.14"></a>10.14 D.A/D.D/D.B/D.L/D.T commands - Descriptor modification <a href="#cmddesc">#</a></h3>
<p>
These commands are only available in lDebugX (DPMI-enabled) builds. They can only be used in Protected Mode. RC is set to 800h when attempting to use any of these commands while not in Protected Mode.
</p>
<pre><code>Descriptor modification commands:
 (only valid in Protected Mode)
  Allocate      D.A
  Deallocate    D.D selector
  Set base      D.B selector base
  Set limit     D.L selector limit
  Set type      D.T selector type
</code></pre>
<h4><a name="cmddescalloc"></a><a name="S10.14.1"></a>10.14.1 D.A command - Allocate descriptor <a href="#cmddescalloc">#</a></h4>
<pre><code>  Allocate      D.A
</code></pre>
<p>
Allocates an LDT descriptor from the DPMI host. Sets the variable DARESULT to the selector if successful, else FFFFh. Sets RC to 801h or a DPMI error code (&gt;= 8000h) on failure.
</p>
<h4><a name="cmddescdealloc"></a><a name="S10.14.2"></a>10.14.2 D.D command - Deallocate descriptor <a href="#cmddescdealloc">#</a></h4>
<pre><code>  Deallocate    D.D selector
</code></pre>
<p>
Deallocates an LDT descriptor. Sets RC to 802h or a DPMI error code (&gt;= 8000h) on failure.
</p>
<h4><a name="cmddescbase"></a><a name="S10.14.3"></a>10.14.3 D.B command - Set descriptor base <a href="#cmddescbase">#</a></h4>
<pre><code>  Set base      D.B selector base
</code></pre>
<p>
Sets the base of an LDT descriptor. A useful shorthand is to use a construct like &#8216;<code>LINEAR cs:0</code>&#8217; to get the base of a descriptor referenced by another selector. Sets RC to 803h or a DPMI error code (&gt;= 8000h) on failure.
</p>
<h4><a name="cmddesclimit"></a><a name="S10.14.4"></a>10.14.4 D.L command - Set descriptor limit <a href="#cmddesclimit">#</a></h4>
<pre><code>  Set limit     D.L selector limit
</code></pre>
<p>
Sets the limit of an LDT descriptor. Limits beyond FFFFFh must be 4 KiB aligned (low 12 bits set). Sets RC to 804h or a DPMI error code (&gt;= 8000h) on failure.
</p>
<h4><a name="cmddesctype"></a><a name="S10.14.5"></a>10.14.5 D.T command - Set descriptor type <a href="#cmddesctype">#</a></h4>
<pre><code>  Set type      D.T selector type
</code></pre>
<p>
Sets the type of an LDT descriptor. 00FAh is a 16-bit code segment, 4000h is the D/B bit (Default size / Big), so 40FAh is a 32-bit code segment. 00F2h is a 16-bit data segment. 8000h is the G bit (Granularity); modifying it may change the limit. The DESCTYPE keyword can be used in an expression to read the current type of a descriptor, refer to <a href="#exprdesctype">section 9.7</a>. Sets RC to 805h or a DPMI error code (&gt;= 8000h) on failure.
</p>
<h3><a name="cmde"></a><a name="S10.15"></a>10.15 E command - Enter memory <a href="#cmde">#</a></h3>
<pre><code>enter           E [address [list]]
</code></pre>
<p>
The E command is used to enter values into memory. If the list is specified, its contents are written to the address specified. Otherwise, the interactive enter mode starts at the address specified. If no address is specified then interactive enter mode starts at the last used address. This is behind the last byte written by a prior E command, or at the last byte displayed in interactive enter mode.
</p>
<p>
In the interactive enter mode, the segmented address is displayed, and then the current byte value (2 hexadecimal digits) found at that address yet. Following the value a dot is displayed. For example:
</p>
<pre><code>-e 100
1FFE:0100  C3.
</code></pre>
<p>
At this point the debugger accepts several different inputs:
</p>
<ul><li>
One or two hexadecimal digits: To enter a new value to be written at this address
</li>
<li>
A blank: To write the new value (if any) and proceed to the next byte
</li>
<li>
A minus: To write the new value (if any) and proceed to the prior byte
</li>
<li>
Carriage Return, Line Feed, or a period: To write the new value (if any) and quit interactive enter mode
</li>
<li>
Backspace: To delete the most recently entered digit of a candidate new value
</li>
<li>
All other inputs are ignored
</li>
</ul>
<p>
After entering a blank, the debugger will either display the next byte's current value in the same line or start a new line with the current segmented address and then the current byte value. A new line is started if the current offset is divisible by 8. For example, after entering 8 blanks:
</p>
<pre><code>-e 100
1FFE:0100  C3.     CC.     CC.     CC.     CC.     CC.     CC.     CC.
1FFE:0108  CC.
</code></pre>
<p>
After entering a minus, the minus is displayed on the current line and then (always) a new line is started to display the new segmented address (with its offset decremented). For example, entering a new value (&#8216;<code>A0</code>&#8217;), then a blank, then a minus, and then another new value (&#8216;<code>A1</code>&#8217;), then a CR:
</p>
<pre><code>-e 100
1FFE:0100  C3.A0   CC.-
1FFE:0100  A0.A1
-
</code></pre>
<h3><a name="cmdf"></a><a name="S10.16"></a>10.16 F command - Fill memory <a href="#cmdf">#</a></h3>
<pre><code>fill            F range [RANGE range|list]
</code></pre>
<p>
The F command fills memory with a byte pattern. The first parameter is the range to fill. The next parameter can be a list, in which case it provides the pattern with which to fill. If the RANGE keyword is provided then the pattern is read from memory as indicated by the range parameter that follows the keyword. The pattern is repeated so as to fill the destination. If the RANGE keyword is used, then the length of the pattern address range is optional. If the length is absent, it is assumed to equal that of the destination range.
</p>
<h3><a name="cmdg"></a><a name="S10.17"></a>10.17 G command - Go <a href="#cmdg">#</a></h3>
<pre><code>go              G [=address] [breakpts]
</code></pre>
<p>
The G command runs the debuggee. It can be given a start address (the segment of which defaults to CS), prefixed by an equals sign, in which case CS:EIP is set to that start address upon running. Note that if there is an error parsing the command line, CS:EIP is not changed. Further, if a breakpoint fails to be written initially, CS:EIP also is not changed.
</p>
<p>
The G command allows specifying breakpoints, which are either segmented addresses (86M or PM addresses depending on DebugX's mode) or linear addresses prefixed by an "@ " or "@(", similar to how the BP command allows a breakpoint specification. G breakpoints are identified by their position in the command line, as the 1st, 2nd, 3rd, etc. By default, 16 G breakpoints are supported.
</p>
<p>
The G AGAIN command re-uses the breakpoints given to the last (successfully parsed) G command. It also allows an equals-sign-prefixed start address like the plain G command, in front of the AGAIN keyword. After the AGAIN keyword, additional breakpoints may be specified.
</p>
<p>
If the command repetition of G is used, it is handled as if "G AGAIN" was entered, that is it re-uses the same breakpoints as those given to the prior G command.
</p>
<p>
A G command that fails to parse will not modify the stored G breakpoint list. If an error occurs during writing breakpoints, the list will have been modified already however.
</p>
<p>
The G LIST command lists the breakpoints given to the last (successfully parsed) G command.
</p>
<p>
The "content" byte in G LIST is usually CCh (the int3 instruction opcode), but retains its original value if a failure occurs during breakpoint byte restoration.
</p>
<p>
Example output of G LIST:
</p>
<pre><code>-g 100 103 105
AX=3000 BX=0000 CX=0200 DX=0000 SP=FFFE BP=0000 SI=0000 DI=0000
DS=1BA7 ES=1BA7 SS=1BA7 CS=1BA7 IP=0103 NV UP EI PL ZR NA PE NC
1BA7:0103 CD21              int     21
-g list
   1st G breakpoint, linear 0001_BB70  1BA7:0100, content CC
   2nd G breakpoint, linear 0001_BB73  1BA7:0103, content CC (is at CS:IP)
   3rd G breakpoint, linear 0001_BB75  1BA7:0105, content CC
-
</code></pre>
<p>
The output is as follows:
</p>
<ul><li>
The 1-based index ordinal of the point.
</li>
<li>
The linear address of the point. (21-bit for Debug, 32-bit for DebugX.)
</li>
<li>
The segmented address of the point. Only listed if the point was specified in a segmented form. That is, if the point was specified with a "@ " or "@(" prefix then no segmented address is saved along with it. (Internally, the word or dword "preferred offset" variable is set to all 1 bits then.) In Protected Mode, the segment is specified as &#8216;<code>CS:</code>&#8217; if the code segment's base matches the preferred offset. Otherwise, an R86M segment is shown with a dollar sign &#8216;<code>$</code>&#8217; prefix if the preferred offset matches any R86M segment. Failing that the offset is shown with a prefix reading &#8216;<code>????:</code>&#8217;.
</li>
<li>
The content byte. This is usually CCh. However, if a breakpoint failed to be restored then the original value is displayed here.
</li>
<li>
Indicator that this point matches the current CS:IP or CS:EIP. This is only displayed if such a match is applicable. Running G AGAIN when this is applicable will step one time to bypass the corresponding point.
</li>
</ul>
<p>
There is another G command: After any equals sign, AGAIN keyword, and/or specified breakpoints, the line can be ended with a REMEMBER keyword. This saves the specified G breakpoint list and then returns control to the user. (The equals address, if any, is discarded.) It allows preparing a G breakpoint list ahead of its use. Auto-repeat, if enabled, will run like G AGAIN and actually run the debuggee after a G REMEMBER command.
</p>
<h3><a name="cmdgoto"></a><a name="S10.18"></a>10.18 GOTO command - Control flow branch <a href="#cmdgoto">#</a></h3>
<pre><code>goto            GOTO :label
</code></pre>
<p>
The GOTO command can only be used when executing from a script file, the command line buffer, or the RE buffer. It lets execution continue at a different point in the file or buffer. Labels are identified by lines that start with a colon, followed by the alphanumeric label name, and optionally followed by a trailing colon. The destination label of the GOTO command may be specified with or without the leading colon.
</p>
<p>
There are several special cases:
</p>
<ul><li>
If the destination label is :SOF (Start Of File) then the file or buffer completely rewinds to its start.
</li>
<li>
If the destination label is :EOF (End Of File) then the file or buffer is closed.
</li>
<li>
If the destination label is not found then the file or buffer is closed, along with an error message.
</li>
</ul>
<h3><a name="cmdh"></a><a name="S10.19"></a>10.19 H command - Hexadecimal add/subtract values <a href="#cmdh">#</a></h3>
<pre><code>hex add/sub     H value1 [value2 [...]]
base display    H BASE=number [GROUP=number] [WIDTH=number] value
</code></pre>
<p>
The H command performs calculation and displays the result. If a single expression is given then its value is displayed, in hexadecimal and then in decimal. If more than one expression is given then two results are displayed, in hexadecimal only. The first result is that which is calculated by adding all expressions. The second result is calculated by subtracting all subsequent expressions from the first expression's value.
</p>
<p>
If a value is above or equal to 8000_0000h then along each display of that value, the value interpreted as a negative two's complement number is listed in parentheses.
</p>
<p>
If the form with the <code>BASE</code> keyword is given then only one number is displayed. The specified base may be between 2 and 36, inclusive. If the <code>GROUP</code> keyword is also used then digits are grouped. The group separator is the underscore, &#8216;<code>_</code>&#8217;. The grouping number must be below or equal 32 (20h). The default grouping is none, same as <code>GROUP=0</code>. If the <code>WIDTH</code> keyword is also used then at least that many digits are displayed. The width must be below or equal 32 (20h). The default width is one digit, same as <code>WIDTH=0</code> or <code>WIDTH=1</code>.
</p>
<p>
Examples:
</p>
<pre><code>-h 1
0001  decimal: 1
-h 1 1
0002  0000
-h 1 1 1
0003  FFFFFFFF (-0001)
-h 1 + 2 * 3
0007  decimal: 7
-h cs * 10
0001A730  decimal: 108336
-h -26
FFFFFFDA (-0026)  decimal: 4294967258 (-38)
-h base=2 group=8 AA55
10101010_01010101
-h base=2 group=4 width=#16 #1234
0000_0100_1101_0010
-h base=#10 group=3 400*400
1_048_576
-h base=3 group=3 FFFF_FFFF
102_002_022_201_221_111_210
-
</code></pre>
<h3><a name="cmdi"></a><a name="S10.20"></a>10.20 I command - Input from port <a href="#cmdi">#</a></h3>
<pre><code>input           I[W|D] port
</code></pre>
<p>
The I commands input from an x86 port. The port can be any number between 0 and FFFFh. Plain I inputs a byte from the specified port. The IW and ID commands input a word or dword respectively.
</p>
<h3><a name="cmdif"></a><a name="S10.21"></a>10.21 IF command - Control flow conditional <a href="#cmdif">#</a></h3>
<pre><code>if numeric      IF [NOT] (cond) THEN cmd
if script file  IF [NOT] EXISTS Y file [:label] THEN cmd
</code></pre>
<p>
The IF command allows specifying a conditionally executed command. This is especially useful for creating conditional control flow branches with the GOTO command (see <a href="#cmdgoto">section 10.18</a>).
</p>
<p>
For the first form, the condition is a numeric expression. If it evaluates to non-zero it is considered true. If the NOT keyword is absent then a true condition expression leads to executing the THEN command. With the NOT keyword present the logic is reversed. Note that if an error occurs in parsing, the THEN command is not executed, regardless of whether the NOT keyword is present.
</p>
<p>
The second form specifies a script file in the same format as accepted by the Y command (refer to <a href="#cmdy">section 10.53</a>). A label may be specified behind the filename, as for the Y command. If the file is found, and contains the specified label if any, then the EXISTS clause is considered true. Depending on the presence of the NOT keyword the THEN command is executed next, or skipped. Note that if an error occurs in parsing, the THEN command is not executed, regardless of whether the NOT keyword is present.
</p>
<p>
Likewise, if an unanticipated error occurs during access then the THEN command is not executed. Anticipated errors include:
</p>
<ol><li>
The drive or ROM-BIOS unit cannot be accessed at all. (Determined by sector 0 being unreadable.)
</li>
<li>
The specified partition is not found.
</li>
<li>
A specified directory is not found.
</li>
<li>
The file is not found.
</li>
<li>
A DOS error occurs opening the file.
</li>
<li>
The file is empty.
</li>
<li>
A specified label is not found.
</li>
</ol>
<h3><a name="cmdinstall"></a><a name="S10.22"></a>10.22 INSTALL command - Install optional features <a href="#cmdinstall">#</a></h3>
<p>
This command can be used to enable certain optional features. The parameters are a list of comma-separated keywords. First the entire list will be parsed. Upon successful parsing of all keywords the command will then start to handle the keywords.
</p>
<p>
Save for the &#8216;<code>AREAS</code>&#8217; keyword, these features can be accessed by using the corresponding DCO4 flags as well. The allowed keywords are:
</p>
<dl><dt>
INT2F
</dt>
<dt>
DPMIHOOK
</dt>
<dd>
(lDebugX-only) Enable installing debugger's interrupt 2Fh hook to intercept the DPMI entrypoint function call. The interrupt hook will actually occur upon running any debuggee code in Real/Virtual 86 Mode. This hook is enabled by default.
</dd>
<dt>
INT08
</dt>
<dt>
INT8
</dt>
<dt>
TIMER
</dt>
<dd>
Install debugger's interrupt 8 hook for the timer tick IRQ. This enables the Interrupt 8 Control pressed detection depending on the INT8CTRL variable (refer to <a href="#varint8ctrl">section 11.24</a>) as well as the double Control-C via serial I/O detection.
</dd>
<dt>
INT2D
</dt>
<dt>
AMIS
</dt>
<dd>
Install debugger's AMIS interface on interrupt 2Dh. A free multiplex number must be available and the existing interrupt vector must be valid for this to succeed.
</dd>
<dt>
AREAS
</dt>
<dd>
(lDDebugX-/lCDebugX-only) Install this debugger's exception areas into another debugger. The other debugger must have its AMIS interface installed at the point in time that this command is run.
</dd>
</dl>
<h3><a name="cmdlp"></a><a name="S10.23"></a>10.23 L command - Load Program <a href="#cmdlp">#</a></h3>
<pre><code>load program    L [address]
</code></pre>
<h3><a name="cmdls"></a><a name="S10.24"></a>10.24 L command - Load Sectors <a href="#cmdls">#</a></h3>
<pre><code>load sectors    L address drive sector count
</code></pre>
<h3><a name="cmdm"></a><a name="S10.25"></a>10.25 M command - Move memory <a href="#cmdm">#</a></h3>
<pre><code>move            M range address
</code></pre>
<h3><a name="cmdmc"></a><a name="S10.26"></a>10.26 M command - Set Machine mode <a href="#cmdmc">#</a></h3>
<pre><code>80x86/x87 mode  M [0..6|C|NC|C2|?]
</code></pre>
<p>
An M command without parameters, with a single &#8216;<code>?</code>&#8217; parameter, with an &#8216;<code>NC</code>&#8217; parameter, or a single expression parameter is a get or set machine mode command.
</p>
<p>
The machine mode is used by the assembler and disassembler to show machine requirements exceeding the current machine.
</p>
<p>
A plain &#8216;<code>M</code>&#8217; or &#8216;<code>M ?</code>&#8217; command displays the current machine.
</p>
<p>
An &#8216;<code>M NC</code>&#8217; or &#8216;<code>M C0</code>&#8217; command sets the current coprocessor to absent.
</p>
<p>
An &#8216;<code>M C</code>&#8217; command sets the current coprocessor to present. It is set to the coprocessor type corresponding to the current machine.
</p>
<p>
An &#8216;<code>M C2</code>&#8217; command sets the current coprocessor to present, and the coprocessor type to 287. This command is only valid if the current machine is a 386.
</p>
<p>
An M command with an expression evaluating to 0 to 6 sets the current machine to the specified numeric value. It also sets the current coprocessor type corresponding to the specified numeric value. Coprocessor presence is not modified by this command however.
</p>
<p>
Note that all machine mode commands that parse a numeric expression (not &#8216;<code>M</code>&#8217;, &#8216;<code>M ?</code>&#8217;, nor &#8216;<code>M NC</code>&#8217;) will actually parse the expression twice due to the internal dispatching between the machine mode commands and the move memory command. If the expression has side-effects then these side-effects will also occur twice. (An example of a side effect is reading the LFSR variable, which will step the LFSR.)
</p>
<h3><a name="cmdn"></a><a name="S10.27"></a>10.27 N command - Set program Name <a href="#cmdn">#</a></h3>
<pre><code>set name        N [[drive:][path]progname.ext [parameters]]
</code></pre>
<p>
This command sets up the filename and parameters to use when setting up a new process using the L (Load program) command. If the filename ends in <code>.COM</code> or <code>.EXE</code> it will be loaded as a DOS program using the interrupt 21h service 4B01h. Otherwise the file is loaded as a flat binary by the debugger itself. In any case, the PSP of the process created by the L command will receive the command line tail, which starts after the filename.
</p>
<p>
Unlike Microsoft's Debug the executable filename is not included in the command line tail, and an existing process won't be modified by the N command. It only sets the filename and tail for L to use.
</p>
<h3><a name="cmdo"></a><a name="S10.28"></a>10.28 O command - Output to port <a href="#cmdo">#</a></h3>
<pre><code>output          O[W|D] port value
</code></pre>
<p>
The O commands output to an x86 port. The port can be any number between 0 and FFFFh. Plain O outputs a byte to the specified port. The OW and OD commands output a word or dword respectively. The value to write is specified by the second expression.
</p>
<h3><a name="cmdp"></a><a name="S10.29"></a>10.29 P command - Proceed <a href="#cmdp">#</a></h3>
<pre><code>proceed         P [=address] [count [WHILE cond] [SILENT [count]]]
</code></pre>
<p>
The P command causes debuggee to run a proceed step. This is the same as tracing (T command) for most instructions, but behaves differently for &#8216;<code>call</code>&#8217;, &#8216;<code>loop</code>&#8217;, and repeated string instructions. For these, a proceed breakpoint is written behind the instruction (similarly to how the G command writes breakpoints), and the debuggee is run without the Trace Flag set.
</p>
<p>
As an exception, if a near immediate &#8216;<code>call</code>&#8217; (opcode E8h) is to be executed and its callee is a &#8216;<code>retf</code>&#8217; or &#8216;<code>iret</code>&#8217; instruction, then the &#8216;<code>call</code>&#8217; instruction is traced and not proceeded past. (This supports some relocation sequences.)
</p>
<p>
Like for the G command, a start address can be given to P prefixed by an equals sign. Next, a count may be specified, which causes the command to execute as many P steps as the count indicates.
</p>
<p>
After a count, a WHILE keyword may be specified, which must be followed by a conditional expression. Execution will only continue if the WHILE expression evaluates to true.
</p>
<p>
After a count (when no WHILE is given) or after a WHILE condition, a SILENT keyword and optional count may be given. In this case, the debugger buffers the register dump and disassembly output of the executed steps, until control returns to the debugger command line. Then, the last dumps stored in the buffer are displayed. If a non-zero count is given, at most that many register dumps are displayed.
</p>
<h3><a name="cmdq"></a><a name="S10.30"></a>10.30 Q command - Quit <a href="#cmdq">#</a></h3>
<pre><code>quit            Q
</code></pre>
<h3><a name="cmdqa"></a><a name="S10.31"></a>10.31 QA command - Quit attached process <a href="#cmdqa">#</a></h3>
<pre><code>quit process    QA
</code></pre>
<p>
The QA command tries to quit an attached process. It does this by resetting the current cs:eip, ss:esp, efl, and (only for DebugX) all segment registers. Then it runs interrupt 21h service 4C00h in the context of the current debuggee. Afterwards it reports on how the debugger regained control and whether the attached process terminated.
</p>
<p>
(If between the current debuggee's process and the debugger's process there is any process that is self-parented, or a breakpoint interrupt or trace interrupt is caused by the current process having terminated, then the attached process may be considered not terminated.)
</p>
<p>
The same underlying function is used by the program-loading L command and the default Q command (except if the debugger is running in TSR mode).
</p>
<h3><a name="cmdqb"></a><a name="S10.32"></a>10.32 QB command - Quit and break <a href="#cmdqb">#</a></h3>
<pre><code>quit and break  QB
</code></pre>
<p>
The QB command is composed of a Q command with a B flag. It indicates to the debugger to quit as usual, but to then run a breakpoint just before the debugger returns the control flow to either the OS, the application that executed the debugger, or (when resident as TSR, device driver, or bootloaded) the current debuggee.
</p>
<p>
When successful, this instance of the debugger has already uninstalled all its interrupt hooks, so the breakpoint will run the interrupt 3 handler that was installed prior to the debugger having been installed.
</p>
<h3><a name="cmdr"></a><a name="S10.33"></a>10.33 R command - Display and set Register values <a href="#cmdr">#</a></h3>
<pre><code>register        R [register [value]]
</code></pre>
<p>
The R command without any register specified dumps the current registers, either displayed as 16-bit or 32-bit values (depending on the RX option), and disassembles the instruction at the current CS:(E)IP location.
</p>
<p>
R with a register, named debugger variable, or memory variable (of the form BYTE/WORD/3BYTE/DWORD [segment:offset]) displays the current value of the specified variable. It then displays a prompt, allowing the user to enter a new value for that variable. Entering a dot (.) or an empty line returns to the default debugger command line.
</p>
<p>
R with a variable, followed by a dot (.), only displays the current value of that variable.
</p>
<p>
R with a variable, followed by an optional equals sign, and followed by an expression, evaluates the expression and assigns its resulting value to the variable. The equals sign may instead be a binary operator with a trailing equals sign, which is handled as an assignment operator.
</p>
<p>
Examples:
</p>
<pre><code>-r ax .
AX 0000
-r ax
AX 0000  :1
-r ax
AX 0001  :.
-r ax += 4
-r ax
AX 0005  :
-r word [cs:0]
WORD [1867:0000] 20CD  :
-r dif .
DIF 0100B00B
-
</code></pre>
<h4><a name="cmdre"></a><a name="S10.33.1"></a>10.33.1 RE command - Run register dump Extended <a href="#cmdre">#</a></h4>
<pre><code>Run R extended  RE
</code></pre>
<p>
The RE command runs the RE buffer commands. Refer to <a href="#helpre">section 15.7</a>.
</p>
<h4><a name="cmdredot"></a><a name="S10.33.2"></a>10.33.2 RE buffer commands <a href="#cmdredot">#</a></h4>
<pre><code>RE commands     RE.LIST|APPEND|REPLACE [commands]
</code></pre>
<p>
RE.LIST lists the RE buffer contents in a way that can be re-used as input to RE.REPLACE.
</p>
<p>
RE.APPEND appends the following commands to the RE buffer.
</p>
<p>
RE.REPLACE replaces the RE buffer with the following commands.
</p>
<p>
The RE buffer usage is described in the ?RE help page (<a href="#helpre">section 15.7</a>).
</p>
<h4><a name="cmdrc"></a><a name="S10.33.3"></a>10.33.3 RC command - Run Command line buffer <a href="#cmdrc">#</a></h4>
<pre><code>Run Commandline RC
</code></pre>
<p>
The RC command runs the command line buffer commands. This is similar to the RE command, except it uses a different buffer. Upon initialisation of the debugger the RC buffer is filled with the content of the <code>/C</code> switch (if any) in case the debugger is loaded as a DOS application, or else the contents of the kernel command line (if any) or the default kernel command line contents. Then the equivalent to an RC command is run.
</p>
<p>
Command line buffer commands are displayed with a prompt consisting of an ampersand <code>&amp;</code> or, for DDebug or for CDebug while in debuggable mode, a tilde followed by an ampersand <code>~&amp;</code>. When both RE and RC are running out of their respective buffers, the RE buffer contents take precedence.
</p>
<h4><a name="cmdrcdot"></a><a name="S10.33.4"></a>10.33.4 RC buffer commands <a href="#cmdrcdot">#</a></h4>
<pre><code>RC commands     RC.LIST|APPEND|REPLACE [commands]
</code></pre>
<p>
RC.LIST lists the command line buffer contents in a way that can be re-used as input to RC.REPLACE.
</p>
<p>
RC.APPEND appends the following commands to the command line buffer.
</p>
<p>
RC.REPLACE replaces the command line buffer with the following commands.
</p>
<h3><a name="cmdrm"></a><a name="S10.34"></a>10.34 RM command - Display MMX Registers <a href="#cmdrm">#</a></h3>
<pre><code>MMX register    RM [BYTES|WORDS|DWORDS|QWORDS]
</code></pre>
<p>
This command dumps all 8 MMX registers. It is only available if MMX is supported by the machine. The optional size keyword specifies an item size, which defaults to BYTES. The BYTES size will match memory order of the byte values, displaying the least significant byte's value first. A size keyword of WORD will display the least significant word first, and so on.
</p>
<h3><a name="cmdrn"></a><a name="S10.35"></a>10.35 RN command - Display FPU Registers <a href="#cmdrn">#</a></h3>
<pre><code>FPU register    RN
</code></pre>
<h3><a name="cmdrx"></a><a name="S10.36"></a>10.36 RX command - Toggle 386 Register Extensions display <a href="#cmdrx">#</a></h3>
<pre><code>toggle 386 regs RX
</code></pre>
<h3><a name="cmdrv"></a><a name="S10.37"></a>10.37 RV command - Show sundry variables <a href="#cmdrv">#</a></h3>
<p>
This command shows the first 16 user-defined variables (refer to <a href="#varv">section 11.15</a>), the current options variables DCO (that is DCO1), DCS, DAO, DAS, the internal flags DIF (that is DIF1), as well as the debugger process segment (DPR), the debugger parent return address (DPI), and the debugger parent process (DPP). lDebugX also shows the debugger process selector (DPS), which is zero in 86 Mode and a selector value in Protected Mode. (All of these variables can be queried manually, the RV command lists them merely for convenience.)
</p>
<p>
Additionally, in the last line the RV command displays the current debuggee's mode. This is either Real 86 Mode, Virtual 86 Mode, or (lDebugX only) Protected Mode with either a 16-bit CS or a 32-bit CS.
</p>
<h3><a name="cmdrvv"></a><a name="S10.38"></a>10.38 RVV command - Show nonzero user-defined variables <a href="#cmdrvv">#</a></h3>
<p>
This command shows all user-defined variables (refer to <a href="#varv">section 11.15</a>) that are not currently zero. Variables are always shown four to a line, so a single non-zero variable will additionally show up to 3 variables that are currently zero.
</p>
<h3><a name="cmdrvm"></a><a name="S10.39"></a>10.39 RVM command - Show debugger segments <a href="#cmdrvm">#</a></h3>
<p>
This command shows various segments (and, in Protected Mode, selectors) used by the debugger. It currently shows the following:
</p>
<ul><li>
Code segment
</li>
<li>
Code2 segment (only if _DUALCODE build)
</li>
<li>
Data segment
</li>
<li>
Entry segment (same as data segment but with a code selector in PM)
</li>
<li>
Auxbuff segment
</li>
<li>
History segment
</li>
</ul>
<h3><a name="cmdrvp"></a><a name="S10.40"></a>10.40 RVP command - Show process information <a href="#cmdrvp">#</a></h3>
<p>
This command shows the debugger's mode as well as some client and debugger process addresses. The mode is one of:
</p>
<ul><li>
Boot loaded
</li>
<li>
Device driver
</li>
<li>
Application
</li>
<li>
Application installed as TSR
</li>
</ul>
<p>
The process addresses include:
</p>
<dl><dt>
PSP
</dt>
<dd>
Process Segment Prefix (always a 86M segment value)
</dd>
<dt>
Parent
</dt>
<dd>
Parent of the PSP (for the debugger the would-be parent for termination, however note that during normal operation the debugger is self-parented)
</dd>
<dt>
Parent Return Address
</dt>
<dd>
16:16 far pointer (a segmented 86M far address) of the process's interrupt 22h value, the entrypoint to return to the parent (again for the debugger this is the would-be PRA for termination, during normal operation the debugger sets up its actual PRA to return control to the debugger itself)
</dd>
<dt>
PSP Selector (only displayed for lDebugX)
</dt>
<dd>
A selector or segment value, appropriate for the current mode, to address the PSP
</dd>
</dl>
<p>
The process addresses can all be accessed individually too, using the following variables:
</p>
<dl><dt>
PSP
</dt>
<dd>
PSP (client), DPSP (debugger)
</dd>
<dt>
Parent
</dt>
<dd>
PARENT (client), DPARENT (debugger)
</dd>
<dt>
Parent Return Address
</dt>
<dd>
PRA (client), DPRA (debugger)
</dd>
<dt>
PSP Selector (always a segment if not lDebugX)
</dt>
<dd>
PSPSEL (client), DPSPSEL (debugger)
</dd>
</dl>
<p>
The DPARENT and DPRA variables read as all zeros when the debugger is loaded in bootloaded, device driver, or resident application (TSR) mode.
</p>
<h3><a name="cmdrvd"></a><a name="S10.41"></a>10.41 RVD command - Show device information <a href="#cmdrvd">#</a></h3>
<p>
This command shows the device header (segmented 86M) far address as well as the size of the device's allocation, in paragraphs. If the debugger is not loaded in device mode then instead a message indicating this is displayed.
</p>
<p>
The two variables can be accessed individually, too. These are the DEVICEHEADER and DEVICESIZE variables. Both of them read as all zeros when the debugger is not loaded in device mode.
</p>
<h3><a name="cmds"></a><a name="S10.42"></a>10.42 S command - Search memory <a href="#cmds">#</a></h3>
<pre><code>search          S range [REVERSE] [RANGE range|list]
</code></pre>
<p>
The S command searches memory for a byte string. The first range specifies the search space. By default, searching will begin at the bottom of the search space and move upwards. If a REVERSE keyword is specified after the range then searching will begin at the top of the search space moving downwards. The search string is specified either with the RANGE keyword followed by another range, or as a list of byte values.
</p>
<p>
The read-only variable SRC (Search Result Count) will receive the 32-bit value that is the amount of matched occurrences. The variable SRS0 receives the first Search Result Segment. Likewise SRO0 receives the first Search Result Offset. SRO1 to SROF hold subsequent Search Result Offsets. SRO is an alias to SRO0. SRO variables are 32-bit in the _PM build lDebugX, 16-bit otherwise. Unused SRO variables are zeroed out by a successful search.
</p>
<p>
The display of search results is as follows:
</p>
<ul><li>
First, the result's segmented address.
</li>
<li>
Then, a hexadeximal dump of the 16 bytes that follow the search string match at this point.
</li>
<li>
Finally, the ASCII character dump of these 16 bytes.
</li>
</ul>
<p>
There is an option to disable the data dump so as to only display the match addresses. If the bit 80_0000h is set in the DCO variable then the data dump is suppressed.
</p>
<h3><a name="cmdsleep"></a><a name="S10.43"></a>10.43 SLEEP command <a href="#cmdsleep">#</a></h3>
<pre><code>sleep           SLEEP count [SECONDS|TICKS]
</code></pre>
<p>
The SLEEP command sleeps for the indicated length. The duration defaults to seconds. If the TICKS keyword is specified then the duration is taken to mean timer ticks. (A timer tick is about 1/18 seconds.) If the input is from DOS or serial I/O then Control-C from the input terminal may be used to cancel the sleep.
</p>
<h3><a name="cmdt"></a><a name="S10.44"></a>10.44 T command - Trace <a href="#cmdt">#</a></h3>
<pre><code>trace           T [=address] [count [WHILE cond] [SILENT [count]]]
</code></pre>
<p>
The T command is similar to the P command. However, T traces most instructions. Depending on the TM option (<a href="#cmdtm">section 10.45</a>), interrupt instructions are also traced (into the interrupt handler) or proceeded past.
</p>
<h4><a name="cmdtp"></a><a name="S10.44.1"></a>10.44.1 TP command - Trace/Proceed past string ops <a href="#cmdtp">#</a></h4>
<pre><code>trace (exc str) TP [=address] [count [WHILE cond] [SILENT [count]]]
</code></pre>
<p>
The TP command is alike the T command, but proceeds past repeated string instructions like the P command would.
</p>
<h3><a name="cmdtm"></a><a name="S10.45"></a>10.45 TM command - Show or set Trace Mode <a href="#cmdtm">#</a></h3>
<pre><code>trace mode      TM [0|1]
</code></pre>
<p>
This instruction accesses the DCO flag 2. If run without an expression then the current status is displayed. Otherwise tracing into interrupts (for the T and TP commands) is enabled (nonzero expression) or disabled (zero expression).
</p>
<h3><a name="cmdtsr"></a><a name="S10.46"></a>10.46 TSR command - Enter TSR mode <a href="#cmdtsr">#</a></h3>
<pre><code>enter TSR mode  TSR
</code></pre>
<h3><a name="cmdu"></a><a name="S10.47"></a>10.47 U command - Disassemble <a href="#cmdu">#</a></h3>
<pre><code>unassemble      U [range]
</code></pre>
<p>
Given a range, the address of which defaults to CS, this command disassembles instructions from memory. The range may be specified with a lines length (refer to <a href="#parrangelines">section 8.4</a>). The default length if none is specified defaults to the number of lines specified in the variable <code>DEFAULTULINES</code> if it is nonzero, or else the number of bytes specified in the variable <code>DEFAULTULEN</code>.
</p>
<p>
If a lines length is used, that many lines are disassembled. However, if a single instruction does not fit within one line due to a too long string of machine code, then the lines used for this instruction will count as one line as concerns the lines length. If an address length is specified, all instructions that are contained within or start within the specified range are disassembled.
</p>
<p>
If no range is specified, the U command continues disassembling at "u_addr" (AUS:AUO), which is updated by each U command to point after the last disassembled byte. The default length is determined in the same way as for if a range without a length is specified. If autorepeat is used it behaves the same way as a U command without a range.
</p>
<h3><a name="cmduninstall"></a><a name="S10.48"></a>10.48 UNINSTALL command - Uninstall optional features <a href="#cmduninstall">#</a></h3>
<p>
This command can be used to disable certain optional features. The parameters are a list of comma-separated keywords. First the entire list will be parsed. Upon successful parsing of all keywords the command will then start to handle the keywords.
</p>
<p>
The available keywords are documented for the INSTALL command, refer to <a href="#cmdinstall">section 10.22</a>.
</p>
<h3><a name="cmdv"></a><a name="S10.49"></a>10.49 V command - Video screen swapping <a href="#cmdv">#</a></h3>
<pre><code>view screen     V [ON|OFF [KEEP|NOKEEP]]
</code></pre>
<p>
The V commands allow to enable or disable video screen swapping. When enabled, the debugger takes care that screen output of debuggee and debugger are strictly separated. This is useful to debug fullscreen text mode programs.
</p>
<p>
The screen will be swapped whenever the debuggee is run with a run command (T/TP/P/G), or when the plain V command is used. The plain V command is provided to watch the debuggee screen while the debugger is active. It ends upon the user entering any key to the debugger terminal.
</p>
<p>
Video screen swapping currently requires an XMS driver, and the debugger will allocate an XMS memory block of 32 KiB.
</p>
<p>
V OFF KEEP will disable video screen swapping but keep the current debugger screen contents. V OFF NOKEEP (and the default for V OFF if the keep flag has not been set) will instead return to the debuggee screen contents. When the Q command succeeds, it executes the equivalent of V OFF. That is it will use the current keep flag.
</p>
<h3><a name="cmdwp"></a><a name="S10.50"></a>10.50 W command - Write Program <a href="#cmdwp">#</a></h3>
<pre><code>write program   W [address]
</code></pre>
<h3><a name="cmdws"></a><a name="S10.51"></a>10.51 W command - Write Sectors <a href="#cmdws">#</a></h3>
<pre><code>write sectors   W address drive sector count
</code></pre>
<h3><a name="cmdx"></a><a name="S10.52"></a>10.52 X commands - Expanded Memory (EMS) commands <a href="#cmdx">#</a></h3>
<pre><code>expanded mem    XA/XD/XM/XR/XS, X? for help
</code></pre>
<h3><a name="cmdy"></a><a name="S10.53"></a>10.53 Y command - Run script file <a href="#cmdy">#</a></h3>
<pre><code>run script      Y [partition/][scriptfile] [:label]
</code></pre>
<p>
The Y command runs a script file. The script file is specified in two different ways, depending on whether the debugger is running as an 86-DOS application or as a boot-loaded kernel replacement.
</p>
<ul><li>
If running as an application, the script name is a regular pathname. It may be quoted with doublequotes if the pathname includes blanks. If the indicated drive supports long filenames (LFNs) then the debugger will first try to open the pathname as an LFN.
</li>
<li>
Otherwise, the script name may start with a partition specification to use. (Refer to the ?BOOT help page in <a href="#helpboot">section 15.11</a> for partition specifications.) Then, the pathname relative to that partition's root directory follows. Long filenames are not supported. Note that it is not valid to run an empty script file when boot-loaded.
</li>
</ul>
<p>
Further, a label may be specified to cause execution to start at that label instead of at the start of the file. This is equivalent to placing a &#8216;<code>GOTO :label</code>&#8217; command at the start of the script file. The colon to indicate a label is required.
</p>
<p>
If execution already is within a script file, then the Y command may be run with only a label (again with the colon required). In that case, the current script file is opened in a subsequent level (handle or boot-loaded script file context) and execution starts at that label.
</p>
<p>
Opening a script file as DOS application only works while DOS is available (InDOS not set). Additionally, if during script file execution DOS becomes unavailable (InDOS is set) then the script file execution is paused. It is resumed once DOS becomes available again. (Control-C with a non-zero IOL variable may still be used to cancel script file execution. DOS is called to close affected handles only if DOS is available.)
</p>
<h3><a name="cmdz"></a><a name="S10.54"></a>10.54 Z commands - Symbolic debugging support <a href="#cmdz">#</a></h3>
<p>
These commands are only supported if the _SYMBOLIC build option is enabled.
</p>
<h4><a name="cmdzswitchs"></a><a name="S10.54.1"></a>10.54.1 Z /S=size - Allocate, resize, or free symbol tables <a href="#cmdzswitchs">#</a></h4>
<p>
The /S switch allows to change the symbol table allocation. The symbol tables may take up up to 256 KiB of 86 Mode memory (below 1024 KiB) or up to 2 MiB of XMS memory. XMS use implies an additional 65 KiB is allocated for padding and a transfer buffer.
</p>
<p>
XMS use can be forced by using a letter X behind the /S. 86 Mode memory use can be forced by using a letter R instead. The prior selection can be undone using an asterisk *, returning to the default behaviour. That means allocate XMS if available, and fall back to 86 Mode memory otherwise.
</p>
<p>
After the equals sign a size is to be specified. The size can be an immediate number or an expression, or the keyword MAX to use the maximum size. An expression must be surrounded by round parentheses. The size specifies the amount of kibibytes to allocate. The size may be zero, which signals to free all symbol tables. This deletes all symbols yet defined. Otherwise, new symbol tables are allocated. Existing symbols will be transferred from the old symbol tables, if there are any. It is an error to specify a symbol table size that is not large enough to hold all currently defined symbols, except for specifying a zero size.
</p>
<p>
Multiple /S switches can be specified within the same Z command. They are processed one by one, that is an error during parsing or execution of a subsequent switch will not make it so a prior switch is skipped.
</p>
<h4><a name="cmdzstat"></a><a name="S10.54.2"></a>10.54.2 Z STAT - Show symbol table statistics <a href="#cmdzstat">#</a></h4>
<p>
This command shows statistics on the current symbol table sizes, including the amount of total, used, and free units. Each of the symbol main array, symbol hash array, and symbol string heap are listed.
</p>
<h4><a name="cmdzadd"></a><a name="S10.54.3"></a>10.54.3 Z ADD - Add a symbol <a href="#cmdzadd">#</a></h4>
<p>
This command is used to add a new symbol. It can be followed by several parameters. These are:
</p>
<dl><dt>
SYMBOL= or S=
</dt>
<dd>
Name of the symbol, may be quoted
</dd>
<dt>
OFFSET= or O=
</dt>
<dd>
Offset of the symbol
</dd>
<dt>
LINEAR= or L=
</dt>
<dd>
Linear address of the symbol
</dd>
<dt>
FLAGS= or F=
</dt>
<dd>
Flags of the symbol
</dd>
<dt>
No keyword
</dt>
<dd>
Segmented address of the symbol to specify the linear address and offset
</dd>
</dl>
<h4><a name="cmdzdel"></a><a name="S10.54.4"></a>10.54.4 Z DEL - Delete a symbol <a href="#cmdzdel">#</a></h4>
<p>
This command deletes a symbol. It can be followed by the symbol name to delete, or a RANGE keyword and an address range parameter, or an UNREFSTRING keyword. The latter is to clean up the symbol string heap by deleting entries that are no longer used.
</p>
<h4><a name="cmdzcommit"></a><a name="S10.54.5"></a>10.54.5 Z COMMIT - Commit temporary symbols <a href="#cmdzcommit">#</a></h4>
<p>
Z ADD will batch up new symbols as temporary symbols. They are committed into the symbol tables upon several conditions, such as no more space for temporary symbols or execution of a command other than Z ADD or Z ABORT. The Z COMMIT command is for forcing the temporary symbols be committed. This should not usually be required.
</p>
<h4><a name="cmdzabort"></a><a name="S10.54.6"></a>10.54.6 Z ABORT - Discard temporary symbols <a href="#cmdzabort">#</a></h4>
<p>
This command discards all temporary symbols batched by prior Z ADD commands if they were not yet committed. If the debugger responds to every command with the error message "Invalid symbol table data!" then something went wrong with the committing of temporary symbols. In this case the Z ABORT command may help to return the debugger to a usable state.
</p>
<h4><a name="cmdzlist"></a><a name="S10.54.7"></a>10.54.7 Z LIST - List symbols <a href="#cmdzlist">#</a></h4>
<h4><a name="cmdzmatch"></a><a name="S10.54.8"></a>10.54.8 Z MATCH - Match symbols <a href="#cmdzmatch">#</a></h4>
<h4><a name="cmdzreloc"></a><a name="S10.54.9"></a>10.54.9 Z RELOC - Relocate symbols <a href="#cmdzreloc">#</a></h4>
<h2><a name="varref"></a><a name="S11"></a>11: Variable Reference <a href="#varref">#</a></h2>
<h3><a name="varregisters"></a><a name="S11.1"></a>11.1 Registers <a href="#varregisters">#</a></h3>
<p>
All debuggee registers can be accessed numerically:
</p>
<ul><li>
<code>al</code>, <code>cl</code>, <code>dl</code>, <code>bl</code>, <code>ah</code>, <code>ch</code>, <code>dh</code>, <code>bh</code>
</li>
<li>
<code>ax</code>, <code>cx</code>, <code>dx</code>, <code>bx</code>, <code>sp</code>, <code>bp</code>, <code>si</code>, <code>di</code>
</li>
<li>
<code>eax</code>, <code>ecx</code>, <code>edx</code>, <code>ebx</code>, <code>esp</code>, <code>ebp</code>, <code>esi</code>, <code>edi</code>
</li>
<li>
<code>es</code>, <code>cs</code>, <code>ss</code>, <code>ds</code>, <code>fs</code>, <code>gs</code>
</li>
<li>
<code>fl</code>, <code>efl</code>, <code>ip</code>, <code>eip</code>
</li>
</ul>
<p>
Each 16-bit register can be used in a register pair, such as:
</p>
<ul><li>
<code>dxax</code>
</li>
<li>
<code>bxcx</code> (used by <code>L</code> load program and <code>W</code> write program commands)
</li>
<li>
<code>sidi</code>
</li>
<li>
<code>csip</code>
</li>
</ul>
<h3><a name="varmmx"></a><a name="S11.2"></a>11.2 MMX registers - MMxy <a href="#varmmx">#</a></h3>
<p>
If MMX is available, the debuggee's MMX registers can be accessed as variables. However, as the debugger only supports 32-bit numbers, only half of a 64-bit MMX register can be accessed. The &#8216;<code>x</code>&#8217; is a digit from 0 to 7. The &#8216;<code>y</code>&#8217;, if present, is one of the following letters:
</p>
<dl><dt>
L
</dt>
<dd>
Access only low 32 bits
</dd>
<dt>
H
</dt>
<dd>
Access only high 32 bits
</dd>
<dt>
Z
</dt>
<dd>
Read low 32 bits, write full 64 bits with zero extension to qword
</dd>
<dt>
S
</dt>
<dd>
Read low 32 bits, write full 64 bits with sign extension to qword
</dd>
<dt>
Letter absent
</dt>
<dd>
Same as letter Z
</dd>
</dl>
<h3><a name="varoptions"></a><a name="S11.3"></a>11.3 Options <a href="#varoptions">#</a></h3>
<h4><a name="vardco"></a><a name="S11.3.1"></a>11.3.1 DCO - Debugger Common Options <a href="#vardco">#</a></h4>
<p>
DCO1 (alias DCO) to DCO6. Dword. Writable.
</p>
<h4><a name="vardcs"></a><a name="S11.3.2"></a>11.3.2 DCS - Debugger Common Startup options <a href="#vardcs">#</a></h4>
<p>
DCS1 (alias DCS) to DCS6. Dword. Read-only.
</p>
<h4><a name="vardif"></a><a name="S11.3.3"></a>11.3.3 DIF - Debugger Internal Flags <a href="#vardif">#</a></h4>
<p>
DIF1 (alias DIF) to DIF6. Dword. Read-only.
</p>
<h4><a name="vardao"></a><a name="S11.3.4"></a>11.3.4 DAO - Debugger Assembly Options <a href="#vardao">#</a></h4>
<p>
Dword. Writable.
</p>
<h4><a name="vardas"></a><a name="S11.3.5"></a>11.3.5 DAS - Debugger Assembly Startup options <a href="#vardas">#</a></h4>
<p>
Dword. Read-only.
</p>
<h4><a name="vardpi"></a><a name="S11.3.6"></a>11.3.6 DPI - Debugger Parent Interrupt 22h <a href="#vardpi">#</a></h4>
<p>
Alias DPRA. Dword. Read-only. Always a 86M segmented pointer. 0 if in TSR mode, or loaded as a device driver, or in bootloaded mode.
</p>
<h4><a name="vardpr"></a><a name="S11.3.7"></a>11.3.7 DPR - Debugger PRocess <a href="#vardpr">#</a></h4>
<p>
Alias DPSP. Word. Read-only. Always a 86M segment.
</p>
<h4><a name="vardpp"></a><a name="S11.3.8"></a>11.3.8 DPP - Debugger Parent Process <a href="#vardpp">#</a></h4>
<p>
Alias DPARENT. Word. Read-only. Always a 86M segment. 0 if in TSR mode, or loaded as a device driver, or in bootloaded mode.
</p>
<h4><a name="vardps"></a><a name="S11.3.9"></a>11.3.9 DPS - Debugger Process Selector <a href="#vardps">#</a></h4>
<p>
0 while in Real or Virtual 8086 Mode, debugger process selector otherwise. (The process selector addresses DebugX's PSP and DATA ENTRY section.) This variable does not exist on non-DPMI lDebug builds.
</p>
<h4><a name="vardpspsel"></a><a name="S11.3.10"></a>11.3.10 DPSPSEL - Debugger PSP Segment/Selector <a href="#vardpspsel">#</a></h4>
<p>
The debugger's PSP segment while in 86 Mode, a selector pointing to the same base while in Protected Mode. This variable exists even on non-DPMI builds, where it is always the same as DPSP.
</p>
<h3><a name="varcounts"></a><a name="S11.4"></a>11.4 Default step counts <a href="#varcounts">#</a></h3>
<dl><dt>
PPC
</dt>
<dd>
Proceed command (<a href="#cmdp">section 10.29</a>) default step count
</dd>
<dt>
TPC
</dt>
<dd>
Trace/Proceed command (<a href="#cmdtp">section 10.44.1</a>) default step count
</dd>
<dt>
TTC
</dt>
<dd>
Trace command (<a href="#cmdt">section 10.44</a>) default step count
</dd>
</dl>
<p>
All of these are doublewords and default to 1. For the respective commands, these counts specify the number of steps to take if none is specified explicitly. This includes when a command is run by autorepeat, refer to <a href="#cmdautorepeat">section 10.1</a>. If one of these is set to zero then it is an error to not specify a count explicitly for the corresponding command.
</p>
<h3><a name="varlengths"></a><a name="S11.5"></a>11.5 Default lengths <a href="#varlengths">#</a></h3>
<dl><dt>
DEFAULTDLEN
</dt>
<dd>
Word. Default length of D/DB/DW/DD commands in bytes (<a href="#cmdd">section 10.10</a>). Only used if DEFAULTDLINES is zero. Default is 128.
</dd>
<dt>
DEFAULTDLINES
</dt>
<dd>
Word. Default length of D/DB/DW/DD commands in lines (<a href="#cmdd">section 10.10</a>). Not used if zero. This is a word variable, but setting it to a value higher than 7FFFh is invalid. Default is zero.
</dd>
<dt>
DEFAULTULEN
</dt>
<dd>
Word. Default length of U command in bytes (<a href="#cmdu">section 10.47</a>). Only used if DEFAULTULINES is zero. Default is 32.
</dd>
<dt>
DEFAULTULINES
</dt>
<dd>
Word. Default length of U command in lines (<a href="#cmdu">section 10.47</a>). Not used if zero. This is a word variable, but setting it to a value higher than 7FFFh is invalid. Default is zero.
</dd>
</dl>
<h3><a name="varlimits"></a><a name="S11.6"></a>11.6 Limits <a href="#varlimits">#</a></h3>
<h4><a name="varrelimit"></a><a name="S11.6.1"></a>11.6.1 RELIMIT - RE buffer execution command limit <a href="#varrelimit">#</a></h4>
<p>
Doubleword. Default is 256. If this many commands are executed from the RE buffer, the execution is aborted and the command that called RE is continued.
</p>
<h4><a name="varrecount"></a><a name="S11.6.2"></a>11.6.2 RECOUNT - RE buffer execution command count <a href="#varrecount">#</a></h4>
<p>
Doubleword. This is reset to zero when RE buffer execution starts. Each time a command is executed from the RE buffer, this variable is incremented. If it reaches the value of RELIMIT, RE buffer execution is aborted.
</p>
<h4><a name="varrclimit"></a><a name="S11.6.3"></a>11.6.3 RCLIMIT - RC buffer execution command limit <a href="#varrclimit">#</a></h4>
<p>
Doubleword. Default is 4096. If this many commands are executed from the RC buffer, the execution is aborted.
</p>
<h4><a name="varrccount"></a><a name="S11.6.4"></a>11.6.4 RCCOUNT - RC buffer execution command count <a href="#varrccount">#</a></h4>
<p>
Doubleword. This is reset to zero when RC buffer execution starts. Each time a command is executed from the RC buffer, this variable is incremented. If it reaches the value of RCLIMIT, RC buffer execution is aborted.
</p>
<h3><a name="varreturncodes"></a><a name="S11.7"></a>11.7 Return Codes <a href="#varreturncodes">#</a></h3>
<h4><a name="varrc"></a><a name="S11.7.1"></a>11.7.1 RC - Return Code <a href="#varrc">#</a></h4>
<p>
Word. This holds the most recent command's return code. If the most recent command succeeded, then this is zero.
</p>
<h4><a name="varerc"></a><a name="S11.7.2"></a>11.7.2 ERC - Error Return Code <a href="#varerc">#</a></h4>
<p>
Word. This holds the most recent non-zero return code.
</p>
<h3><a name="varaddresses"></a><a name="S11.8"></a>11.8 Addresses <a href="#varaddresses">#</a></h3>
<h4><a name="var_a_addr"></a><a name="S11.8.1"></a>11.8.1 A address (AAS:AAO) <a href="#var_a_addr">#</a></h4>
<p>
AAS: word, AAO: doubleword. Default address for the assembler. Updated to point after each assembled instruction.
</p>
<h4><a name="var_d_addr"></a><a name="S11.8.2"></a>11.8.2 D address (ADS:ADO) <a href="#var_d_addr">#</a></h4>
<p>
Default address for memory dumping. Updated to point after each dumped memory content.
</p>
<h4><a name="var_b_addr"></a><a name="S11.8.3"></a>11.8.3 Address behind R disassembly (ABS:ABO) <a href="#var_b_addr">#</a></h4>
<h4><a name="var_u_addr"></a><a name="S11.8.4"></a>11.8.4 U address (AUS:AUO) <a href="#var_u_addr">#</a></h4>
<p>
Default address for the disassembler.
</p>
<h4><a name="var_e_addr"></a><a name="S11.8.5"></a>11.8.5 E address (AES:AEO) <a href="#var_e_addr">#</a></h4>
<p>
Default address for memory entry.
</p>
<h4><a name="var_z_addr"></a><a name="S11.8.6"></a>11.8.6 DZ address (AZS:AZO) <a href="#var_z_addr">#</a></h4>
<p>
Default address for DZ command, ASCIZ strings. Terminated by zero byte.
</p>
<h4><a name="var_c_addr"></a><a name="S11.8.7"></a>11.8.7 D$ address (ACS:ACO) <a href="#var_c_addr">#</a></h4>
<p>
Default address for D$ command, CP/M strings. Terminated by dollar sign &#8216;<code>$</code>&#8217;.
</p>
<h4><a name="var_p_addr"></a><a name="S11.8.8"></a>11.8.8 D# address (APS:APO) <a href="#var_p_addr">#</a></h4>
<p>
Default address for D# command, Pascal strings. Prefixed by length count byte.
</p>
<h4><a name="var_w_addr"></a><a name="S11.8.9"></a>11.8.9 DW# address (AWS:AWO) <a href="#var_w_addr">#</a></h4>
<p>
Default address for DW# command. Prefixed by length count word.
</p>
<h4><a name="var_x_addr"></a><a name="S11.8.10"></a>11.8.10 DX address (AXO) <a href="#var_x_addr">#</a></h4>
<p>
Default address for DX command. (Only included in DebugX.)
</p>
<h3><a name="vario"></a><a name="S11.9"></a>11.9 I/O configuration <a href="#vario">#</a></h3>
<h4><a name="varior"></a><a name="S11.9.1"></a>11.9.1 IOR - I/O Rows <a href="#varior">#</a></h4>
<p>
Byte. Default 1. Sets the number of rows of the terminal used by DOS or BIOS output. Setting this to zero disables paging to the DOS or BIOS output. Setting this to 1 uses the automatic selection. That means the BIOS Data Area byte at address 484h, plus one, is used. If using that byte and it is zero, paging is disabled.
</p>
<h4><a name="varioc"></a><a name="S11.9.2"></a>11.9.2 IOC - I/O Columns <a href="#varioc">#</a></h4>
<p>
Byte. Default 1. Sets the number of columns of the terminal used by BIOS input. Setting this to zero selects a default (80). Setting this to 1 uses the automatic selection. That means the BIOS Data Area word at address 44Ah is used. This is used by the line input handling if inputting from the BIOS terminal (int 16h, int 10h), or if inputting from a DOS terminal when DCO flag 800h is set. A value between 2 and 39, inclusive, is not recommended.
</p>
<h4><a name="variocline"></a><a name="S11.9.3"></a>11.9.3 IOCLINE - I/O Columns for splitting lines in raw input <a href="#variocline">#</a></h4>
<p>
Byte. Default 0. Sets the number of columns of the terminal at which to split overlong lines after the user submits an input line with the raw input line editor. If this is zero, splitting overlong lines is disabled and it is assumed that the terminal will split lines as desired. Otherwise, overlong lines (ie those extending past the IOC width) will be split to have no more than the amount of bytes specified by the IOCLINE variable. Makes most sense to set this equal to IOC or DSC, or else to zero. Any nonzero value is allowed.
</p>
<h4><a name="varios"></a><a name="S11.9.4"></a>11.9.4 IOS - I/O Circular Keypress Buffer Start <a href="#varios">#</a></h4>
<p>
Word. Default 0 or 1Eh. Indicates where the ROM-BIOS's circular keypress buffer starts. Value can be nonzero to force a particular offset in segment 40h. Value can be zero to force using the value at <code>word [40h:80h]</code>, using an extension not available on all systems.
</p>
<p>
On startup the debugger checks whether the extension values are valid. If they are then the default of the IOS variable is left as zero. Otherwise, the default is set to 1Eh, which is the default buffer location.
</p>
<p>
This variable is used to check for Ctrl-C keypresses if the InDOS mode is on (either InDOS flag set, DCO flag 8 set, or in bootloaded mode) and serial I/O is not in use and the flag DCO3 2000_0000h is set. Setting this variable nonzero and equal to IOE disables Ctrl-C checking.
</p>
<p>
Modifying this variable should only be done while it is not in use. That means using DOS for input, using serial I/O for input, or clearing the DCO3 flag 2000_0000h. Modifying this variable and the IOE variable should be done together, so that they are valid together when in use.
</p>
<h4><a name="varioe"></a><a name="S11.9.5"></a>11.9.5 IOE - I/O Circular Keypress Buffer End <a href="#varioe">#</a></h4>
<p>
Word. Default 0 or 3Eh. Indicates where the ROM-BIOS's circular keypress buffer ends. Value can be nonzero to force a particular offset in segment 40h. Value can be zero to force using the value at <code>word [40h:82h]</code>, using an extension not available on all systems.
</p>
<p>
Refer to IOS description above.
</p>
<h4><a name="variol"></a><a name="S11.9.6"></a>11.9.6 IOL - I/O Amount of Script Levels to Cancel <a href="#variol">#</a></h4>
<p>
Word. Default 255. Indicates how many levels of script files and RE buffer execution to cancel when a Control-C input or critical DOS error is detected by the debugger. The effective value will be incremented by one if IOF flag 1 is set and RE buffer execution is in progress.
</p>
<p>
Zero indicates to only cancel the current command. One indicates to cancel the current command, plus the RE buffer execution if any, else up to one level of script file execution. Two indicates to cancel two levels of execution: either the RE buffer execution and one level of script file execution, or up to two levels of script file execution.
</p>
<p>
The debugger always cancels RE buffer execution first if it is in progress. Next, the innermost script file execution is cancelled, if any.
</p>
<h4><a name="variof"></a><a name="S11.9.7"></a>11.9.7 IOF - I/O Flags <a href="#variof">#</a></h4>
<p>
Word. Default 1. Flags for I/O handling. Currently defined:
</p>
<dl><dt>
1
</dt>
<dd>
Extra IOL level for RE buffer execution. If set, RE buffer execution being in progress increments the effective value of the IOL variable.
</dd>
</dl>
<h3><a name="varserial"></a><a name="S11.10"></a>11.10 Serial configuration <a href="#varserial">#</a></h3>
<h4><a name="vardsr"></a><a name="S11.10.1"></a>11.10.1 DSR - Debugger Serial Rows <a href="#vardsr">#</a></h4>
<p>
Byte. Default 24. Sets the number of rows of the terminal connected via serial port. Setting this to zero disables paging to the serial port. Setting this to 1 uses the IOR variable handling.
</p>
<h4><a name="vardsc"></a><a name="S11.10.2"></a>11.10.2 DSC - Debugger Serial Columns <a href="#vardsc">#</a></h4>
<p>
Byte. Default 80. Sets the number of columns of the terminal connected via serial port. Setting this to zero selects a default (80). Setting this to 1 uses the IOC variable handling. This is used by the line input handling. A value between 2 and 39, inclusive, is not recommended.
</p>
<h4><a name="vardst"></a><a name="S11.10.3"></a>11.10.3 DST - Debugger Serial Timeout <a href="#vardst">#</a></h4>
<p>
Byte. Default 15. This gives the number of seconds that the KEEP prompt upon serial connection waits. Setting this to zero waits at the prompt forever.
</p>
<h4><a name="vardsf"></a><a name="S11.10.4"></a>11.10.4 DSF - Debugger Serial FIFO size <a href="#vardsf">#</a></h4>
<p>
Byte. Default 16. This gives the size of the 16550A's built-in TX FIFO to use. Set to 15 if using dosemu before revision gc7f5a828 2019-01-22, see <a href="https://github.com/stsp/dosemu2/issues/748">https://github.com/stsp/dosemu2/issues/748</a>.
</p>
<h4><a name="vardspvi"></a><a name="S11.10.5"></a>11.10.5 DSPVI - Debugger Serial Port Variable Interrupt number <a href="#vardspvi">#</a></h4>
<p>
Byte. Default 0Bh, corresponding to COM2. Use 0Ch for COM1. This specifies the interrupt number to hook so as to be notified of serial events. The use of this variable occurs only when connecting to serial I/O. The value at that point in time is cached for as long as the serial connection is in use.
</p>
<h4><a name="vardspvm"></a><a name="S11.10.6"></a>11.10.6 DSPVM - Debugger Serial Port Variable IRQ Mask <a href="#vardspvm">#</a></h4>
<p>
Word. Default 0000_1000b, corresponding to COM2. Use 0001_0000b for COM1. This specifies the IRQ mask of which IRQs to enable. The low 8 bits correspond to IRQ #0 to #7 and the high 8 bits correspond to IRQ #8 to #15. If any bit of the high 8 bits is set then generally the bit 0100b should be set too, to enable the chained PIC. This circumstance is not automatically detected. The use of this variable occurs only when connecting to serial I/O. The value at that point in time is cached for as long as the serial connection is in use.
</p>
<h4><a name="vardspvp"></a><a name="S11.10.7"></a>11.10.7 DSPVP - Debugger Serial Port Variable base Port <a href="#vardspvp">#</a></h4>
<p>
Word. Default 02F8h, corresponding to COM2. Use 03F8h for COM1. This specifies the I/O port base to address the UART. The use of this variable occurs only when connecting to serial I/O. The value at that point in time is cached for as long as the serial connection is in use.
</p>
<h4><a name="vardspvd"></a><a name="S11.10.8"></a>11.10.8 DSPVD - Debugger Serial Port Variable Divisor latch <a href="#vardspvd">#</a></h4>
<p>
Word. Default 12, corresponding to 9600 baud. This specifies the DL value to set during initialisation. The use of this variable occurs only when connecting to serial I/O.
</p>
<h4><a name="vardspvs"></a><a name="S11.10.9"></a>11.10.9 DSPVS - Debugger Serial Port Variable Settings <a href="#vardspvs">#</a></h4>
<p>
Byte. Default 0000_0011b, corresponding to 8n1. (8n1 = 8 data bits, no parity, 1 stop bit.) This specifies the settings to set up in LCR. The high bit (80h) generally must be clear. The use of this variable occurs only when connecting to serial I/O.
</p>
<h4><a name="vardspvf"></a><a name="S11.10.10"></a>11.10.10 DSPVF - Debugger Serial Port Variable FIFO select <a href="#vardspvf">#</a></h4>
<p>
Byte. Default 0. This specifies what to write to the FCR. The low 3 bits (07h) generally must be clear. The use of this variable occurs only when connecting to serial I/O. The value at that point in time is cached for as long as the serial connection is in use.
</p>
<h3><a name="vartimer"></a><a name="S11.11"></a>11.11 Timer configuration <a href="#vartimer">#</a></h3>
<p>
These variables control some details of the debugger's timers used for waiting in a few places. The affected timers are:
</p>
<ul><li>
SLEEP command
</li>
<li>
KEEP prompt timeout during serial I/O connection
</li>
<li>
Serial output send wait if buffer full
</li>
</ul>
<p>
Unaffected timers include:
</p>
<ul><li>
DCO3 flag 0400_0000h (delay for a tick before writing breakpoints), this only waits until one tick change is observed
</li>
<li>
Interrupt 8 Control pressed check, this does not count tick changes but rather counts interrupt calls
</li>
</ul>
<h4><a name="vargrepidle"></a><a name="S11.11.1"></a>11.11.1 GREPIDLE - getc repeat idle count <a href="#vargrepidle">#</a></h4>
<p>
Byte. Default 0. If the getc function invokes the idle handling, it will repeatedly call the idle function if this variable holds a nonzero value. The value specifies the amount of repetitions past the first call. This variable is intended for debugging.
</p>
<h4><a name="varsrepidle"></a><a name="S11.11.2"></a>11.11.2 SREPIDLE - Sleep repeat idle count <a href="#varsrepidle">#</a></h4>
<p>
Byte. Default 0. If the SLEEP command invokes the idle handling, it will repeatedly call the idle function if this variable holds a nonzero value. The value specifies the amount of repetitions past the first call. This variable is intended for debugging.
</p>
<h4><a name="varsmaxdelta"></a><a name="S11.11.3"></a>11.11.3 SMAXDELTA - Maximum encountered delta ticks <a href="#varsmaxdelta">#</a></h4>
<p>
Word. This value is set anew whenever a wait handler has found a delta ticks larger than the prior value of this variable. After any wait iteration the variable inevitably will be nonzero.
</p>
<h4><a name="varsdeltalimit"></a><a name="S11.11.4"></a>11.11.4 SDELTALIMIT - Delta ticks limit <a href="#varsdeltalimit">#</a></h4>
<p>
Word. Default 5. This variable specifies the upper limit of the delta between tick low words accepted as being accurate.
</p>
<p>
Note that at midnight the tick low word goes from 00AFh or 00B0h to 0000h. The delta appears to be FF51h or FF50h ticks at that point. Therefore the limit should be set small enough that the total wait time is not majorly skewed at midnight.
</p>
<p>
However, it is possible that the idle handling takes so long that more than one tick has actually gone by until the wait handling is run again. For such system setups it can be desirable to set the limit to more than 1.
</p>
<p>
A good compromise is to set the limit to between 1 and 6, inclusive. A limit of 6 ticks only skews for 1/3 of a second at midnight.
</p>
<h3><a name="vardebug1"></a><a name="S11.12"></a>11.12 _DEBUG1 variables <a href="#vardebug1">#</a></h3>
<p>
These variables are not supported by default. The build option _DEBUG1 must be enabled to include them. The Test Counter variables work similarly to permanent breakpoint counters:
</p>
<ul><li>
If the counter AND-masked with 7FFFh is zero, it is at a terminal state.
</li>
<li>
If the counter is not yet at a terminal state, it is decremented.
</li>
<li>
If the counter is decremented to zero, it triggers.
</li>
<li>
If the counter is decremented to 8000h or already at 8000h, it triggers.
</li>
</ul>
<p>
The default values for all counters and addresses is zero.
</p>
<h4><a name="vartrx"></a><a name="S11.12.1"></a>11.12.1 TRx - Test Readmem variables <a href="#vartrx">#</a></h4>
<p>
If a fault is injected into readmem, it returns the value given in TRV.
</p>
<dl><dt>
TRC - Test Readmem Counter
</dt>
<dd>
Word. Each of the TRC0 to TRCF counters gives one counter for readmem fault injection testing.
</dd>
<dt>
TRA - Test Readmem Address
</dt>
<dd>
Doubleword. Each of the TRA0 to TRAF counters gives one linear address for readmem fault injection testing.
</dd>
<dt>
TRV - Test Readmem Value
</dt>
<dd>
Byte. Default 0. If a readmem fault is injected, this byte value is returned by the read instead of the actual memory content.
</dd>
</dl>
<h4><a name="vartwx"></a><a name="S11.12.2"></a>11.12.2 TWx - Test Writemem variables <a href="#vartwx">#</a></h4>
<p>
If a fault is injected into writemem, it returns failure (CY).
</p>
<dl><dt>
TWC - Test Writemem Counter
</dt>
<dd>
Word. Each of the TWC0 to TWCF counters gives one counter for writemem fault injection testing.
</dd>
<dt>
TWA - Test Writemem Address
</dt>
<dd>
Doubleword. Each of the TWA0 to TWAF counters gives one linear address for writemem fault injection testing.
</dd>
</dl>
<h4><a name="vartlx"></a><a name="S11.12.3"></a>11.12.3 TLx - Test getLinear variables <a href="#vartlx">#</a></h4>
<p>
If a fault is injected into getlinear, it returns failure (CY).
</p>
<dl><dt>
TLC - Test getLinear Counter
</dt>
<dd>
Word. Each of the TLC0 to TLCF counters gives one counter for getlinear fault injection testing.
</dd>
<dt>
TLA - Test getLinear Address
</dt>
<dd>
Doubleword. Each of the TLA0 to TLAF counters gives one linear address for getlinear fault injection testing.
</dd>
</dl>
<h4><a name="vartsx"></a><a name="S11.12.4"></a>11.12.4 TSx - Test getSegmented variables <a href="#vartsx">#</a></h4>
<p>
If a fault is injected into getsegmented, it returns failure (CY).
</p>
<dl><dt>
TSC - Test getSegmented Counter
</dt>
<dd>
Word. Each of the TSC0 to TSCF counters gives one counter for getsegmented fault injection testing.
</dd>
<dt>
TSA - Test getSegmented Address
</dt>
<dd>
Doubleword. Each of the TSA0 to TSAF counters gives one linear address for getsegmented fault injection testing.
</dd>
</dl>
<h3><a name="vardebug3"></a><a name="S11.13"></a>11.13 _DEBUG3 variables <a href="#vardebug3">#</a></h3>
<p>
These variables are not supported by default. The build option _DEBUG3 must be enabled to include them. These variables are used to test the read-only masking. Read-only masking makes it so that bits given in the mask are read-only. Bits that are clear in the mask are writable.
</p>
<h4><a name="varmt0"></a><a name="S11.13.1"></a>11.13.1 MT0 - Mask Test 0 <a href="#varmt0">#</a></h4>
<p>
Doubleword. Default 0. Mask AA55_AA55h.
</p>
<h4><a name="varmt1"></a><a name="S11.13.2"></a>11.13.2 MT1 - Mask Test 1 <a href="#varmt1">#</a></h4>
<p>
Doubleword. Default 0011_0022h. Mask 00FF_00FFh.
</p>
<h3><a name="varyy"></a><a name="S11.14"></a>11.14 Y command variables <a href="#varyy">#</a></h3>
<p>
Y command variables can be used when the Y command (as application or bootloaded) has been used to open a script file. YSx (Y Script) variables are generic and refer to whatever Y file is opened. YBx (Y Bootloaded script) variables refer to opened Y files while bootloaded. YHx (Y Handle script) variables refer to opened Y files as application.
</p>
<h4><a name="varysf"></a><a name="S11.14.1"></a>11.14.1 YSF - Y Script Flags <a href="#varysf">#</a></h4>
<p>
Word. Partially read-write, partially read-only.
</p>
<p>
Flag 4000h controls whether script file input is displayed or not. Prepending an AT sign (@) to a line that is read from a script file will hide the input of that line. Setting YSF flag 4000h will hide all input lines instead. The effect is similar to prepending @ to every line.
</p>
<p>
YSF variables are only available while executing script files.
</p>
<h3><a name="varv"></a><a name="S11.15"></a>11.15 V variables - Variables with user-defined purpose <a href="#varv">#</a></h3>
<p>
Doubleword. Default zero. V0 to VF or V00 to VFF each specify one variable. It is valid to refer to any V variable using an index expression. Index expression means that the variable name (<code>V</code>) is immediately followed by an opening parenthesis, followed by a numeric expression which evaluates to a number below 100h.
</p>
<h3><a name="varprocess"></a><a name="S11.16"></a>11.16 PSP variables <a href="#varprocess">#</a></h3>
<p>
All of these are read-only. All of them are zero if in bootloaded mode.
</p>
<h4><a name="varpsp"></a><a name="S11.16.1"></a>11.16.1 PSP - Process Segment Prefix <a href="#varpsp">#</a></h4>
<p>
Word. Always a segment,
</p>
<h4><a name="varppr"></a><a name="S11.16.2"></a>11.16.2 PPR - Process PaRent <a href="#varppr">#</a></h4>
<p>
Alias PARENT. Word. Always a segment.
</p>
<h4><a name="varppi"></a><a name="S11.16.3"></a>11.16.3 PPI - Process Parent Interrupt 22h <a href="#varppi">#</a></h4>
<p>
Alias PRA. Dword. Always a 86 Mode segmented address.
</p>
<h4><a name="varpspsel"></a><a name="S11.16.4"></a>11.16.4 PSPSEL - PSP segment or selector <a href="#varpspsel">#</a></h4>
<p>
Alias PSPS. Word. Segment or selector according to mode.
</p>
<h3><a name="varsr"></a><a name="S11.17"></a>11.17 SR variables - Search Results <a href="#varsr">#</a></h3>
<h4><a name="varsrc"></a><a name="S11.17.1"></a>11.17.1 SRC - Search Result Count <a href="#varsrc">#</a></h4>
<p>
Doubleword. Read only. Amount of matches found by last S command.
</p>
<h4><a name="varsrs"></a><a name="S11.17.2"></a>11.17.2 SRS - Search Result Segment <a href="#varsrs">#</a></h4>
<p>
Word. Read only. SRS0 to SRSF each specify one variable. Search result segments of last S command's matches.
</p>
<h4><a name="varsro"></a><a name="S11.17.3"></a>11.17.3 SRO - Search Result Offset <a href="#varsro">#</a></h4>
<p>
Word or doubleword (DebugX). Read only. SRO0 to SROF each specify one variable. Search result offsets of last S command's matches. It is valid to refer to any SRO variable using an index expression. Index expression means that the variable name (<code>SRO</code>) is immediately followed by an opening parenthesis, followed by a numeric expression which evaluates to a number below 10h.
</p>
<h3><a name="varaccess"></a><a name="S11.18"></a>11.18 Access variables <a href="#varaccess">#</a></h3>
<p>
These variables can be left out of the build. The build option <code>_MEMREF_AMOUNT</code> must be enabled to include them.
</p>
<h4><a name="varaccess-readadr"></a><a name="S11.18.1"></a>11.18.1 READADR <a href="#varaccess-readadr">#</a></h4>
<p>
Doubleword. Read only. READADR0 to READADR3 each specify one variable. (Amount of READADR variables can be configured at build time with the option _ACCESS_VARIABLES_AMOUNT, which defaults to 4.) Linear addresses of string, stack, or explicit memory operand reads. Initialised by the R command. Unused variables are reset to zero by the R command. It is valid to refer to any READADR variable using an index expression. Index expression means that the variable name (<code>READADR</code>) is immediately followed by an opening parenthesis, followed by a numeric expression which evaluates to a number below 4.
</p>
<h4><a name="varaccess-readlen"></a><a name="S11.18.2"></a>11.18.2 READLEN <a href="#varaccess-readlen">#</a></h4>
<p>
Doubleword. Read only. READLEN0 to READLEN3 each specify one variable. Length of string, stack, or explicit memory operand reads. Initialised by the R command. Unused variables are reset to zero by the R command. It is valid to refer to any READLEN variable using an index expression.
</p>
<h4><a name="varaccess-writadr"></a><a name="S11.18.3"></a>11.18.3 WRITADR <a href="#varaccess-writadr">#</a></h4>
<p>
Doubleword. Read only. WRITADR0 to WRITADR3 each specify one variable. Linear addresses of string, stack, or explicit memory operand writes. Initialised by the R command. Unused variables are reset to zero by the R command. It is valid to refer to any WRITADR variable using an index expression.
</p>
<h4><a name="varaccess-writlen"></a><a name="S11.18.4"></a>11.18.4 WRITLEN <a href="#varaccess-writlen">#</a></h4>
<p>
Doubleword. Read only. WRITLEN0 to WRITLEN3 each specify one variable. Length of string, stack, or explicit memory operand writes. Initialised by the R command. Unused variables are reset to zero by the R command. It is valid to refer to any WRITLEN variable using an index expression.
</p>
<h3><a name="varmachine"></a><a name="S11.19"></a>11.19 Machine type variables <a href="#varmachine">#</a></h3>
<dl><dt>
MMT - Maximum Machine Type encountered
</dt>
<dd>
Set whenever the disassembler encounters an instruction requiring a machine type that is higher than this variable's current value. Writable.
</dd>
<dt>
MACHX86 - Machine type for assembler and disassembler
</dt>
<dd>
Current machine type to use for assembler and disassembler. Read-only, use M commands to modify.
</dd>
<dt>
MACHX87 - Coprocessor encoded machine type
</dt>
<dd>
Contains valid argument to M command: C0h if no coprocessor, 0Ch if coprocessor matching machine, C2h if machine is a 386 with a 287 coprocessor. Read-only, use M commands to modify.
</dd>
</dl>
<h3><a name="varlfsr"></a><a name="S11.20"></a>11.20 LFSR variables <a href="#varlfsr">#</a></h3>
<p>
These variables provide access to a simple LFSR (Linear Feedback Shift Register). The default taps are chosen so that a full-range 32-bit LFSR is in use. That means there are 4 giga binary steps, minus one, and all possible 32-bit values are in use except for the all zeros value. A step of the LFSR is done by shifting the old value to the right once. If the bit shifted out is a 1, then the new value is obtained by applying the LFSR taps as a XOR mask to the shift result. If the bit shifted out is a 0, then the new value is simply the shift result.
</p>
<dl><dt>
LFSR - Forward LFSR variable
</dt>
<dd>
Whenever this variable is read, it first executes an LFSR step from the variable's prior value. What is actually read is the new value after the step. This variable is initialised to the constant 2 on startup of the debugger. That means that with the default taps, the first read will return 1, the second 8020_0003h, etc.
</dd>
<dt>
LFSRTAP - Taps to use for the LFSR
</dt>
<dd>
This variable determines the tap bits to use for the LFSR. The default is 8020_0003h, leading to a full-range 32-bit LFSR. Different values may be chosen. The highest bit of the taps value determines how wide the forward LFSR is.
</dd>
<dt>
RLFSR - Reverse LFSR variable
</dt>
<dd>
Similar to the forward LFSR variable, except it runs backwards. This also uses the LFSRTAP variable, however the taps are shifted to the left once, and the least-significant bit is set to 1. In addition, the RLFSRTOP variable is used to get the check mask, by shifting left the constant 1 by RLFSRTOP binary digits places. The check mask is used to determine whether to XOR mask with the taps or not. The check mask also indicates what bit to clear in the taps in order to create the reverse taps.
</dd>
<dt>
RLFSRTOP - Reverse LFSR top bit count
</dt>
<dd>
This variable indicates what bit to check in order to determine whether the reverse LFSR should tap or not. It also indicates what bit to clear in the creation of the reverse taps. Its default is 1Fh (31), which lends itself to a 32-bit taps value. Setting this to a number higher than 1Fh (31) is invalid, and may be subject to behaviour as yet undetermined.
</dd>
</dl>
<h3><a name="varri"></a><a name="S11.21"></a>11.21 RIxxy - Real 86 Mode Interrupt vectors <a href="#varri">#</a></h3>
<p>
These read-only variables provide access to the 86 Mode interrupt vectors in a more accessible format.
</p>
<p>
The xx must be a single or two hexadecimal digits, or an index expression in parentheses which evaluates to a number below 256.
</p>
<p>
The y must be one of the following letters:
</p>
<ul><li>
P - Read vector as a 16:16 segmented pointer (dword), ready for use as a pointer-type expression. (Actual use as a pointer-type expression still requires a <code>PTR</code> type keyword.)
</li>
<li>
S - Read vector's segment. (Word.)
</li>
<li>
O - Read vector's offset. (Word.)
</li>
<li>
L - Read vector as a linear address. (3byte.)
</li>
</ul>
<h3><a name="varfldot"></a><a name="S11.22"></a>11.22 FL.xF - Flag status <a href="#varfldot">#</a></h3>
<p>
These read-only variables support reading the flag status of certain flags.
</p>
<p>
The x must be one letter to form one of the following names:
</p>
<dl><dt>
CF
</dt>
<dd>
Carry Flag
</dd>
<dt>
PF
</dt>
<dd>
Parity Flag
</dd>
<dt>
AF
</dt>
<dd>
Auxiliary carry Flag
</dd>
<dt>
ZF
</dt>
<dd>
Zero Flag
</dd>
<dt>
SF
</dt>
<dd>
Sign Flag
</dd>
<dt>
IF
</dt>
<dd>
Interrupt Flag
</dd>
<dt>
DF
</dt>
<dd>
Direction Flag
</dd>
<dt>
OF
</dt>
<dd>
Overflow Flag
</dd>
</dl>
<p>
Note that the FL.xF flags are read-only. To write to a flag with the R command, it is valid to specify just xF as the variable name, but this is not valid within expressions to read the flag status. (It cannot be supported in expressions because some of the flag names are all hexadecimal digits, such as CF.)
</p>
<h3><a name="varhhresult"></a><a name="S11.23"></a>11.23 HHRESULT - H command result <a href="#varhhresult">#</a></h3>
<p>
Dword. Result of most recent H command. (If H twofold operation is used then the addition result is stored in the variable.)
</p>
<h3><a name="varint8ctrl"></a><a name="S11.24"></a>11.24 INT8CTRL - Interrupt 8 Control pressed detection time <a href="#varint8ctrl">#</a></h3>
<p>
Word. Number of ticks to wait with Control pressed until breaking into the debugger. This variable is only used if the interrupt 8 handler is installed. If the handler detects that Control is pressed continuously for this length of time while not in the debugger then the handler will break into the debugger. Default is set up for about 5 seconds (5 times 18). Set to 0 to disable Control pressed detection.
</p>
<h3><a name="vardevice"></a><a name="S11.25"></a>11.25 Device mode variables <a href="#vardevice">#</a></h3>
<dl><dt>
DEVICEHEADER
</dt>
<dd>
Dword. Read-only. Gives segmented 16:16 address of device header installed by the debugger. Zero if not in device mode.
</dd>
<dt>
DEVICESIZE
</dt>
<dd>
Word. Read-only. Gives amount of paragraphs allocated to device. Zero if not in device mode.
</dd>
</dl>
<h3><a name="varqqcode"></a><a name="S11.26"></a>11.26 QQCODE - Q command termination return code <a href="#varqqcode">#</a></h3>
<p>
Byte. Default 0. This variable is used to set the return code used by the debugger to terminate itself with interrupt 21h service 4Ch. This only happens if the debugger is in application mode and not in TSR mode.
</p>
<h3><a name="vartermcode"></a><a name="S11.27"></a>11.27 TERMCODE - Debuggee termination return code <a href="#vartermcode">#</a></h3>
<p>
Word. Debugger sets this value when it is entered from a debuggee having terminated. The value is what interrupt 21h service 4Dh returned.
</p>
<h2><a name="intref"></a><a name="S12"></a>12: Interrupt Reference <a href="#intref">#</a></h2>
<h3><a name="intmandatory"></a><a name="S12.1"></a>12.1 Mandatory interrupt hooks <a href="#intmandatory">#</a></h3>
<ul><li>
Interrupt 0 - Divide error
</li>
<li>
Interrupt 1 - Trace
</li>
<li>
Interrupt 3 - Breakpoint
</li>
<li>
Interrupt 6 - Invalid opcode
</li>
<li>
Interrupt 18h - Diskless boot hook
</li>
<li>
Interrupt 19h - Boot load
</li>
</ul>
<p>
These interrupts are always hooked by the debugger. For the non-_DEBUG builds they are hooked during initialisation and the debugger attempts to unhook them when quitting. The highest 8 bits of the dword variable DCO4 control whether they are unhooked only if reachable (bits in DCO4 zero), or forcibly so if not reachable (bits in DCO4 ones). If not forcibly unhooking and an interrupt handler is not reachable then the Q command fails.
</p>
<p>
For DDebug, these interrupts are hooked within the <code>run</code> function and unhooked before the <code>run</code> function returns. This unhooking in DDebug is always forcible; that is, if not reachable then the interrupts are unhooked by simply updating the IVT entries with whatever handlers are stored as the next vectors in DDebug's entrypoints.
</p>
<p>
CDebug can run in debuggable mode (like DDebug) or with debuggable mode disabled. If the cmd3 loop detects a change in the DCO6 flag 100h then it will toggle debuggable mode to match the flag. This will involve hooking the mandatory handlers or unhooking them (forcibly).
</p>
<p>
As a special exception, if the debugger detects that it is running on an HP 95LX, then interrupt 6 is never hooked. This supports the different use of this software interrupt by the software or firmware on this type of device.
</p>
<h3><a name="intserial"></a><a name="S12.2"></a>12.2 Serial interrupt <a href="#intserial">#</a></h3>
<p>
This interrupt hook is optional. Setting the DCO flag 4000h (enable serial I/O) instructs the debugger to set up this interrupt hook. Clearing the flag or using the <code>Q</code> command instructs the debugger to unhook its handler. The DCO4 flag 1_0000h controls whether the interrupt unhooking is forcible (flag set) or not (flag clear).
</p>
<p>
The exact interrupt number used as serial interrupt depends on the DSPVI variable at the point in time at which serial I/O is enabled. The default is interrupt 0Bh, corresponding to COM2.
</p>
<h3><a name="int2F"></a><a name="S12.3"></a>12.3 Interrupt 2Fh - Multiplex (DPMI entrypoint) <a href="#int2F">#</a></h3>
<p>
This interrupt is only hooked by DebugX. This interrupt hook is optional. Setting the DCO4 flag 2 instructs the debugger to set up this interrupt hook. The debugger tries to hook this interrupt if it runs application code in Real or Virtual 86 Mode. Clearing the flag, entering Protected Mode, or using the <code>Q</code> command instructs the debugger to unhook its handler. The DCO4 flag 2_0000h controls whether the interrupt unhooking is forcible (flag set) or not (flag clear).
</p>
<p>
This interrupt is hooked to intercept calls to function 1687h, used to detect the DPMI entrypoint. DebugX attempts to hook this service to return its own entrypoint to the caller. The hook may fail if the DPMI host handles interrupt 2Fh calls before chaining to the 86 Mode handler chain. (MS Windows 4.x and older dosemu are reported to do this.)
</p>
<h3><a name="int8"></a><a name="S12.4"></a>12.4 Interrupt 8 - Timer <a href="#int8">#</a></h3>
<p>
This interrupt hook is optional. Setting the DCO4 flag 4 instructs the debugger to set up this interrupt hook. Clearing the flag or using the <code>Q</code> command instructs the debugger to unhook its handler. The DCO4 flag 4_0000h controls whether the interrupt unhooking is forcible (flag set) or not (flag clear).
</p>
<p>
This interrupt is used to detect the double Control-C via serial I/O condition. If the serial I/O handler of the debugger receives two Control-C keypresses while the debugger is busy running an application then the interrupt 8 hook will interrupt the run.
</p>
<p>
This interrupt is also used to detect the Control pressed for 5 seconds condition. Similarly to the serial I/O double Control-C condition, this will make the debugger interrupt the current run.
</p>
<h3><a name="int2D"></a><a name="S12.5"></a>12.5 Interrupt 2Dh - Alternate Multiplex Interrupt <a href="#int2D">#</a></h3>
<p>
This interrupt hook is optional. Setting the DCO4 flag 8 or running an <code>INSTALL AMIS</code> command instructs the debugger to set up this interrupt hook. Clearing the flag or running <code>UNINSTALL AMIS</code> or using the <code>Q</code> command instructs the debugger to unhook its handler. The DCO4 flag 8_0000h controls whether the interrupt unhooking is forcible (flag set) or not (flag clear).
</p>
<p>
This interrupt allows other programs to detect the debugger in the AMIS interface. The vendor string is &#8216;<code>ecm</code>&#8217; and the product string &#8216;<code>lDebug</code>&#8217;. The description string contains the same display name and version as the command line help. There are two real uses of this. First, the AMIS function 4, which will return the list of interrupt entrypoints of the debugger. Second, lDebug's private AMIS functions 30h, 31h, and 33h. They are described in the next sections.
</p>
<p>
This interrupt hook only succeeds if the current handler is valid. That is, an offset not equal to FFFFh and a segment not equal to zero. Another condition is that the debugger needs to detect an unused AMIS multiplex number to allocate. This is done automatically when hooking the interrupt. If either condition fails then a message is displayed and the debugger clears the DCO4 flag 8 on its own.
</p>
<p>
The TRYAMISNUM variable is a writable byte variable. It defaults to 0. Its content is tried first when searching a free multiplex number. After that the debugger currently will search starting from number 0 up to 255.
</p>
<p>
The AMISNUM variable is a read-only byte variable. It contains the actually used multiplex number while the DIF4 flag 8 is set. Otherwise its content is not used and likely stale.
</p>
<p>
Note that the AMIS interface is not AMIS-compliant in a few ways:
</p>
<ul><li>
The uninstall function returns 00h (not implemented).
</li>
<li>
If lDDebug or lCDebug are in debuggable mode, their mandatory handlers will still be listed in the AMIS function 4 interrupt list despite not being installed. (Their downlink fields will contain FFFFh:FFFFh then.)
</li>
<li>
If the build option _CATCHSYSREQ is enabled then the SysReq hook will not be listed for AMIS function 5. The interrupt 8 Control pressed hook is also not listed.
</li>
</ul>
<h4><a name="int2Dfunc30"></a><a name="S12.5.1"></a>12.5.1 AMIS private function 30h - Update IISP Header <a href="#int2Dfunc30">#</a></h4>
<p>
This function is provided for use by our programs that use AMIS multiplexers and interrupt handler entrypoints with IISP headers. All TSRs (including RxANSI, lClock, SEEKEXT, KEEPHOOK, FDAPM, FreeDOS SHARE) and SHUFHOOK use this function. (The debugger itself also uses this function, if it is provided by another resident debugger.)
</p>
<pre><code>lDebug - Update IISP Header
INP:    al = 30h
        ds:si -&gt; source IISP header (or pseudo header)
        es:di -&gt; destination IISP header
OUT:    al = FFh to indicate suppported,
         si and di both incremented by 6
         destination's ieNext field updated from source
        al != FFh if not supported,
         si and di unchanged
CHG:    -
REM:    This function is intended to aid in debugging
         handler re-ordering, removal, or insertion.
         The 32-bit far pointer needs to be updated
         as atomically as possible to avoid using
         an incorrect pointer.
        Test case: Run a program such as our TSRs'
         uninstaller or SHUFHOOK and step through it
         with "tp fffff" when operating on something
         crucial such as interrupt 21h. Without this
         function the machine will crash!
        To enable this function to be called, first run
         the command "r dco4 or= 8", or "INSTALL AMIS"
          (install our AMIS multiplexer handler).
        Other workaround: Use SILENT for TP and disable
         DCO3 flag 4000_0000 (do not call int 21.0B to
         check for Ctrl-C status).
        Yet another workaround: Set flag DCO 8 (enable
         fake InDOS mode, avoid calling int 21h).
REM:    The source may be a pseudo IISP header. In this
         case the ieEntry field should hold 0FEEBh
         (jmp short $) and the ieSignature field
         should indicate the source, eg "VT" for the IVT
         or "NH" for inserting a New Handler.
</code></pre>
<h4><a name="int2Dfunc31"></a><a name="S12.5.2"></a>12.5.2 AMIS private function 31h - Install DPMI entrypoint hook <a href="#int2Dfunc31">#</a></h4>
<p>
This function is for use by lDDebugX (or lCDebugX). It instructs lDebugX (or lCDebugX) to install its DPMI entrypoint hook. It is called by the debuggable debugger right before it tries to install its own hook. Non-zero return values in AL indicate the function is supported. A return value of 0FFh in AL indicates success. Other non-zero return values indicate that no hook occurred. Non-DPMI builds of lDebug return zero. This function should be called only while the InDOS flag is zero.
</p>
<pre><code>lDebugX - Install DPMI hook
INP:    al = 31h
OUT:    al = FFh if installed
        al = FEh..F0h if not installed but call is supported
        al = 00h if not supported
CHG:    -
STT:    not in DOS
</code></pre>
<h4><a name="int2Dfunc32"></a><a name="S12.5.3"></a>12.5.3 AMIS private function 32h - Reserved for lDebugX <a href="#int2Dfunc32">#</a></h4>
<pre><code>lDebugX - Reserved
INP:    al = 32h
</code></pre>
<h4><a name="int2Dfunc33"></a><a name="S12.5.4"></a>12.5.4 AMIS private function 33h - Install fault areas <a href="#int2Dfunc33">#</a></h4>
<p>
This function is by default provided by lDebugX (including the variants lCDebugX and lDDebugX) and is for use by lDDebugX as well as lCDebugX (in debuggable mode). It is called when the debuggable debugger is instructed to INSTALL AREAS.
</p>
<pre><code>lDebugX - Install fault areas
INP:    al = 33h
        dx:bx -&gt; fault area structure of client
OUT:    al = FFh if installed
        al = FEh..01h if not installed but call is supported
        al = 00h if not supported
CHG:    al, bx, cx, dx, si, di, es, ds
REM:    The area structure is defined in the lDebug sources'
         debug.mac file. The first 32 bytes of the structure
         start with a signature word, which is equal to the
         word value CBF9h (encoding the instruction sequence
         of stc \ retf) if the structure is not currently
         installed into any debugger. The remainder of the
         32 bytes, as well as the details of how the first
         two bytes are used otherwise, are private to the
         debugger that provides this service (the server).
        The area structure may be far-called in 86 Mode. The
         only currently defined function (in al) for this call
         is function 00h, which attempts to uninstall the area
         structure which is being called. It is valid for
         either the server or the client to uninstall an
         area structure if they so wish.
        The fields of the structure behind the first 32 bytes
         point to a number of sub-structures and area function
         lists and area lists. All of these structures are
         to be accessed using the same segment as the main
         area structure. They contain linear start and linear
         end addresses, which the client sets up before it
         tries to install the areas. The linear start address
         is also assumed to point to the segment base address
         which is used as the reference for the area functions
         and areas. (They do not have to match the offset part
         actually used to run the code, but the lists must be
         based on the linear start address.)
</code></pre>
<h2><a name="serviceref"></a><a name="S13"></a>13: Service Reference <a href="#serviceref">#</a></h2>
<p>
These are the services called by the debugger.
</p>
<h3><a name="service10"></a><a name="S13.1"></a>13.1 Interrupt 10h <a href="#service10">#</a></h3>
<p>
Used for output while InDOS, DCO flag 8 set, or bootloaded.
</p>
<dl><dt>
Function 02h
</dt>
<dd>
Set cursor position (only used if highlighting)
</dd>
<dt>
Function 03h
</dt>
<dd>
Get cursor position (only used if highlighting, indicates to highlight to int 10h if supported)
</dd>
<dt>
Function 08h
</dt>
<dd>
Get video attribute (only used if highlighting)
</dd>
<dt>
Function 09h
</dt>
<dd>
Set video attribute (only used if highlighting)
</dd>
<dt>
Function 0Eh
</dt>
<dd>
Teletype output
</dd>
<dt>
Function 0Fh
</dt>
<dd>
Get video mode and page
</dd>
</dl>
<h3><a name="service16"></a><a name="S13.2"></a>13.2 Interrupt 16h <a href="#service16">#</a></h3>
<p>
Used for input while InDOS, DCO flag 8 set, or bootloaded.
</p>
<dl><dt>
Function 00h
</dt>
<dd>
Read keypress (wait until keypress available, consume it)
</dd>
<dt>
Function 01h
</dt>
<dd>
Read keypress (return if no keypress available, retain it if any)
</dd>
</dl>
<h3><a name="service2F"></a><a name="S13.3"></a>13.3 Interrupt 2Fh <a href="#service2F">#</a></h3>
<dl><dt>
Function 1261h
</dt>
<dd>
PTS-DOS: Get first UMCB
</dd>
<dt>
Function 1680h
</dt>
<dd>
Idle (Release timeslice to multitasker)
</dd>
<dt>
Function 1687h
</dt>
<dd>
Get DPMI entrypoint (used and hooked by lDebugX)
</dd>
<dt>
Function 4300h, 4310h
</dt>
<dd>
XMS detection and get entrypoint
</dd>
<dt>
Function 4A06h
</dt>
<dd>
RPL adjust base memory size (called by booted debugger if RPL signature present)
</dd>
</dl>
<h3><a name="service12"></a><a name="S13.4"></a>13.4 Interrupt 12h <a href="#service12">#</a></h3>
<p>
Called by booted debugger to determine base memory size.
</p>
<h3><a name="servicepm31"></a><a name="S13.5"></a>13.5 Protected Mode Interrupt 31h <a href="#servicepm31">#</a></h3>
<p>
Used by lDebugX while in Protected Mode.
</p>
<dl><dt>
Function 0000h
</dt>
<dd>
Allocate LDT descriptor
</dd>
<dt>
Function 0001h
</dt>
<dd>
Free LDT descriptor
</dd>
<dt>
Function 0002h
</dt>
<dd>
Get selector from segment
</dd>
<dt>
Function 0003h
</dt>
<dd>
Get next selector increment value
</dd>
<dt>
Function 0006h
</dt>
<dd>
Get segment base
</dd>
<dt>
Function 0007h
</dt>
<dd>
Set segment base
</dd>
<dt>
Function 0008h
</dt>
<dd>
Set segment limit
</dd>
<dt>
Function 0009h
</dt>
<dd>
Set descriptor access rights
</dd>
<dt>
Function 000Ah
</dt>
<dd>
Create alias descriptor
</dd>
<dt>
Function 000Bh
</dt>
<dd>
Get descriptor
</dd>
<dt>
Function 000Ch
</dt>
<dd>
Set descriptor
</dd>
<dt>
Function 0200h
</dt>
<dd>
Get 86M interrupt vector
</dd>
<dt>
Function 0201h
</dt>
<dd>
Set 86M interrupt vector
</dd>
<dt>
Function 0202h
</dt>
<dd>
Get PM exception vector
</dd>
<dt>
Function 0203h
</dt>
<dd>
Set PM exception vector
</dd>
<dt>
Function 0204h
</dt>
<dd>
Get PM interrupt vector
</dd>
<dt>
Function 0205h
</dt>
<dd>
Set PM interrupt vector
</dd>
<dt>
Function 0300h
</dt>
<dd>
Call Real/Virtual 86 Mode interrupt
</dd>
<dt>
Function 0301h
</dt>
<dd>
Call Real/Virtual 86 Mode far function
</dd>
<dt>
Function 0305h
</dt>
<dd>
Get raw mode switch save state addresses
</dd>
<dt>
Function 0306h
</dt>
<dd>
Get raw mode switch addresses
</dd>
<dt>
Function 0900h
</dt>
<dd>
Disable Virtual Interrupt Flag
</dd>
<dt>
Function 0901h
</dt>
<dd>
Enable Virtual Interrupt Flag
</dd>
<dt>
Function 0902h
</dt>
<dd>
Get Virtual Interrupt Flag
</dd>
</dl>
<h3><a name="servicepm2F"></a><a name="S13.6"></a>13.6 Protected Mode Interrupt 2Fh <a href="#servicepm2F">#</a></h3>
<dl><dt>
Function 1680h
</dt>
<dd>
Idle (Release timeslice to multitasker)
</dd>
<dt>
Function 168Ah
</dt>
<dd>
Determine whether DOS extender is available.
</dd>
</dl>
<h3><a name="servicepm21"></a><a name="S13.7"></a>13.7 Protected Mode Interrupt 21h <a href="#servicepm21">#</a></h3>
<dl><dt>
Function 7305h
</dt>
<dd>
Read/write sectors from/to DOS drive. Used to implement L and W command.
</dd>
<dt>
Function 4Ch
</dt>
<dd>
Terminate DPMI client and process
</dd>
</dl>
<h3><a name="servicepm25"></a><a name="S13.8"></a>13.8 Protected Mode Interrupt 25h <a href="#servicepm25">#</a></h3>
<p>
Read sectors from DOS drive. Used to implement L command.
</p>
<h3><a name="servicepm26"></a><a name="S13.9"></a>13.9 Protected Mode Interrupt 26h <a href="#servicepm26">#</a></h3>
<p>
Write sectors to DOS drive. Used to implement W command.
</p>
<h3><a name="serviceE6"></a><a name="S13.10"></a>13.10 Interrupt E6h <a href="#serviceE6">#</a></h3>
<dl><dt>
Function bx = 0, ax = -1
</dt>
<dd>
Used by booted debugger to implement BOOT QUIT command when running in dosemu2.
</dd>
</dl>
<h3><a name="service15"></a><a name="S13.11"></a>13.11 Interrupt 15h <a href="#service15">#</a></h3>
<dl><dt>
Function 87h
</dt>
<dd>
Used by DX command to read memory.
</dd>
<dt>
Function 5301h, 530Eh, 5307h
</dt>
<dd>
Used by booted debugger to implement BOOT QUIT command when running in qemu.
</dd>
<dt>
Function 4DD4h, bx = 0
</dt>
<dd>
Detect HP 95LX
</dd>
</dl>
<h3><a name="service13"></a><a name="S13.12"></a>13.12 Interrupt 13h <a href="#service13">#</a></h3>
<p>
Used by the booted debugger to load scripts or kernel executables.
</p>
<dl><dt>
Function 00h
</dt>
<dd>
Reset disk system
</dd>
<dt>
Function 02h
</dt>
<dd>
Read sector with CHS addressing
</dd>
<dt>
Function 03h
</dt>
<dd>
Write sector with CHS addressing
</dd>
<dt>
Function 08h
</dt>
<dd>
Query CHS geometry
</dd>
<dt>
Function 41h
</dt>
<dd>
Detect LBA extensions support
</dd>
<dt>
Function 42h
</dt>
<dd>
Read sector with LBA
</dd>
<dt>
Function 43h
</dt>
<dd>
Write sector with LBA
</dd>
</dl>
<h3><a name="service19"></a><a name="S13.13"></a>13.13 Interrupt 19h <a href="#service19">#</a></h3>
<p>
Boot load. Used if booting the debugger fails.
</p>
<h3><a name="service2D"></a><a name="S13.14"></a>13.14 Interrupt 2Dh <a href="#service2D">#</a></h3>
<p>
Used to access Alternate Multiplex Interrupt Specification TSRs. Can be used while bootloaded too.
</p>
<dl><dt>
Function 00h
</dt>
<dd>
Installation check. Determines whether an AMIS number is in use.
</dd>
<dt>
Function 04h
</dt>
<dd>
Determine chained interrupts. Determines interrupt entrypoints.
</dd>
<dt>
AMIS private functions 30h, 31h, 33h of lDebug (refer to <a href="#int2D">section 12.5</a>)
</dt>
</dl>
<h3><a name="service25"></a><a name="S13.15"></a>13.15 Interrupt 25h <a href="#service25">#</a></h3>
<p>
Read sectors from DOS drive. Used to implement L command. Only used if the debugger is loaded as a DOS application.
</p>
<h3><a name="service26"></a><a name="S13.16"></a>13.16 Interrupt 26h <a href="#service26">#</a></h3>
<p>
Write sectors to DOS drive. Used to implement W command. Only used if the debugger is loaded as a DOS application.
</p>
<h3><a name="service21"></a><a name="S13.17"></a>13.17 Interrupt 21h <a href="#service21">#</a></h3>
<p>
DOS services. Only used while not InDOS. (Only used if the debugger is loaded as a DOS application.)
</p>
<dl><dt>
Function 08h
</dt>
<dd>
Get standard input keypress
</dd>
<dt>
Function 0Ah
</dt>
<dd>
Line buffered standard input
</dd>
<dt>
Function 0Bh
</dt>
<dd>
Check standard input available / Check Control-C
</dd>
<dt>
Function 19h
</dt>
<dd>
Get default drive
</dd>
<dt>
Function 25h
</dt>
<dd>
Set interrupt vector
</dd>
<dt>
Function 29h
</dt>
<dd>
Parse filename
</dd>
<dt>
Function 3000h
</dt>
<dd>
Get DOS version
</dd>
<dt>
Function 3306h
</dt>
<dd>
Get true DOS version
</dd>
<dt>
Function 34h
</dt>
<dd>
Get InDOS flag address
</dd>
<dt>
Function 35h
</dt>
<dd>
Get interrupt vector
</dd>
<dt>
Function 3700h
</dt>
<dd>
Get switch character
</dd>
<dt>
Function 3Ch
</dt>
<dd>
Create file
</dd>
<dt>
Function 3Dh
</dt>
<dd>
Open file
</dd>
<dt>
Function 3Eh
</dt>
<dd>
Close file
</dd>
<dt>
Function 3Fh
</dt>
<dd>
Read from file
</dd>
<dt>
Function 40h
</dt>
<dd>
Write to file (Used to write to stdout too)
</dd>
<dt>
Function 41h
</dt>
<dd>
Delete file
</dd>
<dt>
Function 42h
</dt>
<dd>
Seek in file
</dd>
<dt>
Function 45h
</dt>
<dd>
Duplicate file handle
</dd>
<dt>
Function 4400h
</dt>
<dd>
Used in initialisation to determine whether handle is to a device
</dd>
<dt>
Function 440Dh
</dt>
<dd>
Used to lock and unlock drives by L or W commands
</dd>
<dt>
Function 48h
</dt>
<dd>
Allocate memory
</dd>
<dt>
Function 4Ah
</dt>
<dd>
Resize memory
</dd>
<dt>
Function 4B01h
</dt>
<dd>
Load executable and return to debugger
</dd>
<dt>
Function 4Ch
</dt>
<dd>
Terminate process
</dd>
<dt>
Function 4Dh
</dt>
<dd>
Get process return code
</dd>
<dt>
Function 50h
</dt>
<dd>
Set PSP
</dd>
<dt>
Function 51h
</dt>
<dd>
Get PSP
</dd>
<dt>
Function 52h
</dt>
<dd>
Get List of Lists
</dd>
<dt>
Function 55h
</dt>
<dd>
Create child PSP
</dd>
<dt>
Function 58h
</dt>
<dd>
Get or set memory allocation strategy and UMB link status
</dd>
<dt>
Function 5D06h
</dt>
<dd>
Get DOS SDA address (used to switch active PSP)
</dd>
<dt>
Function 6Ch
</dt>
<dd>
Extended open/create
</dd>
<dt>
Function 716Ch
</dt>
<dd>
Extended open/create with LFN
</dd>
<dt>
Function 71A0h
</dt>
<dd>
Get LFN volume information
</dd>
<dt>
Function 7305h
</dt>
<dd>
Read/write sectors from/to DOS drive. Used to implement L and W command.
</dd>
</dl>
<h3><a name="service67"></a><a name="S13.18"></a>13.18 Interrupt 67h <a href="#service67">#</a></h3>
<p>
EMS services. Used by X commands.
</p>
<h2><a name="cmdhelp"></a><a name="S14"></a>14: Command help <a href="#cmdhelp">#</a></h2>
<h3><a name="cmdhelp-ldebug"></a><a name="S14.1"></a>14.1 lDebug help <a href="#cmdhelp-ldebug">#</a></h3>
<pre><code>lDebug (YYYY-MM-DD), debugger.

Usage: LDEBUG[.COM] [/C=commands] [[drive:][path]progname.ext [parameters]]

/C=commands   semicolon-separated list of commands (quote spaces)
/B            run a breakpoint within initialisation
/F[+|-]       always treat executable file as a flat binary
/E[+|-]       for flat binaries set up Stack Segment != PSP
/V[+|-]       enable/disable video screen swapping
progname.ext  (executable) file to debug or examine
parameters    parameters given to program

For a list of debugging commands, run LDEBUG and type ? at the prompt.
</code></pre>
<h3><a name="cmdhelp-instsect"></a><a name="S14.2"></a>14.2 INSTSECT help <a href="#cmdhelp-instsect">#</a></h3>
<pre><code>INSTSECT: Install boot sectors. 2018 by C. Masloch

Usage of the works is permitted provided that this
instrument is retained with the works, so that any entity
that uses the works is notified of this instrument.

DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.

Options:

a:              load or update boot sectors of specified drive
/M=filename     operate on FS image file instead of drive
/MN             operate on drive instead of image file (default)
/MS=number      set sector size of FS image file (default 512)
/MO=number      set offset in image file in bytes (default 0)
/MOx=number     set offset (x = S sectors, K 1024, M 1024 * 1024)

/Fx=filename    replace Xth name in the boot sector, X = 1 to 4
/F=filename     alias to /F1=filename

/U KEEP         keep default/current boot unit handling (default)
/U AUTO         patch boot loader to use auto boot unit handling
/U xx           patch boot loader to use XXh as a fixed unit

/P KEEP         keep default/current part info handling (default)
/P AUTO         patch boot loader to use auto part info handling
/P NONE         patch boot loader to use fixed part info

/Q KEEP         keep default/current query geometry handling (default)
/Q AUTO         patch boot loader to use auto query geometry handling
/Q NONE         patch boot loader to use fixed geometry

/L KEEP         keep default/current LBA handling (default)
/L AUTO         patch boot loader to use auto LBA handling
/L AUTOHDD      patch boot loader to use auto LBA (HDD-only) handling
/L NONE         patch boot loader to use only CHS

/SR             do not read boot sector from source file (default)
/S=filename     read boot sector loader from source file
/S12=filename   as /S=filename but only for FAT12 (also /S16, /S32)
/SV             validate boot sector jump and FS ID (default)
/SN             do not validate boot sector jump and FS ID

/BS             write boot sector to drive's boot sector (default)
/B=filename     write boot sector to file, not to drive
/BN             do not write boot sector
/BR             replace boot sector loader with built-in one (default)
/BO             keep original boot sector
/BC             restore boot sector from backup copy

Only applicable for FAT32 with sector size below or equal to 512 bytes:

/IS             write FSIBOOT to drive's FSINFO sector (default)
/I=filename     write FSIBOOT to file, not to drive
/IB             write FSIBOOT to boot sector file (see /B=filename)
/IN             do not write FSIBOOT
/IR             replace reserved field with built-in FSIBOOT (default)
/IO             keep original reserved fields (including FSIBOOT area)
/IC             restore FSINFO from backup copy
/IZ             zero out reserved fields (including FSIBOOT area)
/II             leave invalid FSINFO structure
/IV             make valid FSINFO if there is none (default)

Only applicable for FAT32:

/C              force writing to backup copies
/CB             force writing sector to backup copy
/CI             force writing info to backup copy
/CN             disable writing to backup copies
/CNB            disable writing sector to backup copy
/CNI            disable writing info to backup copy
/CS             only write backup copies if writing sectors (default)
/CSB            only write sector to backup copy if writing sector
/CSI            only write info to backup copy if writing sector
</code></pre>
<h2><a name="helptopics"></a><a name="S15"></a>15: Online help pages <a href="#helptopics">#</a></h2>
<h3><a name="helpmain"></a><a name="S15.1"></a>15.1 ? - Main online help <a href="#helpmain">#</a></h3>
<pre><code>lDebug (YYYY-MM-DD) help screen
assemble        A [address]
set breakpoint  BP index|AT|NEW address
                  [[NUMBER=]number] [WHEN=cond] [ID=id]
 set ID         BI index|AT address [ID=]id
 set condition  BW index|AT address [WHEN=]cond
 set offset     BO index|AT address [OFFSET=]number
 set number     BN index|AT address|ALL number
 clear          BC index|AT address|ALL
 disable        BD index|AT address|ALL
 enable         BE index|AT address|ALL
 toggle         BT index|AT address|ALL
 swap           BS index1 index2
 list           BL [index|AT address|ALL]
compare         C range address
dump            D [range]
dump bytes      DB [range]
dump words      DW [range]
dump dwords     DD [range]
dump interrupts DI[R][M][L] interrupt [count]
dump MCB chain  DM [segment]
display strings DZ/D$/D[W]# [address]
enter           E [address [list]]
fill            F range [RANGE range|list]
go              G [=address] [breakpts]
goto            GOTO :label
hex add/sub     H value1 [value2 [...]]
base display    H BASE=number [GROUP=number] [WIDTH=number] value
input           I[W|D] port
if numeric      IF [NOT] (cond) THEN cmd
if script file  IF [NOT] EXISTS Y file [:label] THEN cmd
load program    L [address]
load sectors    L address drive sector count
move            M range address
80x86/x87 mode  M [0..6|C|NC|C2|?]
set name        N [[drive:][path]progname.ext [parameters]]
output          O[W|D] port value
proceed         P [=address] [count [WHILE cond] [SILENT [count]]]
quit            Q
quit process    QA
quit and break  QB
register        R [register [value]]
Run R extended  RE
RE commands     RE.LIST|APPEND|REPLACE [commands]
Run Commandline RC
RC commands     RC.LIST|APPEND|REPLACE [commands]
MMX register    RM [BYTES|WORDS|DWORDS|QWORDS]
FPU register    RN
toggle 386 regs RX
search          S range [REVERSE] [RANGE range|list]
sleep           SLEEP count [SECONDS|TICKS]
trace           T [=address] [count [WHILE cond] [SILENT [count]]]
trace (exc str) TP [=address] [count [WHILE cond] [SILENT [count]]]
trace mode      TM [0|1]
enter TSR mode  TSR
unassemble      U [range]
view screen     V [ON|OFF [KEEP|NOKEEP]]
write program   W [address]
write sectors   W address drive sector count
expanded mem    XA/XD/XM/XR/XS, X? for help
run script      Y [partition/][scriptfile] [:label]

Additional help topics:
 Registers      ?R
 Flags          ?F
 Conditionals   ?C
 Expressions    ?E
 Variables      ?V
 R Extended     ?RE
 Run keywords   ?RUN
 Options pages  ?OPTIONS
 Options        ?O
 Boot loading   ?BOOT
 lDebug build   ?BUILD
 lDebug build   ?B
 lDebug sources ?SOURCE
 lDebug license ?L
</code></pre>
<h3><a name="helpr"></a><a name="S15.2"></a>15.2 ?R - Registers <a href="#helpr">#</a></h3>
<pre><code>Available 16-bit registers:             Available 32-bit registers: (386+)
AX      Accumulator                     EAX
BX      Base register                   EBX
CX      Counter                         ECX
DX      Data register                   EDX
SP      Stack pointer                   ESP
BP      Base pointer                    EBP
SI      Source index                    ESI
DI      Destination index               EDI
DS      Data segment
ES      Extra segment
SS      Stack segment
CS      Code segment
FS      Extra segment 2 (386+)
GS      Extra segment 3 (386+)
IP      Instruction pointer             EIP
FL      Flags                           EFL
</code></pre>
<p>
Enter ?F to display the recognized flags.
</p>
<h3><a name="helpf"></a><a name="S15.3"></a>15.3 ?F - Flags <a href="#helpf">#</a></h3>
<p>
Recognized flags:
</p>
<pre><code>Value   Name                      Set                     Clear
0800  OF  Overflow Flag         OV  Overflow            NV  No overflow
0400  DF  Direction Flag        DN  Down                UP  Up
0200  IF  Interrupt Flag        EI  Enable interrupts   DI  Disable interrupts
0080  SF  Sign Flag             NG  Negative            PL  Plus
0040  ZF  Zero Flag             ZR  Zero                NZ  Not zero
0010  AF  Auxiliary Flag        AC  Auxiliary carry     NA  No auxiliary carry
0004  PF  Parity Flag           PE  Parity even         PO  Parity odd
0001  CF  Carry Flag            CY  Carry               NC  No carry
</code></pre>
<p>
The short names of the flag states are displayed when dumping registers and can be entered to modify the symbolic F register with R. The short names of the flags can be modified by R.
</p>
<h3><a name="helpc"></a><a name="S15.4"></a>15.4 ?C - Conditionals <a href="#helpc">#</a></h3>
<p>
In the register dump displayed by the R, T, P and G commands, conditional jumps are displayed with a notice that shows whether the instruction will cause a jump depending on its condition and the current register and flag contents. This notice shows either "jumping" or "not jumping" as appropriate.
</p>
<p>
The conditional jumps use these conditions: (second column negates)
</p>
<pre><code> jo             jno             OF
 jc jb jnae     jnc jnb jae     CF
 jz je          jnz jne         ZF
 jbe jna        jnbe ja         ZF||CF
 js             jns             SF
 jp jpe         jnp jpo         PF
 jl jnge        jnl jge         OF^^SF
 jle jng        jnle jg         OF^^SF || ZF
 j(e)cxz                        (e)cx==0
 loop                           (e)cx!=1
 loopz loope                    (e)cx!=1 &amp;&amp; ZF
 loopnz loopne                  (e)cx!=1 &amp;&amp; !ZF
</code></pre>
<p>
Enter ?F to display a description of the flag names.
</p>
<h3><a name="helpe"></a><a name="S15.5"></a>15.5 ?E - Expressions <a href="#helpe">#</a></h3>
<p>
Recognized operators in expressions:
</p>
<pre><code>|       bitwise OR              ||      boolean OR
^       bitwise XOR             ^^      boolean XOR
&amp;       bitwise AND             &amp;&amp;      boolean AND
&gt;&gt;      bit-shift right         &gt;       test if above
&gt;&gt;&gt;     signed bit-shift right  &lt;       test if below
&lt;&lt;      bit-shift left          &gt;=      test if above-or-equal
&gt;&lt;      bit-mirror              &lt;=      test if below-or-equal
+       addition                ==      test if equal
-       subtraction             !=      test if not equal
*       multiplication          =&gt;      same as &gt;=
/       division                =&lt;      same as &lt;=
%       modulo (A-(A/B*B))      &lt;&gt;      same as !=
**      power
</code></pre>
<p>
Implicit operater precedence is handled in the listed order, with increasing precedence: (Brackets specify explicit precedence of an expression.)
</p>
<pre><code> boolean operators OR, XOR, AND (each has a different precedence)
 comparison operators
 bitwise operators OR, XOR, AND (each has a different precedence)
 shift and bit-mirror operators
 addition and subtraction operators
 multiplication, division and modulo operators
 power operator
</code></pre>
<p>
Recognized unary operators: (modifying the next number)
</p>
<pre><code>+       positive (does nothing)
-       negative
~       bitwise NOT
!       boolean NOT
?       absolute value
!!      convert to boolean
</code></pre>
<p>
Note that the power operator does not affect unary operator handling. For instance, "- 2 ** 2" is parsed as "(-2) ** 2" and evaluates to 4.
</p>
<p>
Although a negative unary and signed bit-shift right operator are provided the expression evaluator is intrinsically unsigned. Particularly the division, multiplication, modulo and all comparison operators operate unsigned. Due to this, the expression "-1 &lt; 0" evaluates to zero.
</p>
<p>
Recognized terms in an expression:
</p>
<pre><code> 32-bit immediates
 8-bit registers
 16-bit registers including segment registers (except FS, GS)
 32-bit compound registers made of two 16-bit registers (eg DXAX)
 32-bit registers and FS, GS only if running on a 386+
 32-bit variables V00..VFF
 32-bit special variables DCO, DCS, DAO, DAS, DIF, DPI, PPI
 16-bit special variables DPR, DPP, PSP, PPR
  (fuller variable reference in the manual)
 byte/word/3byte/dword memory content (eg byte [seg:ofs], where both the
  optional segment as well as the offset are expressions too)
</code></pre>
<p>
The expression evaluator case-insensitively checks for names of variables and registers as well as size specifiers.
</p>
<p>
Enter ?R to display the recognized register names. Enter ?V to display the recognized variables.
</p>
<h3><a name="helpv"></a><a name="S15.6"></a>15.6 ?V - Variables <a href="#helpv">#</a></h3>
<p>
Available lDebug variables:
</p>
<ul><li>
V0..VF User-specified usage
</li>
<li>
DCO Debugger Common Options
</li>
<li>
DAO Debugger Assembler/disassembler Options
</li>
</ul>
<p>
The following variables cannot be written:
</p>
<ul><li>
PSP Debuggee Process
</li>
<li>
PPR Debuggee's Parent Process
</li>
<li>
PPI Debuggee's Parent Process Interrupt 22h
</li>
<li>
DIF Debugger Internal Flags
</li>
<li>
DCS Debugger Common Startup options
</li>
<li>
DAS Debugger Assembler/disassembler Startup options
</li>
<li>
DPR Debugger Process
</li>
<li>
DPP Debugger's Parent Process (zero in TSR mode)
</li>
<li>
DPI Debugger's Parent process Interrupt 22h (zero in TSR mode)
</li>
</ul>
<p>
Enter ?O to display the options and internal flags.
</p>
<h3><a name="helpre"></a><a name="S15.7"></a>15.7 ?RE - R Extended <a href="#helpre">#</a></h3>
<p>
The RUN commands (T, TP, P, G) and the RE command use the RE command buffer to run commands. Most commands are allowed to be run from the RE buffer. Disallowed commands include program-loading L, A, E that switches the line input mode, TSR, Q, Y, RE, and further RUN commands. When the RE buffer is used as input during T, TP, or P with either of the WHILE or SILENT keywords, commands that use the auxbuff are also disallowed and will emit an error noting the conflict.
</p>
<p>
RE.LIST shows the current RE buffer contents in a format usable by the other RE commands. RE.APPEND appends the following commands to the buffer, if they fit. RE.REPLACE appends to the start of the buffer. When specifying commands, an unescaped semicolon is parsed as a linebreak to break apart individual commands. Backslashes can be used to escape semicolons and backslashes themselves.
</p>
<p>
Prefixing a line with an @ (AT sign) causes the command not to be shown to the standard output of the debugger when run. Otherwise, the command will be shown with a percent sign % or ~% prompt.
</p>
<p>
The default RE buffer content is @R. This content is also detected and handled specifically; if found as the only command the handler directly calls the register dump implementation without setting up and tearing down the special execution environment used to run arbitrary commands from the RE buffer.
</p>
<h3><a name="helprun"></a><a name="S15.8"></a>15.8 ?RUN - Run keywords <a href="#helprun">#</a></h3>
<p>
T (trace), TP (trace except proceed past string operations), and P (proceed) can be followed by a number of repetitions and then the keyword WHILE, which must be followed by a conditional expression.
</p>
<p>
The selected run command is repeated as many times as specified by the number, or until the WHILE condition evaluates no longer to true.
</p>
<p>
After the number of repetitions or (if present) after the WHILE condition the keyword SILENT may follow. If that is the case, all register dumps done during the run are buffered by the debugger and the run remains silent. After the run, the last dumps are replayed from the buffer and displayed. At most as many dumps as fit into the buffer are displayed. (The buffer is currently up to 8 KiB sized.)
</p>
<p>
If a number follows behind the SILENT keyword, only at most that many dumps are displayed from the buffer. The dumps that are displayed are always those last written into the buffer, thus last occurred.
</p>
<h3><a name="helpoptions"></a><a name="S15.9"></a>15.9 ?OPTIONS - Options pages <a href="#helpoptions">#</a></h3>
<p>
Enter one of the following commands to get a corresponding help page:
</p>
<ul><li>
?O1 DCO1 - Options
</li>
<li>
?O2 DCO2 - More Options
</li>
<li>
?O3 DCO3 - More Options
</li>
<li>
?O4 DCO4 - Interrupt Hooking Options
</li>
<li>
?O6 DCO6 - More Options
</li>
<li>
?OI DIF - Internal Flags
</li>
<li>
?OA DAO - Assembler/Disassembler Options
</li>
</ul>
<h3><a name="helpo"></a><a name="S15.10"></a>15.10 ?O - Options <a href="#helpo">#</a></h3>
<p>
Available options: (read/write DCO, read DCS)
</p>
<ul><li>
0001 RX: 32-bit register display
</li>
<li>
0002 TM: trace into interrupts
</li>
<li>
0004 allow dumping of CP-dependant characters
</li>
<li>
0008 always assume InDOS flag non-zero, to debug DOS or TSRs
</li>
<li>
0010 disallow paged output to StdOut
</li>
<li>
0020 allow paged output to non-StdOut
</li>
<li>
0040 display raw hexadecimal content of FPU registers
</li>
<li>
0100 when prompting during paging, do not use DOS for input
</li>
<li>
0200 do not execute HLT instruction to idle
</li>
<li>
0400 do not idle, the keyboard BIOS idles itself
</li>
<li>
0800 use getinput function for int 21h interactive input
</li>
<li>
1000 in disp_*_size use SI units (kB = 1000, etc). overrides 2000!
</li>
<li>
2000 in disp_*_size use JEDEC units (KB = 1024)
</li>
<li>
4000 enable serial I/O (port 02F8h interrupt 0Bh)
</li>
<li>
8000 disable serial I/O when breaking after 5 seconds Ctrl pressed
</li>
<li>
0001_0000 gg: do not skip a breakpoint (bb or gg)
</li>
<li>
0002_0000 gg: do not auto-repeat
</li>
<li>
0004_0000 T/TP/P: do not skip a (bb) breakpoint
</li>
<li>
0008_0000 gg: do not auto-repeat after bb hit
</li>
<li>
0010_0000 T/TP/P: do not auto-repeat after bb hit
</li>
<li>
0020_0000 gg: do not auto-repeat after unexpectedinterrupt
</li>
<li>
0040_0000 T/TP/P: do not auto-repeat after unexpectedinterrupt
</li>
<li>
0080_0000 S: do not dump data after matches
</li>
<li>
1000_0000 R: do not repeat disassembly
</li>
<li>
2000_0000 R: do not show memory reference in disassembly
</li>
<li>
4000_0000 quiet command line buffer input
</li>
<li>
8000_0000 quiet command line buffer output
</li>
</ul>
<p>
More options: (read/write DCO2, read DCS2)
</p>
<ul><li>
0001 DB: show header
</li>
<li>
0002 DB: show trailer
</li>
<li>
0010 DW: show header
</li>
<li>
0020 DW: show trailer
</li>
<li>
0100 DD: show header
</li>
<li>
0200 DD: show trailer
</li>
<li>
0800 use getinput function for int 21h interactive input in DPMI
</li>
<li>
1000 H: stay compatible to MS-DOS Debug
</li>
<li>
2000 idle and check for Ctrl-C in getc
</li>
<li>
4000 idle and check for Ctrl-C in getc in DPMI
</li>
<li>
8000 T/TP/P/G: cancel run after RE command buffer execution
</li>
</ul>
<p>
More options: (read/write DCO3, read DCS3)
</p>
<ul><li>
0001 T: do not page output
</li>
<li>
0002 TP: do not page output
</li>
<li>
0004 P: do not page output
</li>
<li>
0008 G: do not page output
</li>
<li>
0100 T/TP/P: modify paging for silent dump
</li>
<li>
0200 T/TP/P: if 0100 set: turn paging on, else off
</li>
<li>
01_0000 R: highlight changed digits (needs ANSI for DOS output)
</li>
<li>
02_0000 R: highlight escape sequences to int 10h, else video attributes
</li>
<li>
04_0000 R: highlight changed registers (overrides 01_0000)
</li>
<li>
08_0000 R: include highlighting of EIP
</li>
<li>
10_0000 set PM ss B bit
</li>
<li>
20_0000 break on entering Protected Mode
</li>
<li>
0100_0000 highlight prefix/suffix in getinput if text parts are not visible
</li>
<li>
0200_0000 do not call int 2F.1680 for idling
</li>
<li>
0400_0000 delay for a tick before writing breakpoints
</li>
<li>
0800_0000 do not call other lDebug instance's Update IISP Header call
</li>
<li>
1000_0000 disable auto-repeat
</li>
<li>
2000_0000 check int 16h buffer for Control-C if inputting from int 16h
</li>
<li>
4000_0000 call DOS service 0Bh to check for Control-C
</li>
<li>
8000_0000 when Q command is used while TSR, leave TF as is
</li>
</ul>
<p>
More options: (read/write DCO4, read DCS4)
</p>
<ul><li>
0002 enable interrupt 2Fh hook while in 86 Mode
</li>
<li>
0004 enable interrupt 8 hook
</li>
<li>
0008 enable interrupt 2Dh hook
</li>
<li>
0001_0000 force serial interrupt unhooking
</li>
<li>
0002_0000 force interrupt 2Fh unhooking
</li>
<li>
0004_0000 force interrupt 8 unhooking
</li>
<li>
0008_0000 force interrupt 2Dh unhooking
</li>
<li>
0100_0000 force interrupt 0 unhooking
</li>
<li>
0200_0000 force interrupt 1 unhooking
</li>
<li>
0400_0000 force interrupt 3 unhooking
</li>
<li>
0800_0000 force interrupt 6 unhooking
</li>
<li>
1000_0000 force interrupt 18h unhooking
</li>
<li>
2000_0000 force interrupt 19h unhooking
</li>
</ul>
<p>
More options: (read/write DCO6, read DCS6)
</p>
<ul><li>
0001 enable video screen swapping
</li>
<li>
0002 keep video screen when disabling swapping
</li>
<li>
0010 read key from interrupt 16h when swapping (V command)
</li>
<li>
0100 enable debug mode (and BU command)
</li>
<li>
0200 use ROM-BIOS output even when DOS available
</li>
<li>
0400 load and write .EXE and .COM files like flat .BIN files (/F+)
</li>
<li>
0800 for loading flat .BIN files set up Stack Segment != PSP (/E+)
</li>
<li>
1000 enable 40-column friendly mode
</li>
<li>
2000 in 40-column mode indent odd D lines more
</li>
<li>
4000 in 40-column mode display dashes at half of D length
</li>
<li>
01_0000 allow to share serial IRQ handler
</li>
<li>
0100_0000 use ROM-BIOS I/O even when DOS available (disables script file read)
</li>
</ul>
<p>
Internal flags: (read DIF)
</p>
<ul><li>
00_0001 Int25/Int26 packet method available
</li>
<li>
00_0002 Int21.7305 packet method available
</li>
<li>
00_0004 VDD registered and usable
</li>
<li>
00_0008 internal flag for paged output
</li>
<li>
00_0010 DEBUG's input isn't StdIn
</li>
<li>
00_0020 DEBUG's input is a file
</li>
<li>
00_0040 DEBUG's output isn't StdOut
</li>
<li>
00_0080 DEBUG's output is a file
</li>
<li>
00_1000 state of debuggee's A20
</li>
<li>
00_2000 state of debugger's A20 (not implemented: same as previous)
</li>
<li>
00_4000 debugger booted independent of a DOS
</li>
<li>
00_8000 CPU is at least a 386 (32-bit CPU)
</li>
<li>
01_0000 internal flag for tab output processing
</li>
<li>
02_0000 running inside NTVDM
</li>
<li>
10_0000 internal flag for paged output
</li>
<li>
40_0000 in TSR mode (detached debugger process)
</li>
<li>
0100_0000 running inside dosemu
</li>
<li>
0400_0000 T/TP/P: while condition specified
</li>
<li>
0800_0000 TP: P specified (proceed past string ops)
</li>
<li>
1000_0000 T/TP/P: silent mode (SILENT specified)
</li>
<li>
2000_0000 T/TP/P: silent mode is active, writing to silent buffer
</li>
</ul>
<p>
Available assembler/disassembler options: (read/write DAO, read DAS)
</p>
<ul><li>
01 Disassembler: lowercase output
</li>
<li>
02 Disassembler: output blank behind comma
</li>
<li>
04 Disassembler: output addresses in NASM syntax
</li>
<li>
08 Disassembler: lowercase referenced memory location segreg
</li>
<li>
10 Disassembler: always show SHORT keyword
</li>
<li>
20 Disassembler: always show NEAR keyword
</li>
<li>
40 Disassembler: always show FAR keyword
</li>
<li>
80 Disassembler: NEC V20 repeat rules (for segregs)
</li>
<li>
0100 Disassembler: 40-column friendly mode (only 4 bytes machine code per line)
</li>
<li>
0200 Disassembler: do not indent disassembly operands
</li>
<li>
1000 Disassembler: access data in a16 referenced memory operand
</li>
<li>
2000 Disassembler: access data in a32 referenced memory operand
</li>
<li>
4000 Disassembler: simulate repeated a16 scas/cmps string operation
</li>
<li>
8000 Disassembler: simulate repeated a32 scas/cmps string operation
</li>
</ul>
<h3><a name="helpboot"></a><a name="S15.11"></a>15.11 ?BOOT - Boot loading <a href="#helpboot">#</a></h3>
<p>
Boot loading commands:
</p>
<ul><li>
BOOT LIST HDA
</li>
<li>
BOOT DIR [partition] [dirname]
</li>
<li>
BOOT READ|WRITE [partition] segment [[HIDDEN=sector] sector] [count]
</li>
<li>
BOOT QUIT [exits dosemu or shuts down using APM]
</li>
<li>
BOOT [PROTOCOL=SECTOR] partition
</li>
<li>
BOOT PROTOCOL=proto [opt] [partition] [filename1] [filename2] [cmdline]
</li>
<li>
the following partitions may be specified:
<ul><li>
HDAnum first hard disk, num = partition (1-4 primary, 5+ logical)
</li>
<li>
HDBnum second hard disk (etc), num = partition
</li>
<li>
HDA first hard disk (only valid for READ|WRITE|PROTOCOL=SECTOR)
</li>
<li>
FDA first floppy disk
</li>
<li>
FDB second floppy disk (etc)
</li>
<li>
LDP partition the debugger loaded from
</li>
<li>
YDP partition the most recent Y command loaded from
</li>
<li>
SDP last used partition (default if no partition specified)
</li>
<li>
filename2 may be double-slash // for none
</li>
<li>
cmdline is only valid for lDOS, RxDOS.2, RxDOS.3 protocols
</li>
<li>
files' directory entries are loaded to 500h and 520h 
</li>
</ul>

</li>
</ul>
<p>
Available protocols: (default filenames, load segment, then entrypoint)
</p>
<ul><li>
LDOS LDOS.COM or L[D]DEBUG.COM at 200h, 0:400h
</li>
<li>
FREEDOS KERNEL.SYS or METAKERN.SYS at 60h, 0:0
</li>
<li>
DOSC IPL.SYS at 2000h, 0:0
</li>
<li>
EDRDOS DRBIO.SYS at 70h, 0:0
</li>
<li>
MSDOS6 IO.SYS + MSDOS.SYS at 70h, 0:0
</li>
<li>
MSDOS7 IO.SYS at 70h, 0:200h
</li>
<li>
IBMDOS IBMBIO.COM + IBMDOS.COM at 70h, 0:0
</li>
<li>
NTLDR NTLDR at 2000h, 0:0
</li>
<li>
BOOTMGR BOOTMGR at 2000h, 0:0
</li>
<li>
RXDOS.0 RXDOSBIO.SYS + RXDOS.SYS at 70h, 0:0
</li>
<li>
RXDOS.1 RXBIO.SYS + RXDOS.SYS at 70h, 0:0
</li>
<li>
RXDOS.2 RXDOS.COM at 70h, 0:400h
</li>
<li>
RXDOS.3 RXDOS.COM at 200h, 0:400h
</li>
<li>
CHAIN BOOTSECT.DOS at 7C0h, -7C0h:7C00h
</li>
<li>
SECTOR (default) load partition boot sector or MBR
</li>
<li>
SECTORALT as SECTOR, but entry at 07C0h:0
</li>
</ul>
<p>
Available options:
</p>
<ul><li>
MINPARA=num load at least that many paragraphs
</li>
<li>
MAXPARA=num load at most that many paragraphs (0 = as many as fit)
</li>
<li>
SEGMENT=num change segment at that the kernel loads
</li>
<li>
ENTRY=[num:]num change entrypoint (CS (relative) : IP)
</li>
<li>
BPB=[num:]num change BPB load address (segment -1 = auto-BPB)
</li>
<li>
CHECKOFFSET=num set address of word to check, must be even
</li>
<li>
CHECKVALUE=num set value of word to check (0 = no check)
</li>
</ul>
<p>
Boolean options: [opt=bool]
</p>
<ul><li>
SET_DL_UNIT set dl to load unit
</li>
<li>
SET_BL_UNIT set bl to load unit
</li>
<li>
SET_SIDI_CLUSTER set si:di to first cluster
</li>
<li>
SET_DSSI_DPT set ds:si to DPT address
</li>
<li>
PUSH_DPT push DPT address and DPT entry address
</li>
<li>
DATASTART_HIDDEN add hidden sectors to datastart var
</li>
<li>
SET_AXBX_DATASTART set ax:bx to datastart var
</li>
<li>
SET_DSBP_BPB set ds:bp to BPB address
</li>
<li>
LBA_SET_TYPE set LBA partition type in BPB
</li>
<li>
MESSAGE_TABLE provide message table pointed to at 1EEh
</li>
<li>
SET_AXBX_ROOT_HIDDEN set ax:bx to root start with hidden sectors
</li>
<li>
NO_BPB do not load BPB
</li>
<li>
SET_DSSI_PARTINFO load part table to 600h, point ds:si + ds:bp to it
</li>
<li>
CMDLINE pass a kernel command line (recent FreeDOS extension)
</li>
</ul>
<h3><a name="helpbuild"></a><a name="S15.12"></a>15.12 ?BUILD - lDebug build (only revisions) <a href="#helpbuild">#</a></h3>
<pre><code>lDebug (YYYY-MM-DD)
Source Control Revision ID: hg xxxxxxxxxxxx (vvvv ancestors)
Uses yyyyyyyy: Revision ID hg zzzzzzzzzzzz (www ancestors)
[etc]
</code></pre>
<h3><a name="helpb"></a><a name="S15.13"></a>15.13 ?B - lDebug build (with options) <a href="#helpb">#</a></h3>
<pre><code>lDebug (YYYY-MM-DD)
Source Control Revision ID: hg xxxxxxxxxxxx (vvvv ancestors)
Uses yyyyyyyy: Revision ID hg zzzzzzzzzzzz (www ancestors)
[etc]

DI command
DM command
D string commands
S match dumps line of following data
RN command
Access SDA current PSP field
Load NTVDM VDD for sector access
X commands for EMS access
RM command and reading MMX registers as variables
Expression evaluator
 Indirection in expressions
Variables with user-defined purpose
Debugger option and status variables
PSP variables
Conditional jump notice in register dump
TSR mode (Process detachment)
Boot loader
Permanent breakpoints
Intercepted interrupts: 00, 01, 03, 06, 18, 19
Extended built-in help pages
</code></pre>
<h3><a name="helpx"></a><a name="S15.14"></a>15.14 ?X - EMS commands <a href="#helpx">#</a></h3>
<pre><code>Expanded memory (EMS) commands:
  Allocate      XA count
  Deallocate    XD handle
  Map memory    XM logical-page physical-page handle
  Reallocate    XR handle count
  Show status   XS
</code></pre>
<h3><a name="helpsource"></a><a name="S15.15"></a>15.15 ?SOURCE - lDebug source reference <a href="#helpsource">#</a></h3>
<p>
The original lDebug sources can be obtained from the repo located at <a href="https://hg.pushbx.org/ecm/ldebug">https://hg.pushbx.org/ecm/ldebug</a> (E. C. Masloch's repo)
</p>
<p>
Releases of lDebug are available via the website at <a href="https://pushbx.org/ecm/web/#projects-ldebug">https://pushbx.org/ecm/web/#projects-ldebug</a>
</p>
<p>
The most recent manual is hosted at <a href="https://pushbx.org/ecm/doc/">https://pushbx.org/ecm/doc/</a> in the files <a href="https://pushbx.org/ecm/doc/ldebug.htm">ldebug.htm</a>, <a href="https://pushbx.org/ecm/doc/ldebug.txt">ldebug.txt</a>, and <a href="https://pushbx.org/ecm/doc/ldebug.pdf">ldebug.pdf</a>
</p>
<h3><a name="helpl"></a><a name="S15.16"></a>15.16 ?L - lDebug license <a href="#helpl">#</a></h3>
<p>
lDebug - libre 86-DOS debugger
</p>
<ul><li>
Copyright (C) 1995-2003 Paul Vojta
</li>
<li>
Copyright (C) 2008-2021 C. Masloch
</li>
</ul>
<p>
Usage of the works is permitted provided that this instrument is retained with the works, so that any entity that uses the works is notified of this instrument.
</p>
<p>
DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
</p>
<p>
All contributions by Paul Vojta or C. Masloch to the debugger are available under a choice of three different licenses. These are the Fair License, the Simplified 2-Clause BSD License, or the MIT License.
</p>
<p>
This is the license and copyright information that applies to lDebug; but note that there have been substantial contributions to the code base that are not copyrighted (public domain).
</p>
<h2><a name="additionalusageconditions"></a><a name="S16"></a>16: Additional usage conditions <a href="#additionalusageconditions">#</a></h2>
<p>
The program executables can be compressed with a choice of different compressors. The files then contain a decompression stub. Some of these stubs have their own usage conditions. The following stub usage conditions apply, if one of these stubs is used.
</p>
<h3><a name="auc-brieflz"></a><a name="S16.1"></a>16.1 BriefLZ depacker usage conditions <a href="#auc-brieflz">#</a></h3>
<p>
BriefLZ - small fast Lempel-Ziv
</p>
<p>
8086 Assembly lDOS iniload payload BriefLZ depacker
</p>
<p>
Based on: BriefLZ C safe depacker
</p>
<p>
Copyright (c) 2002-2016 Joergen Ibsen
</p>
<p>
This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
</p>
<p>
Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
</p>
<ol><li>
The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
</li>
<li>
Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
</li>
<li>
This notice may not be removed or altered from any source distribution.
</li>
</ol>
<h3><a name="auc-lz4"></a><a name="S16.2"></a>16.2 LZ4 depacker usage conditions <a href="#auc-lz4">#</a></h3>
<dl><dt>
8086 Assembly lDOS iniload payload LZ4 depacker
</dt>
<dd>
by C. Masloch, 2018
</dd>
</dl>
<p>
Usage of the works is permitted provided that this instrument is retained with the works, so that any entity that uses the works is notified of this instrument.
</p>
<p>
DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
</p>
<h3><a name="auc-snappy"></a><a name="S16.3"></a>16.3 Snappy depacker usage conditions <a href="#auc-snappy">#</a></h3>
<dl><dt>
8086 Assembly lDOS iniload payload Snappy depacker
</dt>
<dd>
by C. Masloch, 2018
</dd>
</dl>
<p>
Usage of the works is permitted provided that this instrument is retained with the works, so that any entity that uses the works is notified of this instrument.
</p>
<p>
DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
</p>
<h3><a name="auc-exomizer"></a><a name="S16.4"></a>16.4 Exomizer depacker usage conditions <a href="#auc-exomizer">#</a></h3>
<dl><dt>
8086 Assembly lDOS iniload payload exomizer raw depacker
</dt>
<dd>
by C. Masloch, 2020
</dd>
</dl>
<p>
Copyright (c) 2005-2017 Magnus Lind.
</p>
<p>
This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
</p>
<p>
Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
</p>
<ol><li>
The origin of this software must not be misrepresented * you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
</li>
<li>
Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
</li>
<li>
This notice may not be removed or altered from any distribution.
</li>
<li>
The names of this software and/or it's copyright holders may not be used to endorse or promote products derived from this software without specific prior written permission.
</li>
</ol>
<h3><a name="auc-x"></a><a name="S16.5"></a>16.5 X compressor depacker usage conditions <a href="#auc-x">#</a></h3>
<p>
MIT License
</p>
<p>
Copyright (c) 2020 David Barina
</p>
<p>
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
</p>
<p>
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
</p>
<p>
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</p>
<h3><a name="auc-heatshrink"></a><a name="S16.6"></a>16.6 Heatshrink depacker usage conditions <a href="#auc-heatshrink">#</a></h3>
<dl><dt>
8086 Assembly lDOS iniload payload heatshrink depacker
</dt>
<dd>
by C. Masloch, 2020
</dd>
</dl>
<p>
Usage of the works is permitted provided that this instrument is retained with the works, so that any entity that uses the works is notified of this instrument.
</p>
<p>
DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
</p>
<h3><a name="auc-lzd"></a><a name="S16.7"></a>16.7 Lzd usage conditions <a href="#auc-lzd">#</a></h3>
<dl><dt>
Lzd - Educational decompressor for the lzip format
</dt>
<dd>
Copyright (C) 2013-2019 Antonio Diaz Diaz.
</dd>
</dl>
<p>
This program is free software. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
</p>
<ol><li>
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
</li>
<li>
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
</li>
</ol>
<p>
This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
</p>
<h3><a name="auc-lzo"></a><a name="S16.8"></a>16.8 LZO depacker usage conditions <a href="#auc-lzo">#</a></h3>
<dl><dt>
8086 Assembly lDOS iniload payload LZO depacker
</dt>
<dd>
by C. Masloch, 2020
</dd>
</dl>
<p>
Usage of the works is permitted provided that this instrument is retained with the works, so that any entity that uses the works is notified of this instrument.
</p>
<p>
DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY.
</p>
<h3><a name="auc-lzsa2"></a><a name="S16.9"></a>16.9 LZSA2 depacker usage conditions <a href="#auc-lzsa2">#</a></h3>
<dl><dt>
8086 Assembly lDOS iniload payload LZSA2 depacker
</dt>
<dd>
by C. Masloch, 2021
</dd>
<dd>
based on:
</dd>
<dt>
decompress_small.S - space-efficient decompressor implementation for 8088
</dt>
</dl>
<p>
Copyright (C) 2019 Emmanuel Marty
</p>
<p>
This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
</p>
<p>
Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
</p>
<ol><li>
The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
</li>
<li>
Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
</li>
<li>
This notice may not be removed or altered from any source distribution.
</li>
</ol>
<h3><a name="auc-apl"></a><a name="S16.10"></a>16.10 aPLib depacker usage conditions <a href="#auc-apl">#</a></h3>
<dl><dt>
8086 Assembly lDOS iniload payload aPLib depacker
</dt>
<dd>
by C. Masloch, 2021
</dd>
<dd>
based on:
</dd>
<dt>
aplib_8088_small.S - size-optimized aPLib decompressor for 8088 - 145 bytes
</dt>
</dl>
<p>
Copyright (C) 2019 Emmanuel Marty
</p>
<p>
This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
</p>
<p>
Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
</p>
<ol><li>
The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
</li>
<li>
Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
</li>
<li>
This notice may not be removed or altered from any source distribution.
</li>
</ol>
<h3><a name="auc-bzp"></a><a name="S16.11"></a>16.11 bzpack depacker usage conditions <a href="#auc-bzp">#</a></h3>
<dl><dt>
8086 Assembly lDOS iniload payload bzpack depacker
</dt>
<dd>
by C. Masloch, 2021
</dd>
</dl>
<p>
BSD 2-Clause License
</p>
<p>
Copyright (c) 2021, Milos Bazelides
</p>
<p>
All rights reserved.
</p>
<p>
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
</p>
<ol><li>
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
</li>
<li>
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
</li>
</ol>
<p>
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
</p>
<h2><a name="SourceControlRevisionID"></a><a name="SourceControlRevisionID-2"></a>Source Control Revision ID <a href="#SourceControlRevisionID">#</a></h2>
<p>
hg e6235646427d, from commit on at 2023-03-23 15:11:23 +0100
</p>
<p>
If this is in ecm's repository, you can find it at <a href="https://hg.pushbx.org/ecm/ldebug/rev/e6235646427d">https://hg.pushbx.org/ecm/ldebug/rev/e6235646427d</a>
</p>

</body>
</html>
